
flight_simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f4  0800c1f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1fc  0800c1fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c200  0800c200  0001c200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042fc  20000074  0800c278  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004370  0800c278  00024370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c872  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b1a  00000000  00000000  0003c916  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001758  00000000  00000000  00040430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  00041b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000272b6  00000000  00000000  00043140  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134bd  00000000  00000000  0006a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea402  00000000  00000000  0007d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006584  00000000  00000000  00167d30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c040 	.word	0x0800c040

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	0800c040 	.word	0x0800c040

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b972 	b.w	8000dd8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	4688      	mov	r8, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14b      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	d967      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0720 	rsb	r7, r2, #32
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b32:	4095      	lsls	r5, r2
 8000b34:	ea47 0803 	orr.w	r8, r7, r3
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b44:	fa1f fc85 	uxth.w	ip, r5
 8000b48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b50:	fb07 f10c 	mul.w	r1, r7, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b5e:	f080 811b 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8118 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	442b      	add	r3, r5
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8a:	f080 8107 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	f240 8104 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b94:	3802      	subs	r0, #2
 8000b96:	442c      	add	r4, r5
 8000b98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	b11e      	cbz	r6, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xbe>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80eb 	beq.w	8000d92 <__udivmoddi4+0x286>
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f783 	clz	r7, r3
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d147      	bne.n	8000c62 <__udivmoddi4+0x156>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd0>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80fa 	bhi.w	8000dd0 <__udivmoddi4+0x2c4>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4698      	mov	r8, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000bea:	e9c6 4800 	strd	r4, r8, [r6]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa0>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xe8>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 808f 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfe:	1b49      	subs	r1, r1, r5
 8000c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c04:	fa1f f885 	uxth.w	r8, r5
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb08 f10c 	mul.w	r1, r8, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1a59      	subs	r1, r3, r1
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x14c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x14a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80b6 	bhi.w	8000dc2 <__udivmoddi4+0x2b6>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e79f      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c62:	f1c7 0c20 	rsb	ip, r7, #32
 8000c66:	40bb      	lsls	r3, r7
 8000c68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c70:	fa01 f407 	lsl.w	r4, r1, r7
 8000c74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c80:	4325      	orrs	r5, r4
 8000c82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c86:	0c2c      	lsrs	r4, r5, #16
 8000c88:	fb08 3319 	mls	r3, r8, r9, r3
 8000c8c:	fa1f fa8e 	uxth.w	sl, lr
 8000c90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c94:	fb09 f40a 	mul.w	r4, r9, sl
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	f080 8087 	bcs.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f240 8084 	bls.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4473      	add	r3, lr
 8000cbc:	1b1b      	subs	r3, r3, r4
 8000cbe:	b2ad      	uxth	r5, r5
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ccc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	d26b      	bcs.n	8000db6 <__udivmoddi4+0x2aa>
 8000cde:	45a2      	cmp	sl, r4
 8000ce0:	d969      	bls.n	8000db6 <__udivmoddi4+0x2aa>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4474      	add	r4, lr
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	454c      	cmp	r4, r9
 8000cf4:	46c2      	mov	sl, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	d354      	bcc.n	8000da4 <__udivmoddi4+0x298>
 8000cfa:	d051      	beq.n	8000da0 <__udivmoddi4+0x294>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d069      	beq.n	8000dd4 <__udivmoddi4+0x2c8>
 8000d00:	ebb1 050a 	subs.w	r5, r1, sl
 8000d04:	eb64 0403 	sbc.w	r4, r4, r3
 8000d08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	40fc      	lsrs	r4, r7
 8000d10:	ea4c 0505 	orr.w	r5, ip, r5
 8000d14:	e9c6 5400 	strd	r5, r4, [r6]
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e747      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f703 	lsr.w	r7, r0, r3
 8000d24:	4095      	lsls	r5, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d32:	4338      	orrs	r0, r7
 8000d34:	0c01      	lsrs	r1, r0, #16
 8000d36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3a:	fa1f f885 	uxth.w	r8, r5
 8000d3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb07 f308 	mul.w	r3, r7, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x256>
 8000d52:	1869      	adds	r1, r5, r1
 8000d54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d58:	d22f      	bcs.n	8000dba <__udivmoddi4+0x2ae>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d92d      	bls.n	8000dba <__udivmoddi4+0x2ae>
 8000d5e:	3f02      	subs	r7, #2
 8000d60:	4429      	add	r1, r5
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	b281      	uxth	r1, r0
 8000d66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb00 f308 	mul.w	r3, r0, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x27e>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d80:	d217      	bcs.n	8000db2 <__udivmoddi4+0x2a6>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d915      	bls.n	8000db2 <__udivmoddi4+0x2a6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d90:	e73b      	b.n	8000c0a <__udivmoddi4+0xfe>
 8000d92:	4637      	mov	r7, r6
 8000d94:	4630      	mov	r0, r6
 8000d96:	e709      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e6e7      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fb      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000da0:	4541      	cmp	r1, r8
 8000da2:	d2ab      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dac:	3801      	subs	r0, #1
 8000dae:	4613      	mov	r3, r2
 8000db0:	e7a4      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db2:	4660      	mov	r0, ip
 8000db4:	e7e9      	b.n	8000d8a <__udivmoddi4+0x27e>
 8000db6:	4618      	mov	r0, r3
 8000db8:	e795      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dba:	4667      	mov	r7, ip
 8000dbc:	e7d1      	b.n	8000d62 <__udivmoddi4+0x256>
 8000dbe:	4681      	mov	r9, r0
 8000dc0:	e77c      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	442c      	add	r4, r5
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0x14c>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	442b      	add	r3, r5
 8000dce:	e72f      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xda>
 8000dd4:	4637      	mov	r7, r6
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0xa0>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BMP180_Init>:
#include "BMP180.h"



void BMP180_Init()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c2, BMP180_WRITE_ADD, 1, HAL_MAX_DELAY) == HAL_OK){
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	2201      	movs	r2, #1
 8000de6:	21ee      	movs	r1, #238	; 0xee
 8000de8:	4815      	ldr	r0, [pc, #84]	; (8000e40 <BMP180_Init+0x64>)
 8000dea:	f004 f979 	bl	80050e0 <HAL_I2C_IsDeviceReady>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d122      	bne.n	8000e3a <BMP180_Init+0x5e>
		AC1=1; // 8 bit msb 8 bit lsb
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <BMP180_Init+0x68>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	801a      	strh	r2, [r3, #0]
		AC2=1;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <BMP180_Init+0x6c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	801a      	strh	r2, [r3, #0]
		AC3=1;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <BMP180_Init+0x70>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	801a      	strh	r2, [r3, #0]
		AC4=1;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <BMP180_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	801a      	strh	r2, [r3, #0]
		AC5=1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <BMP180_Init+0x78>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	801a      	strh	r2, [r3, #0]
		AC6=1;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <BMP180_Init+0x7c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	801a      	strh	r2, [r3, #0]
		B1=1;
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <BMP180_Init+0x80>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	801a      	strh	r2, [r3, #0]
		B2=1;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <BMP180_Init+0x84>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	801a      	strh	r2, [r3, #0]
		MB=1;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <BMP180_Init+0x88>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	801a      	strh	r2, [r3, #0]
		MC=1;
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <BMP180_Init+0x8c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	801a      	strh	r2, [r3, #0]
		MD=1;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <BMP180_Init+0x90>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	801a      	strh	r2, [r3, #0]
		BMP180_GetCalibrationValue();
 8000e36:	f000 f81b 	bl	8000e70 <BMP180_GetCalibrationValue>

	}
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20004154 	.word	0x20004154
 8000e44:	200040a8 	.word	0x200040a8
 8000e48:	200040d6 	.word	0x200040d6
 8000e4c:	200040d8 	.word	0x200040d8
 8000e50:	200040c6 	.word	0x200040c6
 8000e54:	200040bc 	.word	0x200040bc
 8000e58:	200040aa 	.word	0x200040aa
 8000e5c:	200040e8 	.word	0x200040e8
 8000e60:	200040da 	.word	0x200040da
 8000e64:	200040d4 	.word	0x200040d4
 8000e68:	200040ea 	.word	0x200040ea
 8000e6c:	200040a6 	.word	0x200040a6

08000e70 <BMP180_GetCalibrationValue>:

void BMP180_GetCalibrationValue()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af04      	add	r7, sp, #16
	 uint8_t counterCalibration = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]

	 uint8_t bmp180Buffer[COUNT_OF_CAL_VAL];
	 HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADD, 0xAA, 1, bmp180Buffer, COUNT_OF_CAL_VAL, HAL_MAX_DELAY);
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	9302      	str	r3, [sp, #8]
 8000e80:	2316      	movs	r3, #22
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	463b      	mov	r3, r7
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	22aa      	movs	r2, #170	; 0xaa
 8000e8c:	21ef      	movs	r1, #239	; 0xef
 8000e8e:	48aa      	ldr	r0, [pc, #680]	; (8001138 <BMP180_GetCalibrationValue+0x2c8>)
 8000e90:	f003 ff00 	bl	8004c94 <HAL_I2C_Mem_Read>
	 HAL_Delay(15);
 8000e94:	200f      	movs	r0, #15
 8000e96:	f001 fd2f 	bl	80028f8 <HAL_Delay>
	 AC1 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
 8000e9c:	f107 0218 	add.w	r2, r7, #24
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	7dfb      	ldrb	r3, [r7, #23]
 8000eac:	3301      	adds	r3, #1
 8000eae:	f107 0118 	add.w	r1, r7, #24
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000eb8:	b21b      	sxth	r3, r3
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	b21a      	sxth	r2, r3
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	; (800113c <BMP180_GetCalibrationValue+0x2cc>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000ec2:	7dfb      	ldrb	r3, [r7, #23]
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	75fb      	strb	r3, [r7, #23]
	 AC2 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000ec8:	7dfb      	ldrb	r3, [r7, #23]
 8000eca:	f107 0218 	add.w	r2, r7, #24
 8000ece:	4413      	add	r3, r2
 8000ed0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	3301      	adds	r3, #1
 8000edc:	f107 0118 	add.w	r1, r7, #24
 8000ee0:	440b      	add	r3, r1
 8000ee2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21a      	sxth	r2, r3
 8000eec:	4b94      	ldr	r3, [pc, #592]	; (8001140 <BMP180_GetCalibrationValue+0x2d0>)
 8000eee:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	75fb      	strb	r3, [r7, #23]
	 AC3 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	f107 0218 	add.w	r2, r7, #24
 8000efc:	4413      	add	r3, r2
 8000efe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f107 0118 	add.w	r1, r7, #24
 8000f0e:	440b      	add	r3, r1
 8000f10:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	4313      	orrs	r3, r2
 8000f18:	b21a      	sxth	r2, r3
 8000f1a:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <BMP180_GetCalibrationValue+0x2d4>)
 8000f1c:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	3302      	adds	r3, #2
 8000f22:	75fb      	strb	r3, [r7, #23]
	 AC4 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	f107 0218 	add.w	r2, r7, #24
 8000f2a:	4413      	add	r3, r2
 8000f2c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	3301      	adds	r3, #1
 8000f38:	f107 0118 	add.w	r1, r7, #24
 8000f3c:	440b      	add	r3, r1
 8000f3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b7f      	ldr	r3, [pc, #508]	; (8001148 <BMP180_GetCalibrationValue+0x2d8>)
 8000f4a:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	3302      	adds	r3, #2
 8000f50:	75fb      	strb	r3, [r7, #23]
	 AC5 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	f107 0218 	add.w	r2, r7, #24
 8000f58:	4413      	add	r3, r2
 8000f5a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7dfb      	ldrb	r3, [r7, #23]
 8000f64:	3301      	adds	r3, #1
 8000f66:	f107 0118 	add.w	r1, r7, #24
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	4b75      	ldr	r3, [pc, #468]	; (800114c <BMP180_GetCalibrationValue+0x2dc>)
 8000f78:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	75fb      	strb	r3, [r7, #23]
	 AC6 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	f107 0218 	add.w	r2, r7, #24
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	3301      	adds	r3, #1
 8000f94:	f107 0118 	add.w	r1, r7, #24
 8000f98:	440b      	add	r3, r1
 8000f9a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f9e:	b21b      	sxth	r3, r3
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <BMP180_GetCalibrationValue+0x2e0>)
 8000fa6:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	3302      	adds	r3, #2
 8000fac:	75fb      	strb	r3, [r7, #23]
	 B1 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	f107 0218 	add.w	r2, r7, #24
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f107 0118 	add.w	r1, r7, #24
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	b21a      	sxth	r2, r3
 8000fd2:	4b60      	ldr	r3, [pc, #384]	; (8001154 <BMP180_GetCalibrationValue+0x2e4>)
 8000fd4:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	75fb      	strb	r3, [r7, #23]
	 B2 = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	f107 0218 	add.w	r2, r7, #24
 8000fe2:	4413      	add	r3, r2
 8000fe4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f107 0118 	add.w	r1, r7, #24
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	4b55      	ldr	r3, [pc, #340]	; (8001158 <BMP180_GetCalibrationValue+0x2e8>)
 8001002:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	3302      	adds	r3, #2
 8001008:	75fb      	strb	r3, [r7, #23]
	 MB = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 800100a:	7dfb      	ldrb	r3, [r7, #23]
 800100c:	f107 0218 	add.w	r2, r7, #24
 8001010:	4413      	add	r3, r2
 8001012:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	3301      	adds	r3, #1
 800101e:	f107 0118 	add.w	r1, r7, #24
 8001022:	440b      	add	r3, r1
 8001024:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b4b      	ldr	r3, [pc, #300]	; (800115c <BMP180_GetCalibrationValue+0x2ec>)
 8001030:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	3302      	adds	r3, #2
 8001036:	75fb      	strb	r3, [r7, #23]
	 MC = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	f107 0218 	add.w	r2, r7, #24
 800103e:	4413      	add	r3, r2
 8001040:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b21a      	sxth	r2, r3
 8001048:	7dfb      	ldrb	r3, [r7, #23]
 800104a:	3301      	adds	r3, #1
 800104c:	f107 0118 	add.w	r1, r7, #24
 8001050:	440b      	add	r3, r1
 8001052:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b40      	ldr	r3, [pc, #256]	; (8001160 <BMP180_GetCalibrationValue+0x2f0>)
 800105e:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	3302      	adds	r3, #2
 8001064:	75fb      	strb	r3, [r7, #23]
	 MD = bmp180Buffer[counterCalibration] << 8 | bmp180Buffer[counterCalibration+1];
 8001066:	7dfb      	ldrb	r3, [r7, #23]
 8001068:	f107 0218 	add.w	r2, r7, #24
 800106c:	4413      	add	r3, r2
 800106e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	3301      	adds	r3, #1
 800107a:	f107 0118 	add.w	r1, r7, #24
 800107e:	440b      	add	r3, r1
 8001080:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <BMP180_GetCalibrationValue+0x2f4>)
 800108c:	801a      	strh	r2, [r3, #0]
	 counterCalibration+=2;
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	3302      	adds	r3, #2
 8001092:	75fb      	strb	r3, [r7, #23]

	 if(AC1 == 0x00 || AC1 == 0xFFFF)
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <BMP180_GetCalibrationValue+0x2cc>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <BMP180_GetCalibrationValue+0x232>
	 {
		 BMP180_GetCalibrationValue();
 800109e:	f7ff fee7 	bl	8000e70 <BMP180_GetCalibrationValue>
	 }
	 if(AC2 == 0x00 || AC2 == 0xFFFF)
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <BMP180_GetCalibrationValue+0x2d0>)
 80010a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <BMP180_GetCalibrationValue+0x240>
	 {
	 	 BMP180_GetCalibrationValue();
 80010ac:	f7ff fee0 	bl	8000e70 <BMP180_GetCalibrationValue>
	 }
	 if(AC3 == 0x00 || AC3 == 0xFFFF)
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <BMP180_GetCalibrationValue+0x2d4>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <BMP180_GetCalibrationValue+0x24e>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010ba:	f7ff fed9 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC4 == 0x00 || AC4 == 0xFFFF)
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <BMP180_GetCalibrationValue+0x2d8>)
 80010c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <BMP180_GetCalibrationValue+0x25c>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010c8:	f7ff fed2 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC5 == 0x00 || AC5 == 0xFFFF)
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <BMP180_GetCalibrationValue+0x2dc>)
 80010ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <BMP180_GetCalibrationValue+0x26a>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010d6:	f7ff fecb 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(AC6 == 0x00 || AC6 == 0xFFFF)
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <BMP180_GetCalibrationValue+0x2e0>)
 80010dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <BMP180_GetCalibrationValue+0x278>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010e4:	f7ff fec4 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(B1 == 0x00 || B1 == 0xFFFF)
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <BMP180_GetCalibrationValue+0x2e4>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <BMP180_GetCalibrationValue+0x286>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 80010f2:	f7ff febd 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(B2 == 0x00 || B2 == 0xFFFF)
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <BMP180_GetCalibrationValue+0x2e8>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <BMP180_GetCalibrationValue+0x294>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 8001100:	f7ff feb6 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(MB == 0x00 || MB == 0xFFFF)
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <BMP180_GetCalibrationValue+0x2ec>)
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <BMP180_GetCalibrationValue+0x2a2>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 800110e:	f7ff feaf 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(MC == 0x00 || MC == 0xFFFF)
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <BMP180_GetCalibrationValue+0x2f0>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <BMP180_GetCalibrationValue+0x2b0>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 800111c:	f7ff fea8 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }
	 if(MD == 0x00 || MD == 0xFFFF)
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <BMP180_GetCalibrationValue+0x2f4>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <BMP180_GetCalibrationValue+0x2be>
	 	 {
	 	 	 BMP180_GetCalibrationValue();
 800112a:	f7ff fea1 	bl	8000e70 <BMP180_GetCalibrationValue>
	 	 }

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20004154 	.word	0x20004154
 800113c:	200040a8 	.word	0x200040a8
 8001140:	200040d6 	.word	0x200040d6
 8001144:	200040d8 	.word	0x200040d8
 8001148:	200040c6 	.word	0x200040c6
 800114c:	200040bc 	.word	0x200040bc
 8001150:	200040aa 	.word	0x200040aa
 8001154:	200040e8 	.word	0x200040e8
 8001158:	200040da 	.word	0x200040da
 800115c:	200040d4 	.word	0x200040d4
 8001160:	200040ea 	.word	0x200040ea
 8001164:	200040a6 	.word	0x200040a6

08001168 <BMP180_GetTemperature>:

float BMP180_GetTemperature()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af04      	add	r7, sp, #16
	uint8_t wData[1];
	wData[0]=0x2E;
 800116e:	232e      	movs	r3, #46	; 0x2e
 8001170:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADD, 0xF4, 1, wData, 1, HAL_MAX_DELAY);
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2301      	movs	r3, #1
 8001182:	22f4      	movs	r2, #244	; 0xf4
 8001184:	21ee      	movs	r1, #238	; 0xee
 8001186:	4838      	ldr	r0, [pc, #224]	; (8001268 <BMP180_GetTemperature+0x100>)
 8001188:	f003 fc8a 	bl	8004aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800118c:	2005      	movs	r0, #5
 800118e:	f001 fbb3 	bl	80028f8 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2, BMP180_READ_ADD, 0xF6, 1, dataRead, 2, HAL_MAX_DELAY);
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2302      	movs	r3, #2
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <BMP180_GetTemperature+0x104>)
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2301      	movs	r3, #1
 80011a2:	22f6      	movs	r2, #246	; 0xf6
 80011a4:	21ef      	movs	r1, #239	; 0xef
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <BMP180_GetTemperature+0x100>)
 80011a8:	f003 fd74 	bl	8004c94 <HAL_I2C_Mem_Read>
	HAL_Delay(5);
 80011ac:	2005      	movs	r0, #5
 80011ae:	f001 fba3 	bl	80028f8 <HAL_Delay>

	uncTemp = ((dataRead[0] << 8) | dataRead[1]);
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <BMP180_GetTemperature+0x104>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <BMP180_GetTemperature+0x104>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	b21b      	sxth	r3, r3
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <BMP180_GetTemperature+0x108>)
 80011c6:	801a      	strh	r2, [r3, #0]


	tX1 = ((uncTemp - AC6)*AC5/32768);
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <BMP180_GetTemperature+0x108>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <BMP180_GetTemperature+0x10c>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <BMP180_GetTemperature+0x110>)
 80011da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da02      	bge.n	80011ec <BMP180_GetTemperature+0x84>
 80011e6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80011ea:	337f      	adds	r3, #127	; 0x7f
 80011ec:	13db      	asrs	r3, r3, #15
 80011ee:	461a      	mov	r2, r3
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <BMP180_GetTemperature+0x114>)
 80011f2:	601a      	str	r2, [r3, #0]
	while(MD==0 && tX1==0)
 80011f4:	e001      	b.n	80011fa <BMP180_GetTemperature+0x92>
	{
		BMP180_Init();
 80011f6:	f7ff fdf1 	bl	8000ddc <BMP180_Init>
	while(MD==0 && tX1==0)
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <BMP180_GetTemperature+0x118>)
 80011fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <BMP180_GetTemperature+0xa4>
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <BMP180_GetTemperature+0x114>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f4      	beq.n	80011f6 <BMP180_GetTemperature+0x8e>
	}
	tX2 = (MC*2048)/(tX1+MD);
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <BMP180_GetTemperature+0x11c>)
 800120e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001212:	02da      	lsls	r2, r3, #11
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <BMP180_GetTemperature+0x118>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	4619      	mov	r1, r3
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <BMP180_GetTemperature+0x114>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	440b      	add	r3, r1
 8001222:	fb92 f3f3 	sdiv	r3, r2, r3
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <BMP180_GetTemperature+0x120>)
 8001228:	6013      	str	r3, [r2, #0]

	tB5 = tX1 + tX2;
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <BMP180_GetTemperature+0x114>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <BMP180_GetTemperature+0x120>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a15      	ldr	r2, [pc, #84]	; (800128c <BMP180_GetTemperature+0x124>)
 8001236:	6013      	str	r3, [r2, #0]
	comTemp = (float)(tB5 + 8) / 16;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <BMP180_GetTemperature+0x124>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3308      	adds	r3, #8
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001246:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800124a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <BMP180_GetTemperature+0x128>)
 8001250:	edc3 7a00 	vstr	s15, [r3]
	return comTemp;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <BMP180_GetTemperature+0x128>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	ee07 3a90 	vmov	s15, r3
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20004154 	.word	0x20004154
 800126c:	200040b0 	.word	0x200040b0
 8001270:	200040a4 	.word	0x200040a4
 8001274:	200040aa 	.word	0x200040aa
 8001278:	200040bc 	.word	0x200040bc
 800127c:	200040f0 	.word	0x200040f0
 8001280:	200040a6 	.word	0x200040a6
 8001284:	200040ea 	.word	0x200040ea
 8001288:	200040cc 	.word	0x200040cc
 800128c:	200040dc 	.word	0x200040dc
 8001290:	200040a0 	.word	0x200040a0
 8001294:	00000000 	.word	0x00000000

08001298 <BMP180_GetPressure>:

uint16_t BMP180_GetPressure()
{
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b087      	sub	sp, #28
 800129c:	af04      	add	r7, sp, #16
	uint8_t rData[3]={0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2100      	movs	r1, #0
 80012a2:	460a      	mov	r2, r1
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	460a      	mov	r2, r1
 80012a8:	709a      	strb	r2, [r3, #2]
	uint8_t wData[1];
	wData[0] = 0x34 | (0x03 << 6);
 80012aa:	23f4      	movs	r3, #244	; 0xf4
 80012ac:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c2, BMP180_WRITE_ADD, 0xF4, 1, wData, 1, HAL_MAX_DELAY);
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	463b      	mov	r3, r7
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	22f4      	movs	r2, #244	; 0xf4
 80012c0:	21ee      	movs	r1, #238	; 0xee
 80012c2:	48b3      	ldr	r0, [pc, #716]	; (8001590 <BMP180_GetPressure+0x2f8>)
 80012c4:	f003 fbec 	bl	8004aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(26);
 80012c8:	201a      	movs	r0, #26
 80012ca:	f001 fb15 	bl	80028f8 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c2,BMP180_READ_ADD,0xF6,1,rData,3,HAL_MAX_DELAY);
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	2303      	movs	r3, #3
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	22f6      	movs	r2, #246	; 0xf6
 80012e0:	21ef      	movs	r1, #239	; 0xef
 80012e2:	48ab      	ldr	r0, [pc, #684]	; (8001590 <BMP180_GetPressure+0x2f8>)
 80012e4:	f003 fcd6 	bl	8004c94 <HAL_I2C_Mem_Read>
	uncPressure = (rData[0] << 16 | rData[1] << 8 | rData[2]) >> (8 - (uint8_t)(0x03));
 80012e8:	793b      	ldrb	r3, [r7, #4]
 80012ea:	041a      	lsls	r2, r3, #16
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	4313      	orrs	r3, r2
 80012f2:	79ba      	ldrb	r2, [r7, #6]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	115b      	asrs	r3, r3, #5
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	4ba6      	ldr	r3, [pc, #664]	; (8001594 <BMP180_GetPressure+0x2fc>)
 80012fc:	801a      	strh	r2, [r3, #0]

	pB6 = tB5 - 4000;
 80012fe:	4ba6      	ldr	r3, [pc, #664]	; (8001598 <BMP180_GetPressure+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001306:	4aa5      	ldr	r2, [pc, #660]	; (800159c <BMP180_GetPressure+0x304>)
 8001308:	6013      	str	r3, [r2, #0]
	pX1 = ( B2 * (pB6*pB6/4096))/2048;
 800130a:	4ba5      	ldr	r3, [pc, #660]	; (80015a0 <BMP180_GetPressure+0x308>)
 800130c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001310:	4619      	mov	r1, r3
 8001312:	4ba2      	ldr	r3, [pc, #648]	; (800159c <BMP180_GetPressure+0x304>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4aa1      	ldr	r2, [pc, #644]	; (800159c <BMP180_GetPressure+0x304>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	da01      	bge.n	8001326 <BMP180_GetPressure+0x8e>
 8001322:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001326:	131b      	asrs	r3, r3, #12
 8001328:	fb03 f301 	mul.w	r3, r3, r1
 800132c:	2b00      	cmp	r3, #0
 800132e:	da01      	bge.n	8001334 <BMP180_GetPressure+0x9c>
 8001330:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001334:	12db      	asrs	r3, r3, #11
 8001336:	461a      	mov	r2, r3
 8001338:	4b9a      	ldr	r3, [pc, #616]	; (80015a4 <BMP180_GetPressure+0x30c>)
 800133a:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 800133c:	4b9a      	ldr	r3, [pc, #616]	; (80015a8 <BMP180_GetPressure+0x310>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	461a      	mov	r2, r3
 8001344:	4b95      	ldr	r3, [pc, #596]	; (800159c <BMP180_GetPressure+0x304>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fb03 f302 	mul.w	r3, r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	da01      	bge.n	8001354 <BMP180_GetPressure+0xbc>
 8001350:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001354:	12db      	asrs	r3, r3, #11
 8001356:	461a      	mov	r2, r3
 8001358:	4b94      	ldr	r3, [pc, #592]	; (80015ac <BMP180_GetPressure+0x314>)
 800135a:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <BMP180_GetPressure+0x30c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b92      	ldr	r3, [pc, #584]	; (80015ac <BMP180_GetPressure+0x314>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4413      	add	r3, r2
 8001366:	4a92      	ldr	r2, [pc, #584]	; (80015b0 <BMP180_GetPressure+0x318>)
 8001368:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1*4 + pX3) << 0x03)+2)/4;
 800136a:	4b92      	ldr	r3, [pc, #584]	; (80015b4 <BMP180_GetPressure+0x31c>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	009a      	lsls	r2, r3, #2
 8001372:	4b8f      	ldr	r3, [pc, #572]	; (80015b0 <BMP180_GetPressure+0x318>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	3302      	adds	r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	da00      	bge.n	8001382 <BMP180_GetPressure+0xea>
 8001380:	3303      	adds	r3, #3
 8001382:	109b      	asrs	r3, r3, #2
 8001384:	461a      	mov	r2, r3
 8001386:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <BMP180_GetPressure+0x320>)
 8001388:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 800138a:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <BMP180_GetPressure+0x324>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	461a      	mov	r2, r3
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <BMP180_GetPressure+0x304>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	fb03 f302 	mul.w	r3, r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	da02      	bge.n	80013a4 <BMP180_GetPressure+0x10c>
 800139e:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80013a2:	331f      	adds	r3, #31
 80013a4:	135b      	asrs	r3, r3, #13
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80013aa:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6*pB6/4096))/65536;
 80013ac:	4b84      	ldr	r3, [pc, #528]	; (80015c0 <BMP180_GetPressure+0x328>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	4619      	mov	r1, r3
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <BMP180_GetPressure+0x304>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a78      	ldr	r2, [pc, #480]	; (800159c <BMP180_GetPressure+0x304>)
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	fb02 f303 	mul.w	r3, r2, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	da01      	bge.n	80013c8 <BMP180_GetPressure+0x130>
 80013c4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80013c8:	131b      	asrs	r3, r3, #12
 80013ca:	fb03 f301 	mul.w	r3, r3, r1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da02      	bge.n	80013d8 <BMP180_GetPressure+0x140>
 80013d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80013d6:	33ff      	adds	r3, #255	; 0xff
 80013d8:	141b      	asrs	r3, r3, #16
 80013da:	461a      	mov	r2, r3
 80013dc:	4b73      	ldr	r3, [pc, #460]	; (80015ac <BMP180_GetPressure+0x314>)
 80013de:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2)+2)/4;
 80013e0:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b71      	ldr	r3, [pc, #452]	; (80015ac <BMP180_GetPressure+0x314>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	3302      	adds	r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da00      	bge.n	80013f2 <BMP180_GetPressure+0x15a>
 80013f0:	3303      	adds	r3, #3
 80013f2:	109b      	asrs	r3, r3, #2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b6e      	ldr	r3, [pc, #440]	; (80015b0 <BMP180_GetPressure+0x318>)
 80013f8:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (signed long)(pX3+32768)/32768;
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <BMP180_GetPressure+0x32c>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	461a      	mov	r2, r3
 8001402:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <BMP180_GetPressure+0x318>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800140a:	fb03 f302 	mul.w	r3, r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	da02      	bge.n	8001418 <BMP180_GetPressure+0x180>
 8001412:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001416:	337f      	adds	r3, #127	; 0x7f
 8001418:	13db      	asrs	r3, r3, #15
 800141a:	461a      	mov	r2, r3
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <BMP180_GetPressure+0x330>)
 800141e:	601a      	str	r2, [r3, #0]
	pB7 = ((signed long)uncPressure - pB3) * (50000>>0x03);
 8001420:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <BMP180_GetPressure+0x2fc>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	461a      	mov	r2, r3
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <BMP180_GetPressure+0x320>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f641 026a 	movw	r2, #6250	; 0x186a
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a65      	ldr	r2, [pc, #404]	; (80015cc <BMP180_GetPressure+0x334>)
 8001438:	6013      	str	r3, [r2, #0]
	if(pB7 < 0x80000000 && pB4 != 0)
 800143a:	4b64      	ldr	r3, [pc, #400]	; (80015cc <BMP180_GetPressure+0x334>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db12      	blt.n	8001468 <BMP180_GetPressure+0x1d0>
 8001442:	4b61      	ldr	r3, [pc, #388]	; (80015c8 <BMP180_GetPressure+0x330>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00e      	beq.n	8001468 <BMP180_GetPressure+0x1d0>
	{
		comPressure = (pB7 * 2) / pB4;
 800144a:	4b60      	ldr	r3, [pc, #384]	; (80015cc <BMP180_GetPressure+0x334>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	005a      	lsls	r2, r3, #1
 8001450:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <BMP180_GetPressure+0x330>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fb92 f3f3 	sdiv	r3, r2, r3
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001462:	edc3 7a00 	vstr	s15, [r3]
 8001466:	e00d      	b.n	8001484 <BMP180_GetPressure+0x1ec>
	}
	else{
		comPressure = (pB7/pB4)*2;
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <BMP180_GetPressure+0x334>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <BMP180_GetPressure+0x330>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fb92 f3f3 	sdiv	r3, r2, r3
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
	}

	pX1 = (comPressure/256)*(comPressure/256);
 8001484:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eddf 6a52 	vldr	s13, [pc, #328]	; 80015d4 <BMP180_GetPressure+0x33c>
 800148e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001494:	edd3 6a00 	vldr	s13, [r3]
 8001498:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80015d4 <BMP180_GetPressure+0x33c>
 800149c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a8:	ee17 2a90 	vmov	r2, s15
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80014ae:	601a      	str	r2, [r3, #0]
	pX1 = (pX1*3038)/65536;
 80014b0:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f640 32de 	movw	r2, #3038	; 0xbde
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da02      	bge.n	80014c6 <BMP180_GetPressure+0x22e>
 80014c0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80014c4:	33ff      	adds	r3, #255	; 0xff
 80014c6:	141b      	asrs	r3, r3, #16
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b36      	ldr	r3, [pc, #216]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80014cc:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * comPressure)/65536;
 80014ce:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <BMP180_GetPressure+0x338>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80015d8 <BMP180_GetPressure+0x340>
 80014d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014dc:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80015dc <BMP180_GetPressure+0x344>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e8:	ee17 2a90 	vmov	r2, s15
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <BMP180_GetPressure+0x314>)
 80014ee:	601a      	str	r2, [r3, #0]
	comPressure = (comPressure + (pX1 + pX2 +3791)/16)/21.879;//hectopascal
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <BMP180_GetPressure+0x30c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <BMP180_GetPressure+0x314>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da00      	bge.n	8001504 <BMP180_GetPressure+0x26c>
 8001502:	330f      	adds	r3, #15
 8001504:	111b      	asrs	r3, r3, #4
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	ee17 0a90 	vmov	r0, s15
 800151c:	f7ff f824 	bl	8000568 <__aeabi_f2d>
 8001520:	a317      	add	r3, pc, #92	; (adr r3, 8001580 <BMP180_GetPressure+0x2e8>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f9a1 	bl	800086c <__aeabi_ddiv>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	4618      	mov	r0, r3
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff fa83 	bl	8000a3c <__aeabi_d2f>
 8001536:	4602      	mov	r2, r0
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <BMP180_GetPressure+0x338>)
 800153a:	601a      	str	r2, [r3, #0]
	comPressure = comPressure/1013.2501;//atm
 800153c:	4b24      	ldr	r3, [pc, #144]	; (80015d0 <BMP180_GetPressure+0x338>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f811 	bl	8000568 <__aeabi_f2d>
 8001546:	a310      	add	r3, pc, #64	; (adr r3, 8001588 <BMP180_GetPressure+0x2f0>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f98e 	bl	800086c <__aeabi_ddiv>
 8001550:	4603      	mov	r3, r0
 8001552:	460c      	mov	r4, r1
 8001554:	4618      	mov	r0, r3
 8001556:	4621      	mov	r1, r4
 8001558:	f7ff fa70 	bl	8000a3c <__aeabi_d2f>
 800155c:	4602      	mov	r2, r0
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001560:	601a      	str	r2, [r3, #0]
	return comPressure;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <BMP180_GetPressure+0x338>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156c:	ee17 3a90 	vmov	r3, s15
 8001570:	b29b      	uxth	r3, r3
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	24dd2f1b 	.word	0x24dd2f1b
 8001584:	4035e106 	.word	0x4035e106
 8001588:	346dc5d6 	.word	0x346dc5d6
 800158c:	408faa00 	.word	0x408faa00
 8001590:	20004154 	.word	0x20004154
 8001594:	200040c4 	.word	0x200040c4
 8001598:	200040dc 	.word	0x200040dc
 800159c:	200040e4 	.word	0x200040e4
 80015a0:	200040da 	.word	0x200040da
 80015a4:	200040c8 	.word	0x200040c8
 80015a8:	200040d6 	.word	0x200040d6
 80015ac:	200040b8 	.word	0x200040b8
 80015b0:	200040d0 	.word	0x200040d0
 80015b4:	200040a8 	.word	0x200040a8
 80015b8:	200040ac 	.word	0x200040ac
 80015bc:	200040d8 	.word	0x200040d8
 80015c0:	200040e8 	.word	0x200040e8
 80015c4:	200040c6 	.word	0x200040c6
 80015c8:	200040ec 	.word	0x200040ec
 80015cc:	200040e0 	.word	0x200040e0
 80015d0:	200040b4 	.word	0x200040b4
 80015d4:	43800000 	.word	0x43800000
 80015d8:	c5e5e800 	.word	0xc5e5e800
 80015dc:	47800000 	.word	0x47800000

080015e0 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80015e8:	2254      	movs	r2, #84	; 0x54
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <MPU6050_Init+0x1c>)
 80015ee:	f00a f917 	bl	800b820 <memcpy>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000090 	.word	0x20000090

08001600 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af02      	add	r7, sp, #8
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001610:	23d0      	movs	r3, #208	; 0xd0
 8001612:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	b299      	uxth	r1, r3
 800161c:	f107 020c 	add.w	r2, r7, #12
 8001620:	230a      	movs	r3, #10
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <I2C_Read+0x4c>)
 8001628:	f002 ff16 	bl	8004458 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	b299      	uxth	r1, r3
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	b29a      	uxth	r2, r3
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4613      	mov	r3, r2
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <I2C_Read+0x4c>)
 800163e:	f003 f809 	bl	8004654 <HAL_I2C_Master_Receive>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000090 	.word	0x20000090

08001650 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001668:	23d0      	movs	r3, #208	; 0xd0
 800166a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	b299      	uxth	r1, r3
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2302      	movs	r3, #2
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <I2C_Write8+0x38>)
 800167c:	f002 feec 	bl	8004458 <HAL_I2C_Master_Transmit>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000090 	.word	0x20000090

0800168c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	206b      	movs	r0, #107	; 0x6b
 800169c:	f7ff ffd8 	bl	8001650 <I2C_Write8>
	HAL_Delay(100);
 80016a0:	2064      	movs	r0, #100	; 0x64
 80016a2:	f001 f929 	bl	80028f8 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	791b      	ldrb	r3, [r3, #4]
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4619      	mov	r1, r3
 80016cc:	206b      	movs	r0, #107	; 0x6b
 80016ce:	f7ff ffbf 	bl	8001650 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80016d2:	2064      	movs	r0, #100	; 0x64
 80016d4:	f001 f910 	bl	80028f8 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	4619      	mov	r1, r3
 80016ea:	201a      	movs	r0, #26
 80016ec:	f7ff ffb0 	bl	8001650 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 0318 	and.w	r3, r3, #24
 8001700:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4619      	mov	r1, r3
 8001706:	201b      	movs	r0, #27
 8001708:	f7ff ffa2 	bl	8001650 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0318 	and.w	r3, r3, #24
 800171c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	4619      	mov	r1, r3
 8001722:	201c      	movs	r0, #28
 8001724:	f7ff ff94 	bl	8001650 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001728:	2004      	movs	r0, #4
 800172a:	f000 f857 	bl	80017dc <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	789b      	ldrb	r3, [r3, #2]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d81a      	bhi.n	800176c <MPU6050_Config+0xe0>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <MPU6050_Config+0xb0>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	0800174d 	.word	0x0800174d
 8001740:	08001755 	.word	0x08001755
 8001744:	0800175d 	.word	0x0800175d
 8001748:	08001765 	.word	0x08001765
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MPU6050_Config+0x12c>)
 800174e:	4a1b      	ldr	r2, [pc, #108]	; (80017bc <MPU6050_Config+0x130>)
 8001750:	601a      	str	r2, [r3, #0]
			break;
 8001752:	e00c      	b.n	800176e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <MPU6050_Config+0x12c>)
 8001756:	4a1a      	ldr	r2, [pc, #104]	; (80017c0 <MPU6050_Config+0x134>)
 8001758:	601a      	str	r2, [r3, #0]
				break;
 800175a:	e008      	b.n	800176e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MPU6050_Config+0x12c>)
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <MPU6050_Config+0x138>)
 8001760:	601a      	str	r2, [r3, #0]
			break;
 8001762:	e004      	b.n	800176e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MPU6050_Config+0x12c>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MPU6050_Config+0x13c>)
 8001768:	601a      	str	r2, [r3, #0]
			break;
 800176a:	e000      	b.n	800176e <MPU6050_Config+0xe2>
		
		default:
			break;
 800176c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d81a      	bhi.n	80017ac <MPU6050_Config+0x120>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <MPU6050_Config+0xf0>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	08001795 	.word	0x08001795
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017a5 	.word	0x080017a5
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MPU6050_Config+0x140>)
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <MPU6050_Config+0x144>)
 8001790:	601a      	str	r2, [r3, #0]
			break;
 8001792:	e00c      	b.n	80017ae <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <MPU6050_Config+0x140>)
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <MPU6050_Config+0x148>)
 8001798:	601a      	str	r2, [r3, #0]
				break;
 800179a:	e008      	b.n	80017ae <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MPU6050_Config+0x140>)
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <MPU6050_Config+0x14c>)
 80017a0:	601a      	str	r2, [r3, #0]
			break;
 80017a2:	e004      	b.n	80017ae <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MPU6050_Config+0x140>)
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <MPU6050_Config+0x130>)
 80017a8:	601a      	str	r2, [r3, #0]
			break;
 80017aa:	e000      	b.n	80017ae <MPU6050_Config+0x122>
		
		default:
			break;
 80017ac:	bf00      	nop
	}
	
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200000e4 	.word	0x200000e4
 80017bc:	3d7a0000 	.word	0x3d7a0000
 80017c0:	3dfa0000 	.word	0x3dfa0000
 80017c4:	3e7a0000 	.word	0x3e7a0000
 80017c8:	3efa0000 	.word	0x3efa0000
 80017cc:	200000e8 	.word	0x200000e8
 80017d0:	3bfa0000 	.word	0x3bfa0000
 80017d4:	3c7a0000 	.word	0x3c7a0000
 80017d8:	3cfa0000 	.word	0x3cfa0000

080017dc <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2019      	movs	r0, #25
 80017ec:	f7ff ff30 	bl	8001650 <I2C_Write8>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	3301      	adds	r3, #1
 8001806:	2201      	movs	r2, #1
 8001808:	4619      	mov	r1, r3
 800180a:	203a      	movs	r0, #58	; 0x3a
 800180c:	f7ff fef8 	bl	8001600 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001810:	7f7b      	ldrb	r3, [r7, #29]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d04f      	beq.n	80018b6 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2206      	movs	r2, #6
 800181c:	4619      	mov	r1, r3
 800181e:	203b      	movs	r0, #59	; 0x3b
 8001820:	f7ff feee 	bl	8001600 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001824:	7d3b      	ldrb	r3, [r7, #20]
 8001826:	b29b      	uxth	r3, r3
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	b29a      	uxth	r2, r3
 800182c:	7d7b      	ldrb	r3, [r7, #21]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4413      	add	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	b21a      	sxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800183a:	7dbb      	ldrb	r3, [r7, #22]
 800183c:	b29b      	uxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b29a      	uxth	r2, r3
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b29b      	uxth	r3, r3
 800184a:	b21a      	sxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001850:	7e3b      	ldrb	r3, [r7, #24]
 8001852:	b29b      	uxth	r3, r3
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b29a      	uxth	r2, r3
 8001858:	7e7b      	ldrb	r3, [r7, #25]
 800185a:	b29b      	uxth	r3, r3
 800185c:	4413      	add	r3, r2
 800185e:	b29b      	uxth	r3, r3
 8001860:	b21a      	sxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2206      	movs	r2, #6
 800186c:	4619      	mov	r1, r3
 800186e:	2043      	movs	r0, #67	; 0x43
 8001870:	f7ff fec6 	bl	8001600 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001874:	7b3b      	ldrb	r3, [r7, #12]
 8001876:	b29b      	uxth	r3, r3
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b29a      	uxth	r2, r3
 800187c:	7b7b      	ldrb	r3, [r7, #13]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MPU6050_Get_Accel_RawData+0xc8>)
 8001888:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	b29b      	uxth	r3, r3
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b29a      	uxth	r2, r3
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	b21a      	sxth	r2, r3
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MPU6050_Get_Accel_RawData+0xc8>)
 800189e:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80018a0:	7c3b      	ldrb	r3, [r7, #16]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	7c7b      	ldrb	r3, [r7, #17]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <MPU6050_Get_Accel_RawData+0xc8>)
 80018b4:	809a      	strh	r2, [r3, #4]
	}
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000ec 	.word	0x200000ec

080018c4 <MPU6050_Get_Accel_Scale>:

//10- Get Accel scaled data (g unit of gravity, 1g = 9.81m/s2)
void MPU6050_Get_Accel_Scale(ScaledData_Def *scaledDef)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

	RawData_Def AccelRData;
	MPU6050_Get_Accel_RawData(&AccelRData);
 80018cc:	f107 0308 	add.w	r3, r7, #8
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff91 	bl	80017f8 <MPU6050_Get_Accel_RawData>
	
	//Accel Scale data 
	scaledDef->x = ((AccelRData.x+0.0f)*accelScalingFactor);
 80018d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800194c <MPU6050_Get_Accel_Scale+0x88>
 80018e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MPU6050_Get_Accel_Scale+0x8c>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = ((AccelRData.y+0.0f)*accelScalingFactor);
 80018fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001906:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800194c <MPU6050_Get_Accel_Scale+0x88>
 800190a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MPU6050_Get_Accel_Scale+0x8c>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = ((AccelRData.z+0.0f)*accelScalingFactor);
 800191e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800194c <MPU6050_Get_Accel_Scale+0x88>
 800192e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MPU6050_Get_Accel_Scale+0x8c>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	00000000 	.word	0x00000000
 8001950:	200000e4 	.word	0x200000e4

08001954 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 800195c:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <MPU6050_Get_Gyro_RawData+0x34>)
 800195e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MPU6050_Get_Gyro_RawData+0x34>)
 8001968:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <MPU6050_Get_Gyro_RawData+0x34>)
 8001972:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	809a      	strh	r2, [r3, #4]
	
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	200000ec 	.word	0x200000ec

0800198c <MPU6050_Get_Gyro_Scale>:

//13- Get Gyro scaled data
void MPU6050_Get_Gyro_Scale(ScaledData_Def *scaledDef)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	RawData_Def myGyroRaw;
	MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8001994:	f107 0308 	add.w	r3, r7, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffdb 	bl	8001954 <MPU6050_Get_Gyro_RawData>
	
	//Gyro Scale data 
	scaledDef->x = (myGyroRaw.x)*gyroScalingFactor; // x-Axis
 800199e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MPU6050_Get_Gyro_Scale+0x70>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edc3 7a00 	vstr	s15, [r3]
	scaledDef->y = (myGyroRaw.y)*gyroScalingFactor; // y-Axis
 80019ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MPU6050_Get_Gyro_Scale+0x70>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a01 	vstr	s15, [r3, #4]
	scaledDef->z = (myGyroRaw.z)*gyroScalingFactor; // z-Axis
 80019d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MPU6050_Get_Gyro_Scale+0x70>)
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000e8 	.word	0x200000e8

08001a00 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <vApplicationGetIdleTaskMemory+0x2c>)
 8001a10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <vApplicationGetIdleTaskMemory+0x30>)
 8001a16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200000f4 	.word	0x200000f4
 8001a30:	20000148 	.word	0x20000148

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b0a6      	sub	sp, #152	; 0x98
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a3a:	f000 ff1b 	bl	8002874 <HAL_Init>
  /* USER CODE BEGIN Init */
  //static float fTemperature;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3e:	f000 f891 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a42:	f000 fa2d 	bl	8001ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a46:	f000 fa0b 	bl	8001e60 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a4a:	f000 f8fb 	bl	8001c44 <MX_ADC1_Init>
  MX_UART4_Init();
 8001a4e:	f000 f9dd 	bl	8001e0c <MX_UART4_Init>
  MX_I2C1_Init();
 8001a52:	f000 f95b 	bl	8001d0c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001a56:	f000 f999 	bl	8001d8c <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutexUART */
  osMutexDef(mutexUART);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  mutexUARTHandle = osMutexCreate(osMutex(mutexUART));
 8001a66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f007 fba3 	bl	80091b6 <osMutexCreate>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <main+0x104>)
 8001a74:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task1_manyeto */
  osThreadDef(task1_manyeto, taskCOMPASS, osPriorityNormal, 0, 128);
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <main+0x108>)
 8001a78:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task1_manyetoHandle = osThreadCreate(osThread(task1_manyeto), NULL);
 8001a8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fb30 	bl	80090f6 <osThreadCreate>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <main+0x10c>)
 8001a9a:	601a      	str	r2, [r3, #0]

  /* definition and creation of task2_bmp */
  osThreadDef(task2_bmp, taskALTITUDE, osPriorityNormal, 0, 128);
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <main+0x110>)
 8001a9e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task2_bmpHandle = osThreadCreate(osThread(task2_bmp), NULL);
 8001ab0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 fb1d 	bl	80090f6 <osThreadCreate>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <main+0x114>)
 8001ac0:	601a      	str	r2, [r3, #0]

  /* definition and creation of task4_temp */
  osThreadDef(task4_temp, taskTEMPERATURE, osPriorityNormal, 0, 128);
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <main+0x118>)
 8001ac4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001ac8:	461d      	mov	r5, r3
 8001aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ace:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task4_tempHandle = osThreadCreate(osThread(task4_temp), NULL);
 8001ad6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f007 fb0a 	bl	80090f6 <osThreadCreate>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <main+0x11c>)
 8001ae6:	601a      	str	r2, [r3, #0]

  /* definition and creation of task5_mpu */
  osThreadDef(task5_mpu, taskGYRO, osPriorityNormal, 0, 256);
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <main+0x120>)
 8001aea:	f107 0420 	add.w	r4, r7, #32
 8001aee:	461d      	mov	r5, r3
 8001af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001af8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task5_mpuHandle = osThreadCreate(osThread(task5_mpu), NULL);
 8001afc:	f107 0320 	add.w	r3, r7, #32
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f007 faf7 	bl	80090f6 <osThreadCreate>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <main+0x124>)
 8001b0c:	601a      	str	r2, [r3, #0]

  /* definition and creation of task6_joy */
  osThreadDef(task6_joy, taskCONTROL, osPriorityNormal, 0, 128);
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <main+0x128>)
 8001b10:	1d3c      	adds	r4, r7, #4
 8001b12:	461d      	mov	r5, r3
 8001b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task6_joyHandle = osThreadCreate(osThread(task6_joy), NULL);
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f007 fae6 	bl	80090f6 <osThreadCreate>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <main+0x12c>)
 8001b2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b30:	f007 fada 	bl	80090e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <main+0x100>
 8001b36:	bf00      	nop
 8001b38:	20004294 	.word	0x20004294
 8001b3c:	0800c068 	.word	0x0800c068
 8001b40:	200040f4 	.word	0x200040f4
 8001b44:	0800c090 	.word	0x0800c090
 8001b48:	20004224 	.word	0x20004224
 8001b4c:	0800c0b8 	.word	0x0800c0b8
 8001b50:	200041b4 	.word	0x200041b4
 8001b54:	0800c0e0 	.word	0x0800c0e0
 8001b58:	200041bc 	.word	0x200041bc
 8001b5c:	0800c108 	.word	0x0800c108
 8001b60:	20004228 	.word	0x20004228

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	; 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f009 fe5f 	bl	800b836 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <SystemClock_Config+0xd8>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a2a      	ldr	r2, [pc, #168]	; (8001c3c <SystemClock_Config+0xd8>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <SystemClock_Config+0xd8>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <SystemClock_Config+0xdc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <SystemClock_Config+0xdc>)
 8001bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <SystemClock_Config+0xdc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bc8:	2310      	movs	r3, #16
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001bd8:	23b4      	movs	r3, #180	; 0xb4
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4618      	mov	r0, r3
 8001bea:	f005 fcbb 	bl	8007564 <HAL_RCC_OscConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bf4:	f000 fba0 	bl	8002338 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bf8:	f005 fc64 	bl	80074c4 <HAL_PWREx_EnableOverDrive>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c02:	f000 fb99 	bl	8002338 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c06:	230f      	movs	r3, #15
 8001c08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2105      	movs	r1, #5
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 ff0d 	bl	8007a44 <HAL_RCC_ClockConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001c30:	f000 fb82 	bl	8002338 <Error_Handler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3750      	adds	r7, #80	; 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <MX_ADC1_Init+0xc0>)
 8001c5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c78:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c88:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <MX_ADC1_Init+0xc4>)
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001c92:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c94:	2202      	movs	r2, #2
 8001c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c98:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ca6:	4816      	ldr	r0, [pc, #88]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001ca8:	f000 fe48 	bl	800293c <HAL_ADC_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001cb2:	f000 fb41 	bl	8002338 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	480e      	ldr	r0, [pc, #56]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001cc8:	f001 f920 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001cd2:	f000 fb31 	bl	8002338 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <MX_ADC1_Init+0xbc>)
 8001ce8:	f001 f910 	bl	8002f0c <HAL_ADC_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001cf2:	f000 fb21 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200041c4 	.word	0x200041c4
 8001d04:	40012000 	.word	0x40012000
 8001d08:	0f000001 	.word	0x0f000001

08001d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d12:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <MX_I2C1_Init+0x78>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d18:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <MX_I2C1_Init+0x7c>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d4a:	f002 fa4d 	bl	80041e8 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 faf0 	bl	8002338 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d5c:	f005 fb36 	bl	80073cc <HAL_I2CEx_ConfigAnalogFilter>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d66:	f000 fae7 	bl	8002338 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x74>)
 8001d6e:	f005 fb69 	bl	8007444 <HAL_I2CEx_ConfigDigitalFilter>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d78:	f000 fade 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20004100 	.word	0x20004100
 8001d84:	40005400 	.word	0x40005400
 8001d88:	000186a0 	.word	0x000186a0

08001d8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_I2C2_Init+0x78>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <MX_I2C2_Init+0x7c>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dca:	f002 fa0d 	bl	80041e8 <HAL_I2C_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dd4:	f000 fab0 	bl	8002338 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001ddc:	f005 faf6 	bl	80073cc <HAL_I2CEx_ConfigAnalogFilter>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001de6:	f000 faa7 	bl	8002338 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001dea:	2100      	movs	r1, #0
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <MX_I2C2_Init+0x74>)
 8001dee:	f005 fb29 	bl	8007444 <HAL_I2CEx_ConfigDigitalFilter>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001df8:	f000 fa9e 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20004154 	.word	0x20004154
 8001e04:	40005800 	.word	0x40005800
 8001e08:	000186a0 	.word	0x000186a0

08001e0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <MX_UART4_Init+0x50>)
 8001e14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_UART4_Init+0x4c>)
 8001e44:	f006 fa3a 	bl	80082bc <HAL_UART_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e4e:	f000 fa73 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20004298 	.word	0x20004298
 8001e5c:	40004c00 	.word	0x40004c00

08001e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_DMA_Init+0x3c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <MX_DMA_Init+0x3c>)
 8001e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_DMA_Init+0x3c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2105      	movs	r1, #5
 8001e86:	2038      	movs	r0, #56	; 0x38
 8001e88:	f001 fbb2 	bl	80035f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e8c:	2038      	movs	r0, #56	; 0x38
 8001e8e:	f001 fbcb 	bl	8003628 <HAL_NVIC_EnableIRQ>

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800

08001ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ec0:	f043 0320 	orr.w	r3, r3, #32
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6313      	str	r3, [r2, #48]	; 0x30
 8001f36:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_GPIO_Init+0xd4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f48:	480b      	ldr	r0, [pc, #44]	; (8001f78 <MX_GPIO_Init+0xd8>)
 8001f4a:	f002 f933 	bl	80041b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001f4e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4804      	ldr	r0, [pc, #16]	; (8001f78 <MX_GPIO_Init+0xd8>)
 8001f68:	f001 ff7a 	bl	8003e60 <HAL_GPIO_Init>

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40021800 	.word	0x40021800

08001f7c <taskCOMPASS>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskCOMPASS */
void taskCOMPASS(void const * argument)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f007 f902 	bl	800918e <osDelay>
 8001f8a:	e7fb      	b.n	8001f84 <taskCOMPASS+0x8>

08001f8c <taskALTITUDE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskALTITUDE */
void taskALTITUDE(void const * argument)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskALTITUDE */
  /* Infinite loop */
  BMP180_Init();
 8001f94:	f7fe ff22 	bl	8000ddc <BMP180_Init>

  for(;;)
  {
	  BMP180_GetTemperature();
 8001f98:	f7ff f8e6 	bl	8001168 <BMP180_GetTemperature>
	  BMP180_GetPressure();
 8001f9c:	f7ff f97c 	bl	8001298 <BMP180_GetPressure>
	  osMutexWait(mutexUARTHandle, osWaitForever);
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <taskALTITUDE+0x74>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f007 f91d 	bl	80091e8 <osMutexWait>
	  presInt=10000*comPressure;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <taskALTITUDE+0x78>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002008 <taskALTITUDE+0x7c>
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc0:	ee17 2a90 	vmov	r2, s15
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <taskALTITUDE+0x80>)
 8001fc6:	601a      	str	r2, [r3, #0]
	  sprintf(uartMsg, "basinc:0.%d\r\n",presInt);
 8001fc8:	4b10      	ldr	r3, [pc, #64]	; (800200c <taskALTITUDE+0x80>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4910      	ldr	r1, [pc, #64]	; (8002010 <taskALTITUDE+0x84>)
 8001fd0:	4810      	ldr	r0, [pc, #64]	; (8002014 <taskALTITUDE+0x88>)
 8001fd2:	f009 fc39 	bl	800b848 <siprintf>
	  HAL_UART_Transmit(&huart4,uartMsg,strlen(uartMsg),HAL_MAX_DELAY);
 8001fd6:	480f      	ldr	r0, [pc, #60]	; (8002014 <taskALTITUDE+0x88>)
 8001fd8:	f7fe f90a 	bl	80001f0 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe4:	490b      	ldr	r1, [pc, #44]	; (8002014 <taskALTITUDE+0x88>)
 8001fe6:	480c      	ldr	r0, [pc, #48]	; (8002018 <taskALTITUDE+0x8c>)
 8001fe8:	f006 f9b5 	bl	8008356 <HAL_UART_Transmit>
	 osMutexRelease(mutexUARTHandle);
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <taskALTITUDE+0x74>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f007 f947 	bl	8009284 <osMutexRelease>
	  osDelay(10);
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f007 f8c9 	bl	800918e <osDelay>
	  BMP180_GetTemperature();
 8001ffc:	e7cc      	b.n	8001f98 <taskALTITUDE+0xc>
 8001ffe:	bf00      	nop
 8002000:	20004294 	.word	0x20004294
 8002004:	200040b4 	.word	0x200040b4
 8002008:	461c4000 	.word	0x461c4000
 800200c:	20004324 	.word	0x20004324
 8002010:	0800c124 	.word	0x0800c124
 8002014:	200042d8 	.word	0x200042d8
 8002018:	20004298 	.word	0x20004298
 800201c:	00000000 	.word	0x00000000

08002020 <taskTEMPERATURE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskTEMPERATURE */
void taskTEMPERATURE(void const * argument)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskTEMPERATURE */
  /* Infinite loop */

  for(;;)
  {
	  osMutexWait(mutexUARTHandle, osWaitForever);
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <taskTEMPERATURE+0xc8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f04f 31ff 	mov.w	r1, #4294967295
 8002030:	4618      	mov	r0, r3
 8002032:	f007 f8d9 	bl	80091e8 <osMutexWait>
		  temperature=comTemp*0.1;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <taskTEMPERATURE+0xcc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa94 	bl	8000568 <__aeabi_f2d>
 8002040:	a327      	add	r3, pc, #156	; (adr r3, 80020e0 <taskTEMPERATURE+0xc0>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fae7 	bl	8000618 <__aeabi_dmul>
 800204a:	4603      	mov	r3, r0
 800204c:	460c      	mov	r4, r1
 800204e:	4618      	mov	r0, r3
 8002050:	4621      	mov	r1, r4
 8002052:	f7fe fcf3 	bl	8000a3c <__aeabi_d2f>
 8002056:	4602      	mov	r2, r0
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <taskTEMPERATURE+0xd0>)
 800205a:	601a      	str	r2, [r3, #0]
		  tempInt1 = temperature;
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <taskTEMPERATURE+0xd0>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002066:	ee17 2a90 	vmov	r2, s15
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <taskTEMPERATURE+0xd4>)
 800206c:	601a      	str	r2, [r3, #0]
		  tempFrac = temperature-tempInt1;
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <taskTEMPERATURE+0xd0>)
 8002070:	ed93 7a00 	vldr	s14, [r3]
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <taskTEMPERATURE+0xd4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <taskTEMPERATURE+0xd8>)
 8002086:	edc3 7a00 	vstr	s15, [r3]
		  tempInt2 = tempFrac*10000;
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <taskTEMPERATURE+0xd8>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80020fc <taskTEMPERATURE+0xdc>
 8002094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209c:	ee17 2a90 	vmov	r2, s15
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <taskTEMPERATURE+0xe0>)
 80020a2:	601a      	str	r2, [r3, #0]
		  sprintf(uartMsg, "sicaklik:%d.%d\r\n",tempInt1,tempInt2);
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <taskTEMPERATURE+0xd4>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <taskTEMPERATURE+0xe0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4915      	ldr	r1, [pc, #84]	; (8002104 <taskTEMPERATURE+0xe4>)
 80020ae:	4816      	ldr	r0, [pc, #88]	; (8002108 <taskTEMPERATURE+0xe8>)
 80020b0:	f009 fbca 	bl	800b848 <siprintf>
		  HAL_UART_Transmit(&huart4,uartMsg,strlen(uartMsg),HAL_MAX_DELAY);
 80020b4:	4814      	ldr	r0, [pc, #80]	; (8002108 <taskTEMPERATURE+0xe8>)
 80020b6:	f7fe f89b 	bl	80001f0 <strlen>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
 80020c2:	4911      	ldr	r1, [pc, #68]	; (8002108 <taskTEMPERATURE+0xe8>)
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <taskTEMPERATURE+0xec>)
 80020c6:	f006 f946 	bl	8008356 <HAL_UART_Transmit>
	  osMutexRelease(mutexUARTHandle);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <taskTEMPERATURE+0xc8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f007 f8d8 	bl	8009284 <osMutexRelease>
    osDelay(50);
 80020d4:	2032      	movs	r0, #50	; 0x32
 80020d6:	f007 f85a 	bl	800918e <osDelay>
	  osMutexWait(mutexUARTHandle, osWaitForever);
 80020da:	e7a5      	b.n	8002028 <taskTEMPERATURE+0x8>
 80020dc:	f3af 8000 	nop.w
 80020e0:	9999999a 	.word	0x9999999a
 80020e4:	3fb99999 	.word	0x3fb99999
 80020e8:	20004294 	.word	0x20004294
 80020ec:	200040a0 	.word	0x200040a0
 80020f0:	200041b0 	.word	0x200041b0
 80020f4:	2000430c 	.word	0x2000430c
 80020f8:	200040fc 	.word	0x200040fc
 80020fc:	461c4000 	.word	0x461c4000
 8002100:	200041b8 	.word	0x200041b8
 8002104:	0800c134 	.word	0x0800c134
 8002108:	200042d8 	.word	0x200042d8
 800210c:	20004298 	.word	0x20004298

08002110 <taskGYRO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskGYRO */
void taskGYRO(void const * argument)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af02      	add	r7, sp, #8
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskGYRO */
	MPU6050_Init(&hi2c1);
 8002118:	484f      	ldr	r0, [pc, #316]	; (8002258 <taskGYRO+0x148>)
 800211a:	f7ff fa61 	bl	80015e0 <MPU6050_Init>
	mpu6050_t.Accel_Full_Scale = AFS_SEL_4g;
 800211e:	4b4f      	ldr	r3, [pc, #316]	; (800225c <taskGYRO+0x14c>)
 8002120:	2201      	movs	r2, #1
 8002122:	709a      	strb	r2, [r3, #2]
	mpu6050_t.ClockSource = Internal_8MHz;
 8002124:	4b4d      	ldr	r3, [pc, #308]	; (800225c <taskGYRO+0x14c>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
	mpu6050_t.CONFIG_DLPF = DLPF_184A_188G_Hz;
 800212a:	4b4c      	ldr	r3, [pc, #304]	; (800225c <taskGYRO+0x14c>)
 800212c:	2201      	movs	r2, #1
 800212e:	70da      	strb	r2, [r3, #3]
	mpu6050_t.Gyro_Full_Scale = FS_SEL_500;
 8002130:	4b4a      	ldr	r3, [pc, #296]	; (800225c <taskGYRO+0x14c>)
 8002132:	2201      	movs	r2, #1
 8002134:	705a      	strb	r2, [r3, #1]
	mpu6050_t.Sleep_Mode_Bit = 0;  //1: sleep mode, 0: normal mode
 8002136:	4b49      	ldr	r3, [pc, #292]	; (800225c <taskGYRO+0x14c>)
 8002138:	2200      	movs	r2, #0
 800213a:	711a      	strb	r2, [r3, #4]
	MPU6050_Config(&mpu6050_t);
 800213c:	4847      	ldr	r0, [pc, #284]	; (800225c <taskGYRO+0x14c>)
 800213e:	f7ff faa5 	bl	800168c <MPU6050_Config>
	gyro.x=0;
 8002142:	4b47      	ldr	r3, [pc, #284]	; (8002260 <taskGYRO+0x150>)
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
	gyro.y=0;
 800214a:	4b45      	ldr	r3, [pc, #276]	; (8002260 <taskGYRO+0x150>)
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
	gyro.z=0;
 8002152:	4b43      	ldr	r3, [pc, #268]	; (8002260 <taskGYRO+0x150>)
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
		    {
		      Error_Handler();
		    }
		}*/

		MPU6050_Get_Accel_RawData(&myAccelRaw);
 800215a:	4842      	ldr	r0, [pc, #264]	; (8002264 <taskGYRO+0x154>)
 800215c:	f7ff fb4c 	bl	80017f8 <MPU6050_Get_Accel_RawData>
		HAL_Delay(10);
 8002160:	200a      	movs	r0, #10
 8002162:	f000 fbc9 	bl	80028f8 <HAL_Delay>
		MPU6050_Get_Gyro_RawData(&myGyroRaw);
 8002166:	4840      	ldr	r0, [pc, #256]	; (8002268 <taskGYRO+0x158>)
 8002168:	f7ff fbf4 	bl	8001954 <MPU6050_Get_Gyro_RawData>
		HAL_Delay(10);
 800216c:	200a      	movs	r0, #10
 800216e:	f000 fbc3 	bl	80028f8 <HAL_Delay>
		MPU6050_Get_Accel_Scale(&myAccelScaled);
 8002172:	483e      	ldr	r0, [pc, #248]	; (800226c <taskGYRO+0x15c>)
 8002174:	f7ff fba6 	bl	80018c4 <MPU6050_Get_Accel_Scale>
		HAL_Delay(10);
 8002178:	200a      	movs	r0, #10
 800217a:	f000 fbbd 	bl	80028f8 <HAL_Delay>
		MPU6050_Get_Gyro_Scale(&myGyroScaled);
 800217e:	483c      	ldr	r0, [pc, #240]	; (8002270 <taskGYRO+0x160>)
 8002180:	f7ff fc04 	bl	800198c <MPU6050_Get_Gyro_Scale>
		HAL_Delay(10);
 8002184:	200a      	movs	r0, #10
 8002186:	f000 fbb7 	bl	80028f8 <HAL_Delay>
		osMutexWait(mutexUARTHandle, osWaitForever);
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <taskGYRO+0x164>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f04f 31ff 	mov.w	r1, #4294967295
 8002192:	4618      	mov	r0, r3
 8002194:	f007 f828 	bl	80091e8 <osMutexWait>
			sprintf(uartMsg, "ivmex:%d ivmey:%d ivmez:%d\r\n",(int16_t)myAccelScaled.x,(int16_t)myAccelScaled.y, (int16_t)myAccelScaled.z);
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <taskGYRO+0x15c>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a2:	ee17 3a90 	vmov	r3, s15
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <taskGYRO+0x15c>)
 80021ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b4:	ee17 3a90 	vmov	r3, s15
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <taskGYRO+0x15c>)
 80021be:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c6:	ee17 3a90 	vmov	r3, s15
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	460b      	mov	r3, r1
 80021d0:	4929      	ldr	r1, [pc, #164]	; (8002278 <taskGYRO+0x168>)
 80021d2:	482a      	ldr	r0, [pc, #168]	; (800227c <taskGYRO+0x16c>)
 80021d4:	f009 fb38 	bl	800b848 <siprintf>
			HAL_UART_Transmit(&huart4,uartMsg,strlen(uartMsg),HAL_MAX_DELAY);
 80021d8:	4828      	ldr	r0, [pc, #160]	; (800227c <taskGYRO+0x16c>)
 80021da:	f7fe f809 	bl	80001f0 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	4925      	ldr	r1, [pc, #148]	; (800227c <taskGYRO+0x16c>)
 80021e8:	4825      	ldr	r0, [pc, #148]	; (8002280 <taskGYRO+0x170>)
 80021ea:	f006 f8b4 	bl	8008356 <HAL_UART_Transmit>
			sprintf(uartMsg, "gyrox:%d gyroy:%d gyroz:%d\r\n",(int16_t)myGyroScaled.x,(int16_t)myGyroScaled.y, (int16_t)myAccelScaled.z);
 80021ee:	4b20      	ldr	r3, [pc, #128]	; (8002270 <taskGYRO+0x160>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f8:	ee17 3a90 	vmov	r3, s15
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <taskGYRO+0x160>)
 8002202:	edd3 7a01 	vldr	s15, [r3, #4]
 8002206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220a:	ee17 3a90 	vmov	r3, s15
 800220e:	b21b      	sxth	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <taskGYRO+0x15c>)
 8002214:	edd3 7a02 	vldr	s15, [r3, #8]
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	b21b      	sxth	r3, r3
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	460b      	mov	r3, r1
 8002226:	4917      	ldr	r1, [pc, #92]	; (8002284 <taskGYRO+0x174>)
 8002228:	4814      	ldr	r0, [pc, #80]	; (800227c <taskGYRO+0x16c>)
 800222a:	f009 fb0d 	bl	800b848 <siprintf>
			HAL_UART_Transmit(&huart4,uartMsg,strlen(uartMsg),HAL_MAX_DELAY);
 800222e:	4813      	ldr	r0, [pc, #76]	; (800227c <taskGYRO+0x16c>)
 8002230:	f7fd ffde 	bl	80001f0 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
 800223c:	490f      	ldr	r1, [pc, #60]	; (800227c <taskGYRO+0x16c>)
 800223e:	4810      	ldr	r0, [pc, #64]	; (8002280 <taskGYRO+0x170>)
 8002240:	f006 f889 	bl	8008356 <HAL_UART_Transmit>
		osMutexRelease(mutexUARTHandle);
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <taskGYRO+0x164>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f007 f81b 	bl	8009284 <osMutexRelease>
		//sprintf(uartMsg, "rx%hu\r\n", rxControl);
		//HAL_UART_Transmit(&huart4,myAccelScaled.x,9,HAL_MAX_DELAY);
		//osMutexRelease(mutexUARTHandle);
		//}
    osDelay(50);
 800224e:	2032      	movs	r0, #50	; 0x32
 8002250:	f006 ff9d 	bl	800918e <osDelay>
		MPU6050_Get_Accel_RawData(&myAccelRaw);
 8002254:	e781      	b.n	800215a <taskGYRO+0x4a>
 8002256:	bf00      	nop
 8002258:	20004100 	.word	0x20004100
 800225c:	2000428c 	.word	0x2000428c
 8002260:	2000420c 	.word	0x2000420c
 8002264:	2000431c 	.word	0x2000431c
 8002268:	200041a8 	.word	0x200041a8
 800226c:	20004218 	.word	0x20004218
 8002270:	20004310 	.word	0x20004310
 8002274:	20004294 	.word	0x20004294
 8002278:	0800c148 	.word	0x0800c148
 800227c:	200042d8 	.word	0x200042d8
 8002280:	20004298 	.word	0x20004298
 8002284:	0800c168 	.word	0x0800c168

08002288 <taskCONTROL>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskCONTROL */
void taskCONTROL(void const * argument)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskCONTROL */
  /* Infinite loop */
  for(;;)
  {

	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rxControl, 2);
 8002290:	2202      	movs	r2, #2
 8002292:	4919      	ldr	r1, [pc, #100]	; (80022f8 <taskCONTROL+0x70>)
 8002294:	4819      	ldr	r0, [pc, #100]	; (80022fc <taskCONTROL+0x74>)
 8002296:	f000 fcd5 	bl	8002c44 <HAL_ADC_Start_DMA>
		HAL_UART_Transmit(&huart4,uartMsg,8,HAL_MAX_DELAY);
		osMutexRelease(mutexUARTHandle);

	}
	HAL_ADC_Stop(&hadc1);*/
	  	osMutexWait(mutexUARTHandle, osWaitForever);
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <taskCONTROL+0x78>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f04f 31ff 	mov.w	r1, #4294967295
 80022a2:	4618      	mov	r0, r3
 80022a4:	f006 ffa0 	bl	80091e8 <osMutexWait>
	  	sprintf(uartMsg, "rx%d\r\n", rxControl[0]);
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <taskCONTROL+0x70>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4915      	ldr	r1, [pc, #84]	; (8002304 <taskCONTROL+0x7c>)
 80022b0:	4815      	ldr	r0, [pc, #84]	; (8002308 <taskCONTROL+0x80>)
 80022b2:	f009 fac9 	bl	800b848 <siprintf>
	  	HAL_UART_Transmit(&huart4,uartMsg,8,HAL_MAX_DELAY);
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295
 80022ba:	2208      	movs	r2, #8
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <taskCONTROL+0x80>)
 80022be:	4813      	ldr	r0, [pc, #76]	; (800230c <taskCONTROL+0x84>)
 80022c0:	f006 f849 	bl	8008356 <HAL_UART_Transmit>
	  	sprintf(uartMsg, "ry%d\r\n", rxControl[1]);
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <taskCONTROL+0x70>)
 80022c6:	885b      	ldrh	r3, [r3, #2]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4911      	ldr	r1, [pc, #68]	; (8002310 <taskCONTROL+0x88>)
 80022cc:	480e      	ldr	r0, [pc, #56]	; (8002308 <taskCONTROL+0x80>)
 80022ce:	f009 fabb 	bl	800b848 <siprintf>
	  	HAL_UART_Transmit(&huart4,uartMsg,8,HAL_MAX_DELAY);
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	2208      	movs	r2, #8
 80022d8:	490b      	ldr	r1, [pc, #44]	; (8002308 <taskCONTROL+0x80>)
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <taskCONTROL+0x84>)
 80022dc:	f006 f83b 	bl	8008356 <HAL_UART_Transmit>
	  	osMutexRelease(mutexUARTHandle);
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <taskCONTROL+0x78>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f006 ffcd 	bl	8009284 <osMutexRelease>
	  	HAL_ADC_Stop_DMA(&hadc1);
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <taskCONTROL+0x74>)
 80022ec:	f000 fd9c 	bl	8002e28 <HAL_ADC_Stop_DMA>

	osDelay(50);
 80022f0:	2032      	movs	r0, #50	; 0x32
 80022f2:	f006 ff4c 	bl	800918e <osDelay>
	  	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rxControl, 2);
 80022f6:	e7cb      	b.n	8002290 <taskCONTROL+0x8>
 80022f8:	200041c0 	.word	0x200041c0
 80022fc:	200041c4 	.word	0x200041c4
 8002300:	20004294 	.word	0x20004294
 8002304:	0800c188 	.word	0x0800c188
 8002308:	200042d8 	.word	0x200042d8
 800230c:	20004298 	.word	0x20004298
 8002310:	0800c190 	.word	0x0800c190

08002314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002326:	f000 fac7 	bl	80028b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40010000 	.word	0x40010000

08002338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800233e:	e7fe      	b.n	800233e <Error_Handler+0x6>

08002340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_MspInit+0x54>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_MspInit+0x54>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_MspInit+0x54>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_MspInit+0x54>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_MspInit+0x54>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_MspInit+0x54>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	210f      	movs	r1, #15
 8002382:	f06f 0001 	mvn.w	r0, #1
 8002386:	f001 f933 	bl	80035f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	; 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a33      	ldr	r2, [pc, #204]	; (8002484 <HAL_ADC_MspInit+0xec>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d160      	bne.n	800247c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	4b32      	ldr	r3, [pc, #200]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_ADC_MspInit+0xf0>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023f2:	230c      	movs	r3, #12
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f6:	2303      	movs	r3, #3
 80023f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4821      	ldr	r0, [pc, #132]	; (800248c <HAL_ADC_MspInit+0xf4>)
 8002406:	f001 fd2b 	bl	8003e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800240a:	4b21      	ldr	r3, [pc, #132]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 800240c:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_ADC_MspInit+0xfc>)
 800240e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002412:	2200      	movs	r2, #0
 8002414:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002416:	4b1e      	ldr	r3, [pc, #120]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800241c:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002428:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 800242c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002430:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002438:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 800243c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002440:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002444:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002448:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002450:	480f      	ldr	r0, [pc, #60]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002452:	f001 f8f7 	bl	8003644 <HAL_DMA_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800245c:	f7ff ff6c 	bl	8002338 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_ADC_MspInit+0xf8>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2105      	movs	r1, #5
 8002470:	2012      	movs	r0, #18
 8002472:	f001 f8bd 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002476:	2012      	movs	r0, #18
 8002478:	f001 f8d6 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3728      	adds	r7, #40	; 0x28
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012000 	.word	0x40012000
 8002488:	40023800 	.word	0x40023800
 800248c:	40020000 	.word	0x40020000
 8002490:	2000422c 	.word	0x2000422c
 8002494:	40026410 	.word	0x40026410

08002498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08c      	sub	sp, #48	; 0x30
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 031c 	add.w	r3, r7, #28
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a36      	ldr	r2, [pc, #216]	; (8002590 <HAL_I2C_MspInit+0xf8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d134      	bne.n	8002524 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a34      	ldr	r2, [pc, #208]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024da:	2312      	movs	r3, #18
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024de:	2301      	movs	r3, #1
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024e6:	2304      	movs	r3, #4
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ea:	f107 031c 	add.w	r3, r7, #28
 80024ee:	4619      	mov	r1, r3
 80024f0:	4829      	ldr	r0, [pc, #164]	; (8002598 <HAL_I2C_MspInit+0x100>)
 80024f2:	f001 fcb5 	bl	8003e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002504:	6413      	str	r3, [r2, #64]	; 0x40
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2105      	movs	r1, #5
 8002516:	201f      	movs	r0, #31
 8002518:	f001 f86a 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800251c:	201f      	movs	r0, #31
 800251e:	f001 f883 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002522:	e030      	b.n	8002586 <HAL_I2C_MspInit+0xee>
  else if(hi2c->Instance==I2C2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_I2C_MspInit+0x104>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12b      	bne.n	8002586 <HAL_I2C_MspInit+0xee>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002538:	f043 0320 	orr.w	r3, r3, #32
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800254a:	2303      	movs	r3, #3
 800254c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254e:	2312      	movs	r3, #18
 8002550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002552:	2301      	movs	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002556:	2303      	movs	r3, #3
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800255a:	2304      	movs	r3, #4
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	4619      	mov	r1, r3
 8002564:	480e      	ldr	r0, [pc, #56]	; (80025a0 <HAL_I2C_MspInit+0x108>)
 8002566:	f001 fc7b 	bl	8003e60 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a08      	ldr	r2, [pc, #32]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 8002574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_I2C_MspInit+0xfc>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	bf00      	nop
 8002588:	3730      	adds	r7, #48	; 0x30
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40005400 	.word	0x40005400
 8002594:	40023800 	.word	0x40023800
 8002598:	40020400 	.word	0x40020400
 800259c:	40005800 	.word	0x40005800
 80025a0:	40021400 	.word	0x40021400

080025a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_UART_MspInit+0x94>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d133      	bne.n	800262e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_UART_MspInit+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_UART_MspInit+0x98>)
 80025d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_UART_MspInit+0x98>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_UART_MspInit+0x98>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_UART_MspInit+0x98>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_UART_MspInit+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025fe:	2303      	movs	r3, #3
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800260e:	2308      	movs	r3, #8
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <HAL_UART_MspInit+0x9c>)
 800261a:	f001 fc21 	bl	8003e60 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	2034      	movs	r0, #52	; 0x34
 8002624:	f000 ffe4 	bl	80035f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002628:	2034      	movs	r0, #52	; 0x34
 800262a:	f000 fffd 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40004c00 	.word	0x40004c00
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002654:	2200      	movs	r2, #0
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	2019      	movs	r0, #25
 800265a:	f000 ffc9 	bl	80035f0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800265e:	2019      	movs	r0, #25
 8002660:	f000 ffe2 	bl	8003628 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_InitTick+0xa4>)
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_InitTick+0xa4>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6453      	str	r3, [r2, #68]	; 0x44
 8002674:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <HAL_InitTick+0xa4>)
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002680:	f107 0210 	add.w	r2, r7, #16
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f005 fba6 	bl	8007ddc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002690:	f005 fb90 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 8002694:	4603      	mov	r3, r0
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_InitTick+0xa8>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	3b01      	subs	r3, #1
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_InitTick+0xac>)
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_InitTick+0xb0>)
 80026ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_InitTick+0xac>)
 80026b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_InitTick+0xac>)
 80026b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <HAL_InitTick+0xac>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_InitTick+0xac>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80026c8:	4809      	ldr	r0, [pc, #36]	; (80026f0 <HAL_InitTick+0xac>)
 80026ca:	f005 fbb9 	bl	8007e40 <HAL_TIM_Base_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d104      	bne.n	80026de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80026d4:	4806      	ldr	r0, [pc, #24]	; (80026f0 <HAL_InitTick+0xac>)
 80026d6:	f005 fbe8 	bl	8007eaa <HAL_TIM_Base_Start_IT>
 80026da:	4603      	mov	r3, r0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	431bde83 	.word	0x431bde83
 80026f0:	20004328 	.word	0x20004328
 80026f4:	40010000 	.word	0x40010000

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <NMI_Handler+0x4>

080026fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <HardFault_Handler+0x4>

08002704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <MemManage_Handler+0x4>

0800270a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <BusFault_Handler+0x4>

08002710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <UsageFault_Handler+0x4>

08002716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <ADC_IRQHandler+0x10>)
 800272a:	f000 f94a 	bl	80029c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200041c4 	.word	0x200041c4

08002738 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800273e:	f005 fbd8 	bl	8007ef2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20004328 	.word	0x20004328

0800274c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <I2C1_EV_IRQHandler+0x10>)
 8002752:	f002 fdf3 	bl	800533c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004100 	.word	0x20004100

08002760 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <UART4_IRQHandler+0x10>)
 8002766:	f005 fe8f 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20004298 	.word	0x20004298

08002774 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <DMA2_Stream0_IRQHandler+0x10>)
 800277a:	f001 f8fb 	bl	8003974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2000422c 	.word	0x2000422c

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f009 f808 	bl	800b7cc <__errno>
 80027bc:	4602      	mov	r2, r0
 80027be:	230c      	movs	r3, #12
 80027c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20030000 	.word	0x20030000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	20000348 	.word	0x20000348
 80027f0:	20004370 	.word	0x20004370

080027f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <SystemInit+0x28>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <SystemInit+0x28>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <SystemInit+0x28>)
 800280a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800280e:	609a      	str	r2, [r3, #8]
#endif
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002858 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr  r2, =_sbss
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284a:	f7ff ffd3 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f008 ffc3 	bl	800b7d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002852:	f7ff f8ef 	bl	8001a34 <main>
  bx  lr    
 8002856:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002858:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800285c:	0800c204 	.word	0x0800c204
  ldr  r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002864:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002868:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800286c:	20004370 	.word	0x20004370

08002870 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <CAN1_RX0_IRQHandler>
	...

08002874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_Init+0x40>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <HAL_Init+0x40>)
 800287e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_Init+0x40>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <HAL_Init+0x40>)
 800288a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800288e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_Init+0x40>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_Init+0x40>)
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289c:	2003      	movs	r0, #3
 800289e:	f000 fe9c 	bl	80035da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fece 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a8:	f7ff fd4a 	bl	8002340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00

080028b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x20>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x24>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_IncTick+0x24>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20004368 	.word	0x20004368

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20004368 	.word	0x20004368

080028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff ffee 	bl	80028e0 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d005      	beq.n	800291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <HAL_Delay+0x40>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291e:	bf00      	nop
 8002920:	f7ff ffde 	bl	80028e0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d8f7      	bhi.n	8002920 <HAL_Delay+0x28>
  {
  }
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000008 	.word	0x20000008

0800293c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e033      	b.n	80029ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd1c 	bl	8002398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d118      	bne.n	80029ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002982:	f023 0302 	bic.w	r3, r3, #2
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fbee 	bl	8003170 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b02      	cmp	r3, #2
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0320 	and.w	r3, r3, #32
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d049      	beq.n	8002a98 <HAL_ADC_IRQHandler+0xd6>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d046      	beq.n	8002a98 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d12b      	bne.n	8002a88 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d127      	bne.n	8002a88 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d119      	bne.n	8002a88 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0220 	bic.w	r2, r2, #32
 8002a62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fa17 	bl	8002ebc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f06f 0212 	mvn.w	r2, #18
 8002a96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab8:	2b80      	cmp	r3, #128	; 0x80
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d057      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x1b8>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d054      	beq.n	8002b7a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d105      	bne.n	8002ae8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d139      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d12b      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d124      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11d      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d119      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fc7e 	bl	800346c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 020c 	mvn.w	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	bf0c      	ite	eq
 8002b88:	2301      	moveq	r3, #1
 8002b8a:	2300      	movne	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d017      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x21a>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d014      	beq.n	8002bdc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10d      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f989 	bl	8002ee4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f06f 0201 	mvn.w	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x27a>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f043 0202 	orr.w	r2, r3, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 0220 	mvn.w	r2, #32
 8002c2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f963 	bl	8002ef8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0220 	mvn.w	r2, #32
 8002c3a:	601a      	str	r2, [r3, #0]
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1e>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0cc      	b.n	8002dfc <HAL_ADC_Start_DMA+0x1b8>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d018      	beq.n	8002caa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_ADC_Start_DMA+0x1c0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5e      	ldr	r2, [pc, #376]	; (8002e08 <HAL_ADC_Start_DMA+0x1c4>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9a      	lsrs	r2, r3, #18
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c9c:	e002      	b.n	8002ca4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f9      	bne.n	8002c9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	f040 80a0 	bne.w	8002dfa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cc2:	f023 0301 	bic.w	r3, r3, #1
 8002cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf8:	d106      	bne.n	8002d08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f023 0206 	bic.w	r2, r3, #6
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	645a      	str	r2, [r3, #68]	; 0x44
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_ADC_Start_DMA+0x1c8>)
 8002d18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	4a3c      	ldr	r2, [pc, #240]	; (8002e10 <HAL_ADC_Start_DMA+0x1cc>)
 8002d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	4a3b      	ldr	r2, [pc, #236]	; (8002e14 <HAL_ADC_Start_DMA+0x1d0>)
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	4a3a      	ldr	r2, [pc, #232]	; (8002e18 <HAL_ADC_Start_DMA+0x1d4>)
 8002d30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	334c      	adds	r3, #76	; 0x4c
 8002d66:	4619      	mov	r1, r3
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f000 fd18 	bl	80037a0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d12a      	bne.n	8002dd2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <HAL_ADC_Start_DMA+0x1d8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d015      	beq.n	8002db2 <HAL_ADC_Start_DMA+0x16e>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <HAL_ADC_Start_DMA+0x1dc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_Start_DMA+0x158>
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <HAL_ADC_Start_DMA+0x1c8>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_ADC_Start_DMA+0x1e0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d129      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_ADC_Start_DMA+0x1c8>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d823      	bhi.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d11c      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	e013      	b.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <HAL_ADC_Start_DMA+0x1d8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10e      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002df8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000000 	.word	0x20000000
 8002e08:	431bde83 	.word	0x431bde83
 8002e0c:	40012300 	.word	0x40012300
 8002e10:	08003369 	.word	0x08003369
 8002e14:	08003423 	.word	0x08003423
 8002e18:	0800343f 	.word	0x0800343f
 8002e1c:	40012000 	.word	0x40012000
 8002e20:	40012100 	.word	0x40012100
 8002e24:	40012200 	.word	0x40012200

08002e28 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Stop_DMA+0x1a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e038      	b.n	8002eb4 <HAL_ADC_Stop_DMA+0x8c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d120      	bne.n	8002eaa <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e76:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fce7 	bl	8003850 <HAL_DMA_Abort>
 8002e82:	4603      	mov	r3, r0
 8002e84:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002e94:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x1c>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e113      	b.n	8003150 <HAL_ADC_ConfigChannel+0x244>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b09      	cmp	r3, #9
 8002f36:	d925      	bls.n	8002f84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68d9      	ldr	r1, [r3, #12]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b1e      	subs	r3, #30
 8002f4e:	2207      	movs	r2, #7
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43da      	mvns	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68d9      	ldr	r1, [r3, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	4603      	mov	r3, r0
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4403      	add	r3, r0
 8002f76:	3b1e      	subs	r3, #30
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e022      	b.n	8002fca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	461a      	mov	r2, r3
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	2207      	movs	r2, #7
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6919      	ldr	r1, [r3, #16]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	4403      	add	r3, r0
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d824      	bhi.n	800301c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3b05      	subs	r3, #5
 8002fe4:	221f      	movs	r2, #31
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	3b05      	subs	r3, #5
 800300e:	fa00 f203 	lsl.w	r2, r0, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
 800301a:	e04c      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b0c      	cmp	r3, #12
 8003022:	d824      	bhi.n	800306e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b23      	subs	r3, #35	; 0x23
 8003036:	221f      	movs	r2, #31
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43da      	mvns	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	400a      	ands	r2, r1
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	3b23      	subs	r3, #35	; 0x23
 8003060:	fa00 f203 	lsl.w	r2, r0, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
 800306c:	e023      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	3b41      	subs	r3, #65	; 0x41
 8003080:	221f      	movs	r2, #31
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	400a      	ands	r2, r1
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	4618      	mov	r0, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	3b41      	subs	r3, #65	; 0x41
 80030aa:	fa00 f203 	lsl.w	r2, r0, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030b6:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_ADC_ConfigChannel+0x250>)
 80030b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a28      	ldr	r2, [pc, #160]	; (8003160 <HAL_ADC_ConfigChannel+0x254>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10f      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1d8>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b12      	cmp	r3, #18
 80030ca:	d10b      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_ADC_ConfigChannel+0x254>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d12b      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x23a>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_ADC_ConfigChannel+0x258>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <HAL_ADC_ConfigChannel+0x1f4>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b11      	cmp	r3, #17
 80030fe:	d122      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_ADC_ConfigChannel+0x258>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d111      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_ADC_ConfigChannel+0x25c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_ADC_ConfigChannel+0x260>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0c9a      	lsrs	r2, r3, #18
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003138:	e002      	b.n	8003140 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	3b01      	subs	r3, #1
 800313e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40012300 	.word	0x40012300
 8003160:	40012000 	.word	0x40012000
 8003164:	10000012 	.word	0x10000012
 8003168:	20000000 	.word	0x20000000
 800316c:	431bde83 	.word	0x431bde83

08003170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003178:	4b79      	ldr	r3, [pc, #484]	; (8003360 <ADC_Init+0x1f0>)
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	021a      	lsls	r2, r3, #8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6899      	ldr	r1, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	4a58      	ldr	r2, [pc, #352]	; (8003364 <ADC_Init+0x1f4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003216:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6899      	ldr	r1, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6899      	ldr	r1, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	e00f      	b.n	800326e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800325c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800326c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0202 	bic.w	r2, r2, #2
 800327c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6899      	ldr	r1, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	7e1b      	ldrb	r3, [r3, #24]
 8003288:	005a      	lsls	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01b      	beq.n	80032d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6859      	ldr	r1, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	3b01      	subs	r3, #1
 80032c8:	035a      	lsls	r2, r3, #13
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	e007      	b.n	80032e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	3b01      	subs	r3, #1
 8003300:	051a      	lsls	r2, r3, #20
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003326:	025a      	lsls	r2, r3, #9
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	029a      	lsls	r2, r3, #10
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012300 	.word	0x40012300
 8003364:	0f000001 	.word	0x0f000001

08003368 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003374:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800337e:	2b00      	cmp	r3, #0
 8003380:	d13c      	bne.n	80033fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12b      	bne.n	80033f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d127      	bne.n	80033f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d006      	beq.n	80033c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d119      	bne.n	80033f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0220 	bic.w	r2, r2, #32
 80033ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d105      	bne.n	80033f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f7ff fd61 	bl	8002ebc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033fa:	e00e      	b.n	800341a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff fd75 	bl	8002ef8 <HAL_ADC_ErrorCallback>
}
 800340e:	e004      	b.n	800341a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd4d 	bl	8002ed0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff fd4a 	bl	8002ef8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800349c:	4013      	ands	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034b2:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	60d3      	str	r3, [r2, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034cc:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <__NVIC_GetPriorityGrouping+0x18>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	0a1b      	lsrs	r3, r3, #8
 80034d2:	f003 0307 	and.w	r3, r3, #7
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	db0b      	blt.n	800350e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	4907      	ldr	r1, [pc, #28]	; (800351c <__NVIC_EnableIRQ+0x38>)
 80034fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2001      	movs	r0, #1
 8003506:	fa00 f202 	lsl.w	r2, r0, r2
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e100 	.word	0xe000e100

08003520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	6039      	str	r1, [r7, #0]
 800352a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	2b00      	cmp	r3, #0
 8003532:	db0a      	blt.n	800354a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b2da      	uxtb	r2, r3
 8003538:	490c      	ldr	r1, [pc, #48]	; (800356c <__NVIC_SetPriority+0x4c>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	440b      	add	r3, r1
 8003544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003548:	e00a      	b.n	8003560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2da      	uxtb	r2, r3
 800354e:	4908      	ldr	r1, [pc, #32]	; (8003570 <__NVIC_SetPriority+0x50>)
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	3b04      	subs	r3, #4
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	440b      	add	r3, r1
 800355e:	761a      	strb	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003574:	b480      	push	{r7}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f1c3 0307 	rsb	r3, r3, #7
 800358e:	2b04      	cmp	r3, #4
 8003590:	bf28      	it	cs
 8003592:	2304      	movcs	r3, #4
 8003594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3304      	adds	r3, #4
 800359a:	2b06      	cmp	r3, #6
 800359c:	d902      	bls.n	80035a4 <NVIC_EncodePriority+0x30>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	3b03      	subs	r3, #3
 80035a2:	e000      	b.n	80035a6 <NVIC_EncodePriority+0x32>
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	43da      	mvns	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	401a      	ands	r2, r3
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035bc:	f04f 31ff 	mov.w	r1, #4294967295
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	4313      	orrs	r3, r2
         );
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3724      	adds	r7, #36	; 0x24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff4c 	bl	8003480 <__NVIC_SetPriorityGrouping>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003602:	f7ff ff61 	bl	80034c8 <__NVIC_GetPriorityGrouping>
 8003606:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	6978      	ldr	r0, [r7, #20]
 800360e:	f7ff ffb1 	bl	8003574 <NVIC_EncodePriority>
 8003612:	4602      	mov	r2, r0
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff80 	bl	8003520 <__NVIC_SetPriority>
}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ff54 	bl	80034e4 <__NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003650:	f7ff f946 	bl	80028e0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d101      	bne.n	8003660 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e099      	b.n	8003794 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003680:	e00f      	b.n	80036a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7ff f92d 	bl	80028e0 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d908      	bls.n	80036a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e078      	b.n	8003794 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e8      	bne.n	8003682 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4b38      	ldr	r3, [pc, #224]	; (800379c <HAL_DMA_Init+0x158>)
 80036bc:	4013      	ands	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d107      	bne.n	800370c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4313      	orrs	r3, r2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	f023 0307 	bic.w	r3, r3, #7
 8003722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003732:	2b04      	cmp	r3, #4
 8003734:	d117      	bne.n	8003766 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00e      	beq.n	8003766 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fb0f 	bl	8003d6c <DMA_CheckFifoParam>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003762:	2301      	movs	r3, #1
 8003764:	e016      	b.n	8003794 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fac6 	bl	8003d00 <DMA_CalcBaseAndBitshift>
 8003774:	4603      	mov	r3, r0
 8003776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	f010803f 	.word	0xf010803f

080037a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_DMA_Start_IT+0x26>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e040      	b.n	8003848 <HAL_DMA_Start_IT+0xa8>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d12f      	bne.n	800383a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fa58 	bl	8003ca4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	223f      	movs	r2, #63	; 0x3f
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0216 	orr.w	r2, r2, #22
 800380e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0208 	orr.w	r2, r2, #8
 8003826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e005      	b.n	8003846 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003842:	2302      	movs	r3, #2
 8003844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800385e:	f7ff f83f 	bl	80028e0 <HAL_GetTick>
 8003862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d008      	beq.n	8003882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e052      	b.n	8003928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0216 	bic.w	r2, r2, #22
 8003890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <HAL_DMA_Abort+0x62>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0208 	bic.w	r2, r2, #8
 80038c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038d2:	e013      	b.n	80038fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d4:	f7ff f804 	bl	80028e0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d90c      	bls.n	80038fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2203      	movs	r2, #3
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e015      	b.n	8003928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e4      	bne.n	80038d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390e:	223f      	movs	r2, #63	; 0x3f
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d004      	beq.n	800394e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e00c      	b.n	8003968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2205      	movs	r2, #5
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003980:	4b92      	ldr	r3, [pc, #584]	; (8003bcc <HAL_DMA_IRQHandler+0x258>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a92      	ldr	r2, [pc, #584]	; (8003bd0 <HAL_DMA_IRQHandler+0x25c>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0a9b      	lsrs	r3, r3, #10
 800398c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2208      	movs	r2, #8
 80039a0:	409a      	lsls	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01a      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0204 	bic.w	r2, r2, #4
 80039c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2208      	movs	r2, #8
 80039ce:	409a      	lsls	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2201      	movs	r2, #1
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d012      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00b      	beq.n	8003a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2204      	movs	r2, #4
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	f043 0204 	orr.w	r2, r3, #4
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	2210      	movs	r2, #16
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d043      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2210      	movs	r2, #16
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d018      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d024      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	4798      	blx	r3
 8003aa2:	e01f      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01b      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e016      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0208 	bic.w	r2, r2, #8
 8003ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	2220      	movs	r2, #32
 8003aea:	409a      	lsls	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 808e 	beq.w	8003c12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8086 	beq.w	8003c12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	d136      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0216 	bic.w	r2, r2, #22
 8003b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x1da>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	223f      	movs	r2, #63	; 0x3f
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d07d      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
        }
        return;
 8003b8a:	e078      	b.n	8003c7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01c      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d030      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	4798      	blx	r3
 8003bb8:	e02b      	b.n	8003c12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
 8003bca:	e022      	b.n	8003c12 <HAL_DMA_IRQHandler+0x29e>
 8003bcc:	20000000 	.word	0x20000000
 8003bd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0210 	bic.w	r2, r2, #16
 8003bf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d032      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d022      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2205      	movs	r2, #5
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	3301      	adds	r3, #1
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d307      	bcc.n	8003c5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f2      	bne.n	8003c3e <HAL_DMA_IRQHandler+0x2ca>
 8003c58:	e000      	b.n	8003c5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e000      	b.n	8003c80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c7e:	bf00      	nop
    }
  }
}
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop

08003c88 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c96:	b2db      	uxtb	r3, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d108      	bne.n	8003ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ce2:	e007      	b.n	8003cf4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3b10      	subs	r3, #16
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <DMA_CalcBaseAndBitshift+0x64>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d1a:	4a13      	ldr	r2, [pc, #76]	; (8003d68 <DMA_CalcBaseAndBitshift+0x68>)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d909      	bls.n	8003d42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	1d1a      	adds	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d40:	e007      	b.n	8003d52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	aaaaaaab 	.word	0xaaaaaaab
 8003d68:	0800c1b8 	.word	0x0800c1b8

08003d6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11f      	bne.n	8003dc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b03      	cmp	r3, #3
 8003d8a:	d855      	bhi.n	8003e38 <DMA_CheckFifoParam+0xcc>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <DMA_CheckFifoParam+0x28>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db7 	.word	0x08003db7
 8003d9c:	08003da5 	.word	0x08003da5
 8003da0:	08003e39 	.word	0x08003e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d045      	beq.n	8003e3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db4:	e042      	b.n	8003e3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dbe:	d13f      	bne.n	8003e40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e03c      	b.n	8003e40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dce:	d121      	bne.n	8003e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d836      	bhi.n	8003e44 <DMA_CheckFifoParam+0xd8>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <DMA_CheckFifoParam+0x70>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df3 	.word	0x08003df3
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e05 	.word	0x08003e05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
      break;
 8003df0:	e02f      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d024      	beq.n	8003e48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e02:	e021      	b.n	8003e48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0c:	d11e      	bne.n	8003e4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e12:	e01b      	b.n	8003e4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d902      	bls.n	8003e20 <DMA_CheckFifoParam+0xb4>
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d003      	beq.n	8003e26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e1e:	e018      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e015      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00e      	beq.n	8003e50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      break;
 8003e36:	e00b      	b.n	8003e50 <DMA_CheckFifoParam+0xe4>
      break;
 8003e38:	bf00      	nop
 8003e3a:	e00a      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e3c:	bf00      	nop
 8003e3e:	e008      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e40:	bf00      	nop
 8003e42:	e006      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e44:	bf00      	nop
 8003e46:	e004      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e48:	bf00      	nop
 8003e4a:	e002      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;   
 8003e4c:	bf00      	nop
 8003e4e:	e000      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
      break;
 8003e50:	bf00      	nop
    }
  } 
  
  return status; 
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b089      	sub	sp, #36	; 0x24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	e177      	b.n	800416c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	f040 8166 	bne.w	8004166 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d00b      	beq.n	8003eba <HAL_GPIO_Init+0x5a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d007      	beq.n	8003eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eae:	2b11      	cmp	r3, #17
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b12      	cmp	r3, #18
 8003eb8:	d130      	bne.n	8003f1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 0201 	and.w	r2, r3, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	2203      	movs	r2, #3
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0xfc>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d123      	bne.n	8003fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	08da      	lsrs	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3208      	adds	r2, #8
 8003f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	220f      	movs	r2, #15
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	08da      	lsrs	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 0203 	and.w	r2, r3, #3
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80c0 	beq.w	8004166 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_GPIO_Init+0x320>)
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	4a64      	ldr	r2, [pc, #400]	; (8004180 <HAL_GPIO_Init+0x320>)
 8003ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ff6:	4b62      	ldr	r3, [pc, #392]	; (8004180 <HAL_GPIO_Init+0x320>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004002:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_GPIO_Init+0x324>)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	3302      	adds	r3, #2
 800400a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4013      	ands	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_GPIO_Init+0x328>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d037      	beq.n	800409e <HAL_GPIO_Init+0x23e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a56      	ldr	r2, [pc, #344]	; (800418c <HAL_GPIO_Init+0x32c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_GPIO_Init+0x23a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a55      	ldr	r2, [pc, #340]	; (8004190 <HAL_GPIO_Init+0x330>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <HAL_GPIO_Init+0x236>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a54      	ldr	r2, [pc, #336]	; (8004194 <HAL_GPIO_Init+0x334>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d025      	beq.n	8004092 <HAL_GPIO_Init+0x232>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a53      	ldr	r2, [pc, #332]	; (8004198 <HAL_GPIO_Init+0x338>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01f      	beq.n	800408e <HAL_GPIO_Init+0x22e>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a52      	ldr	r2, [pc, #328]	; (800419c <HAL_GPIO_Init+0x33c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d019      	beq.n	800408a <HAL_GPIO_Init+0x22a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a51      	ldr	r2, [pc, #324]	; (80041a0 <HAL_GPIO_Init+0x340>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_GPIO_Init+0x226>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a50      	ldr	r2, [pc, #320]	; (80041a4 <HAL_GPIO_Init+0x344>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00d      	beq.n	8004082 <HAL_GPIO_Init+0x222>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4f      	ldr	r2, [pc, #316]	; (80041a8 <HAL_GPIO_Init+0x348>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <HAL_GPIO_Init+0x21e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4e      	ldr	r2, [pc, #312]	; (80041ac <HAL_GPIO_Init+0x34c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <HAL_GPIO_Init+0x21a>
 8004076:	2309      	movs	r3, #9
 8004078:	e012      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800407a:	230a      	movs	r3, #10
 800407c:	e010      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800407e:	2308      	movs	r3, #8
 8004080:	e00e      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 8004082:	2307      	movs	r3, #7
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 8004086:	2306      	movs	r3, #6
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x240>
 800409e:	2300      	movs	r3, #0
 80040a0:	69fa      	ldr	r2, [r7, #28]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b0:	4934      	ldr	r1, [pc, #208]	; (8004184 <HAL_GPIO_Init+0x324>)
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040be:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4013      	ands	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e2:	4a33      	ldr	r2, [pc, #204]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040e8:	4b31      	ldr	r3, [pc, #196]	; (80041b0 <HAL_GPIO_Init+0x350>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800410c:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <HAL_GPIO_Init+0x350>)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_GPIO_Init+0x350>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_GPIO_Init+0x350>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b0f      	cmp	r3, #15
 8004170:	f67f ae84 	bls.w	8003e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004174:	bf00      	nop
 8004176:	3724      	adds	r7, #36	; 0x24
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40021400 	.word	0x40021400
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40021c00 	.word	0x40021c00
 80041a8:	40022000 	.word	0x40022000
 80041ac:	40022400 	.word	0x40022400
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
 80041c0:	4613      	mov	r3, r2
 80041c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c4:	787b      	ldrb	r3, [r7, #1]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ca:	887a      	ldrh	r2, [r7, #2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041d0:	e003      	b.n	80041da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041d2:	887b      	ldrh	r3, [r7, #2]
 80041d4:	041a      	lsls	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	619a      	str	r2, [r3, #24]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e11f      	b.n	800443a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fe f942 	bl	8002498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	; 0x24
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800423a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800424c:	f003 fd9e 	bl	8007d8c <HAL_RCC_GetPCLK1Freq>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <HAL_I2C_Init+0x25c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d807      	bhi.n	800426c <HAL_I2C_Init+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <HAL_I2C_Init+0x260>)
 8004260:	4293      	cmp	r3, r2
 8004262:	bf94      	ite	ls
 8004264:	2301      	movls	r3, #1
 8004266:	2300      	movhi	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e006      	b.n	800427a <HAL_I2C_Init+0x92>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a77      	ldr	r2, [pc, #476]	; (800444c <HAL_I2C_Init+0x264>)
 8004270:	4293      	cmp	r3, r2
 8004272:	bf94      	ite	ls
 8004274:	2301      	movls	r3, #1
 8004276:	2300      	movhi	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0db      	b.n	800443a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a72      	ldr	r2, [pc, #456]	; (8004450 <HAL_I2C_Init+0x268>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	0c9b      	lsrs	r3, r3, #18
 800428c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4a64      	ldr	r2, [pc, #400]	; (8004444 <HAL_I2C_Init+0x25c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d802      	bhi.n	80042bc <HAL_I2C_Init+0xd4>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3301      	adds	r3, #1
 80042ba:	e009      	b.n	80042d0 <HAL_I2C_Init+0xe8>
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	4a63      	ldr	r2, [pc, #396]	; (8004454 <HAL_I2C_Init+0x26c>)
 80042c8:	fba2 2303 	umull	r2, r3, r2, r3
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	3301      	adds	r3, #1
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	4956      	ldr	r1, [pc, #344]	; (8004444 <HAL_I2C_Init+0x25c>)
 80042ec:	428b      	cmp	r3, r1
 80042ee:	d80d      	bhi.n	800430c <HAL_I2C_Init+0x124>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1e59      	subs	r1, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004304:	2b04      	cmp	r3, #4
 8004306:	bf38      	it	cc
 8004308:	2304      	movcc	r3, #4
 800430a:	e04f      	b.n	80043ac <HAL_I2C_Init+0x1c4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d111      	bne.n	8004338 <HAL_I2C_Init+0x150>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e58      	subs	r0, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	440b      	add	r3, r1
 8004322:	fbb0 f3f3 	udiv	r3, r0, r3
 8004326:	3301      	adds	r3, #1
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	e012      	b.n	800435e <HAL_I2C_Init+0x176>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	0099      	lsls	r1, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Init+0x17e>
 8004362:	2301      	movs	r3, #1
 8004364:	e022      	b.n	80043ac <HAL_I2C_Init+0x1c4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10e      	bne.n	800438c <HAL_I2C_Init+0x1a4>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e58      	subs	r0, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6859      	ldr	r1, [r3, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	440b      	add	r3, r1
 800437c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438a:	e00f      	b.n	80043ac <HAL_I2C_Init+0x1c4>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e58      	subs	r0, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	0099      	lsls	r1, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	6809      	ldr	r1, [r1, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6911      	ldr	r1, [r2, #16]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68d2      	ldr	r2, [r2, #12]
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	000186a0 	.word	0x000186a0
 8004448:	001e847f 	.word	0x001e847f
 800444c:	003d08ff 	.word	0x003d08ff
 8004450:	431bde83 	.word	0x431bde83
 8004454:	10624dd3 	.word	0x10624dd3

08004458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	461a      	mov	r2, r3
 8004464:	460b      	mov	r3, r1
 8004466:	817b      	strh	r3, [r7, #10]
 8004468:	4613      	mov	r3, r2
 800446a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800446c:	f7fe fa38 	bl	80028e0 <HAL_GetTick>
 8004470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	f040 80e0 	bne.w	8004640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	2319      	movs	r3, #25
 8004486:	2201      	movs	r2, #1
 8004488:	4970      	ldr	r1, [pc, #448]	; (800464c <HAL_I2C_Master_Transmit+0x1f4>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f002 fd74 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
 8004498:	e0d3      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_I2C_Master_Transmit+0x50>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0cc      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d007      	beq.n	80044ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0201 	orr.w	r2, r2, #1
 80044cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2221      	movs	r2, #33	; 0x21
 80044e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2210      	movs	r2, #16
 80044ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	893a      	ldrh	r2, [r7, #8]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a50      	ldr	r2, [pc, #320]	; (8004650 <HAL_I2C_Master_Transmit+0x1f8>)
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004510:	8979      	ldrh	r1, [r7, #10]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	6a3a      	ldr	r2, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f002 f9b8 	bl	800688c <I2C_MasterRequestWrite>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e08d      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800453c:	e066      	b.n	800460c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	6a39      	ldr	r1, [r7, #32]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f002 fdee 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b04      	cmp	r3, #4
 8004554:	d107      	bne.n	8004566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06b      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d11b      	bne.n	80045e0 <HAL_I2C_Master_Transmit+0x188>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	6a39      	ldr	r1, [r7, #32]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f002 fdde 	bl	80071a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d107      	bne.n	8004608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e01a      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d194      	bne.n	800453e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	00100002 	.word	0x00100002
 8004650:	ffff0000 	.word	0xffff0000

08004654 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	460b      	mov	r3, r1
 8004662:	817b      	strh	r3, [r7, #10]
 8004664:	4613      	mov	r3, r2
 8004666:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004668:	f7fe f93a 	bl	80028e0 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	f040 820b 	bne.w	8004a92 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2319      	movs	r3, #25
 8004682:	2201      	movs	r2, #1
 8004684:	497c      	ldr	r1, [pc, #496]	; (8004878 <HAL_I2C_Master_Receive+0x224>)
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f002 fc76 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004692:	2302      	movs	r3, #2
 8004694:	e1fe      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_I2C_Master_Receive+0x50>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e1f7      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d007      	beq.n	80046ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0201 	orr.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2222      	movs	r2, #34	; 0x22
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2210      	movs	r2, #16
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	893a      	ldrh	r2, [r7, #8]
 80046fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a5c      	ldr	r2, [pc, #368]	; (800487c <HAL_I2C_Master_Receive+0x228>)
 800470a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f002 f93c 	bl	8006990 <I2C_MasterRequestRead>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1b8      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d113      	bne.n	8004752 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e18c      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b01      	cmp	r3, #1
 8004758:	d11b      	bne.n	8004792 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	e16c      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004796:	2b02      	cmp	r3, #2
 8004798:	d11b      	bne.n	80047d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	e14c      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047f8:	e138      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	2b03      	cmp	r3, #3
 8004800:	f200 80f1 	bhi.w	80049e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	2b01      	cmp	r3, #1
 800480a:	d123      	bne.n	8004854 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800480c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f002 fd3b 	bl	800728c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e139      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	3b01      	subs	r3, #1
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004852:	e10b      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	2b02      	cmp	r3, #2
 800485a:	d14e      	bne.n	80048fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	2200      	movs	r2, #0
 8004864:	4906      	ldr	r1, [pc, #24]	; (8004880 <HAL_I2C_Master_Receive+0x22c>)
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f002 fb86 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e10e      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
 8004876:	bf00      	nop
 8004878:	00100002 	.word	0x00100002
 800487c:	ffff0000 	.word	0xffff0000
 8004880:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	691a      	ldr	r2, [r3, #16]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048f8:	e0b8      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	2200      	movs	r2, #0
 8004902:	4966      	ldr	r1, [pc, #408]	; (8004a9c <HAL_I2C_Master_Receive+0x448>)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f002 fb37 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0bf      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	494f      	ldr	r1, [pc, #316]	; (8004a9c <HAL_I2C_Master_Receive+0x448>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f002 fb09 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e091      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e4:	e042      	b.n	8004a6c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f002 fc4e 	bl	800728c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e04c      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d118      	bne.n	8004a6c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	1c5a      	adds	r2, r3, #1
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f aec2 	bne.w	80047fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e000      	b.n	8004a94 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	00010004 	.word	0x00010004

08004aa0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	4608      	mov	r0, r1
 8004aaa:	4611      	mov	r1, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	817b      	strh	r3, [r7, #10]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	813b      	strh	r3, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004aba:	f7fd ff11 	bl	80028e0 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	f040 80d9 	bne.w	8004c80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	2319      	movs	r3, #25
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	496d      	ldr	r1, [pc, #436]	; (8004c8c <HAL_I2C_Mem_Write+0x1ec>)
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f002 fa4d 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e0cc      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_I2C_Mem_Write+0x56>
 8004af2:	2302      	movs	r3, #2
 8004af4:	e0c5      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d007      	beq.n	8004b1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2221      	movs	r2, #33	; 0x21
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2240      	movs	r2, #64	; 0x40
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a3a      	ldr	r2, [r7, #32]
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a4d      	ldr	r2, [pc, #308]	; (8004c90 <HAL_I2C_Mem_Write+0x1f0>)
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b5e:	88f8      	ldrh	r0, [r7, #6]
 8004b60:	893a      	ldrh	r2, [r7, #8]
 8004b62:	8979      	ldrh	r1, [r7, #10]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	9301      	str	r3, [sp, #4]
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f001 ffdc 	bl	8006b2c <I2C_RequestMemoryWrite>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d052      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e081      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f002 face 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00d      	beq.n	8004baa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d107      	bne.n	8004ba6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e06b      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	781a      	ldrb	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d11b      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x180>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d017      	beq.n	8004c20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1aa      	bne.n	8004b7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f002 faba 	bl	80071a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00d      	beq.n	8004c54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d107      	bne.n	8004c50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e016      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	00100002 	.word	0x00100002
 8004c90:	ffff0000 	.word	0xffff0000

08004c94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	817b      	strh	r3, [r7, #10]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	813b      	strh	r3, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cae:	f7fd fe17 	bl	80028e0 <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	f040 8208 	bne.w	80050d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2319      	movs	r3, #25
 8004cc8:	2201      	movs	r2, #1
 8004cca:	497b      	ldr	r1, [pc, #492]	; (8004eb8 <HAL_I2C_Mem_Read+0x224>)
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f002 f953 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e1fb      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_I2C_Mem_Read+0x56>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e1f4      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d007      	beq.n	8004d10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2222      	movs	r2, #34	; 0x22
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a5b      	ldr	r2, [pc, #364]	; (8004ebc <HAL_I2C_Mem_Read+0x228>)
 8004d50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d52:	88f8      	ldrh	r0, [r7, #6]
 8004d54:	893a      	ldrh	r2, [r7, #8]
 8004d56:	8979      	ldrh	r1, [r7, #10]
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4603      	mov	r3, r0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 ff78 	bl	8006c58 <I2C_RequestMemoryRead>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e1b0      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d113      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	623b      	str	r3, [r7, #32]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e184      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d11b      	bne.n	8004de2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e164      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d11b      	bne.n	8004e22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	e144      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e38:	e138      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	f200 80f1 	bhi.w	8005026 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d123      	bne.n	8004e94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f002 fa1b 	bl	800728c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e139      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691a      	ldr	r2, [r3, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e92:	e10b      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d14e      	bne.n	8004f3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4906      	ldr	r1, [pc, #24]	; (8004ec0 <HAL_I2C_Mem_Read+0x22c>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f002 f866 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e10e      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
 8004eb6:	bf00      	nop
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000
 8004ec0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f38:	e0b8      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2200      	movs	r2, #0
 8004f42:	4966      	ldr	r1, [pc, #408]	; (80050dc <HAL_I2C_Mem_Read+0x448>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f002 f817 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0bf      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	494f      	ldr	r1, [pc, #316]	; (80050dc <HAL_I2C_Mem_Read+0x448>)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f001 ffe9 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e091      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501a:	b29b      	uxth	r3, r3
 800501c:	3b01      	subs	r3, #1
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005024:	e042      	b.n	80050ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f002 f92e 	bl	800728c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e04c      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b04      	cmp	r3, #4
 8005078:	d118      	bne.n	80050ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f47f aec2 	bne.w	8004e3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3728      	adds	r7, #40	; 0x28
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	00010004 	.word	0x00010004

080050e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	; 0x28
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	603b      	str	r3, [r7, #0]
 80050ec:	460b      	mov	r3, r1
 80050ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80050f0:	f7fd fbf6 	bl	80028e0 <HAL_GetTick>
 80050f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b20      	cmp	r3, #32
 8005104:	f040 8111 	bne.w	800532a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	2319      	movs	r3, #25
 800510e:	2201      	movs	r2, #1
 8005110:	4988      	ldr	r1, [pc, #544]	; (8005334 <HAL_I2C_IsDeviceReady+0x254>)
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f001 ff30 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
 8005120:	e104      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_I2C_IsDeviceReady+0x50>
 800512c:	2302      	movs	r3, #2
 800512e:	e0fd      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d007      	beq.n	8005156 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2224      	movs	r2, #36	; 0x24
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4a70      	ldr	r2, [pc, #448]	; (8005338 <HAL_I2C_IsDeviceReady+0x258>)
 8005178:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005188:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2200      	movs	r2, #0
 8005192:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f001 feee 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b0:	d103      	bne.n	80051ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0b6      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051be:	897b      	ldrh	r3, [r7, #10]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80051ce:	f7fd fb87 	bl	80028e0 <HAL_GetTick>
 80051d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005202:	e025      	b.n	8005250 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005204:	f7fd fb6c 	bl	80028e0 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d302      	bcc.n	800521a <HAL_I2C_IsDeviceReady+0x13a>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	22a0      	movs	r2, #160	; 0xa0
 800521e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b02      	cmp	r3, #2
 800522e:	bf0c      	ite	eq
 8005230:	2301      	moveq	r3, #1
 8005232:	2300      	movne	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005246:	bf0c      	ite	eq
 8005248:	2301      	moveq	r3, #1
 800524a:	2300      	movne	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2ba0      	cmp	r3, #160	; 0xa0
 800525a:	d005      	beq.n	8005268 <HAL_I2C_IsDeviceReady+0x188>
 800525c:	7dfb      	ldrb	r3, [r7, #23]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d102      	bne.n	8005268 <HAL_I2C_IsDeviceReady+0x188>
 8005262:	7dbb      	ldrb	r3, [r7, #22]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0cd      	beq.n	8005204 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d129      	bne.n	80052d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2319      	movs	r3, #25
 80052aa:	2201      	movs	r2, #1
 80052ac:	4921      	ldr	r1, [pc, #132]	; (8005334 <HAL_I2C_IsDeviceReady+0x254>)
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 fe62 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e036      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e02c      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	2319      	movs	r3, #25
 80052f2:	2201      	movs	r2, #1
 80052f4:	490f      	ldr	r1, [pc, #60]	; (8005334 <HAL_I2C_IsDeviceReady+0x254>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 fe3e 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e012      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	3301      	adds	r3, #1
 800530a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	f4ff af32 	bcc.w	800517a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800532a:	2302      	movs	r3, #2
  }
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	00100002 	.word	0x00100002
 8005338:	ffff0000 	.word	0xffff0000

0800533c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	2b10      	cmp	r3, #16
 800536a:	d003      	beq.n	8005374 <HAL_I2C_EV_IRQHandler+0x38>
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	f040 80bd 	bne.w	80054ee <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <HAL_I2C_EV_IRQHandler+0x6e>
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005394:	d003      	beq.n	800539e <HAL_I2C_EV_IRQHandler+0x62>
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800539c:	d101      	bne.n	80053a2 <HAL_I2C_EV_IRQHandler+0x66>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_I2C_EV_IRQHandler+0x68>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f000 812e 	beq.w	8005606 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x92>
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	0a5b      	lsrs	r3, r3, #9
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d006      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 ffe8 	bl	8007396 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fcbb 	bl	8005d42 <I2C_Master_SB>
 80053cc:	e08e      	b.n	80054ec <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_I2C_EV_IRQHandler+0xb2>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	0a5b      	lsrs	r3, r3, #9
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fd31 	bl	8005e4e <I2C_Master_ADD10>
 80053ec:	e07e      	b.n	80054ec <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_I2C_EV_IRQHandler+0xd2>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	0a5b      	lsrs	r3, r3, #9
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fd4b 	bl	8005ea2 <I2C_Master_ADDR>
 800540c:	e06e      	b.n	80054ec <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d037      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005428:	f000 80ef 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00f      	beq.n	8005458 <HAL_I2C_EV_IRQHandler+0x11c>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	0a9b      	lsrs	r3, r3, #10
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_I2C_EV_IRQHandler+0x11c>
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	089b      	lsrs	r3, r3, #2
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f948 	bl	80056e6 <I2C_MasterTransmit_TXE>
 8005456:	e049      	b.n	80054ec <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80d2 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80cb 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b10      	cmp	r3, #16
 8005478:	d103      	bne.n	8005482 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9cf 	bl	800581e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005480:	e0c3      	b.n	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fa33 	bl	80058ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005488:	e0bf      	b.n	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005498:	f000 80b7 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	099b      	lsrs	r3, r3, #6
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00f      	beq.n	80054c8 <HAL_I2C_EV_IRQHandler+0x18c>
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	0a9b      	lsrs	r3, r3, #10
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d009      	beq.n	80054c8 <HAL_I2C_EV_IRQHandler+0x18c>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d103      	bne.n	80054c8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 faa3 	bl	8005a0c <I2C_MasterReceive_RXNE>
 80054c6:	e011      	b.n	80054ec <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 809a 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	0a5b      	lsrs	r3, r3, #9
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8093 	beq.w	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fb42 	bl	8005b6e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054ea:	e08e      	b.n	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
 80054ec:	e08d      	b.n	800560a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d004      	beq.n	8005500 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e007      	b.n	8005510 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d012      	beq.n	8005542 <HAL_I2C_EV_IRQHandler+0x206>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	0a5b      	lsrs	r3, r3, #9
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 ff00 	bl	8006340 <I2C_Slave_ADDR>
 8005540:	e066      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <HAL_I2C_EV_IRQHandler+0x226>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	0a5b      	lsrs	r3, r3, #9
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 ff34 	bl	80063c8 <I2C_Slave_STOPF>
 8005560:	e056      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	2b21      	cmp	r3, #33	; 0x21
 8005566:	d002      	beq.n	800556e <HAL_I2C_EV_IRQHandler+0x232>
 8005568:	7bbb      	ldrb	r3, [r7, #14]
 800556a:	2b29      	cmp	r3, #41	; 0x29
 800556c:	d125      	bne.n	80055ba <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	09db      	lsrs	r3, r3, #7
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x25e>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	0a9b      	lsrs	r3, r3, #10
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_I2C_EV_IRQHandler+0x25e>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	089b      	lsrs	r3, r3, #2
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fe16 	bl	80061c4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005598:	e039      	b.n	800560e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d033      	beq.n	800560e <HAL_I2C_EV_IRQHandler+0x2d2>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	0a5b      	lsrs	r3, r3, #9
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02d      	beq.n	800560e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fe43 	bl	800623e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055b8:	e029      	b.n	800560e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	099b      	lsrs	r3, r3, #6
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00f      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	0a9b      	lsrs	r3, r3, #10
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x2aa>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	089b      	lsrs	r3, r3, #2
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fe4e 	bl	8006280 <I2C_SlaveReceive_RXNE>
 80055e4:	e014      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00e      	beq.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	0a5b      	lsrs	r3, r3, #9
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fe7c 	bl	80062fc <I2C_SlaveReceive_BTF>
 8005604:	e004      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800560e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005666:	b480      	push	{r7}
 8005668:	b083      	sub	sp, #12
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
 8005672:	4613      	mov	r3, r2
 8005674:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056fc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005702:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	d150      	bne.n	80057ae <I2C_MasterTransmit_TXE+0xc8>
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b21      	cmp	r3, #33	; 0x21
 8005710:	d14d      	bne.n	80057ae <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b08      	cmp	r3, #8
 8005716:	d01d      	beq.n	8005754 <I2C_MasterTransmit_TXE+0x6e>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b20      	cmp	r3, #32
 800571c:	d01a      	beq.n	8005754 <I2C_MasterTransmit_TXE+0x6e>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005724:	d016      	beq.n	8005754 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005734:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2211      	movs	r2, #17
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ff62 	bl	8005616 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005752:	e060      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005762:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005772:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d107      	bne.n	800579e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ff7d 	bl	8005696 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800579c:	e03b      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff ff35 	bl	8005616 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ac:	e033      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b21      	cmp	r3, #33	; 0x21
 80057b2:	d005      	beq.n	80057c0 <I2C_MasterTransmit_TXE+0xda>
 80057b4:	7bbb      	ldrb	r3, [r7, #14]
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d12d      	bne.n	8005816 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b22      	cmp	r3, #34	; 0x22
 80057be:	d12a      	bne.n	8005816 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80057da:	e01c      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d103      	bne.n	80057f0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f880 	bl	80058ee <I2C_MemoryTransmit_TXE_BTF>
}
 80057ee:	e012      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005814:	e7ff      	b.n	8005816 <I2C_MasterTransmit_TXE+0x130>
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b21      	cmp	r3, #33	; 0x21
 8005836:	d156      	bne.n	80058e6 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005866:	e03e      	b.n	80058e6 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2b08      	cmp	r3, #8
 800586c:	d01d      	beq.n	80058aa <I2C_MasterTransmit_BTF+0x8c>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b20      	cmp	r3, #32
 8005872:	d01a      	beq.n	80058aa <I2C_MasterTransmit_BTF+0x8c>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800587a:	d016      	beq.n	80058aa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800588a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2211      	movs	r2, #17
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff feb7 	bl	8005616 <HAL_I2C_MasterTxCpltCallback>
}
 80058a8:	e01d      	b.n	80058e6 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058b8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f7ff fe98 	bl	8005616 <HAL_I2C_MasterTxCpltCallback>
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005902:	2b00      	cmp	r3, #0
 8005904:	d11d      	bne.n	8005942 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d10b      	bne.n	8005926 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	b2da      	uxtb	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	1c9a      	adds	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005924:	e06e      	b.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592a:	b29b      	uxth	r3, r3
 800592c:	121b      	asrs	r3, r3, #8
 800592e:	b2da      	uxtb	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005940:	e060      	b.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10b      	bne.n	8005962 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	b2da      	uxtb	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005960:	e050      	b.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005966:	2b02      	cmp	r3, #2
 8005968:	d14c      	bne.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	2b22      	cmp	r3, #34	; 0x22
 800596e:	d108      	bne.n	8005982 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	e040      	b.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d015      	beq.n	80059b8 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b21      	cmp	r3, #33	; 0x21
 8005990:	d112      	bne.n	80059b8 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059b6:	e025      	b.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d120      	bne.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b21      	cmp	r3, #33	; 0x21
 80059c6:	d11d      	bne.n	8005a04 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7ff fe49 	bl	8005696 <HAL_I2C_MemTxCpltCallback>
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b22      	cmp	r3, #34	; 0x22
 8005a1e:	f040 80a2 	bne.w	8005b66 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d921      	bls.n	8005a74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691a      	ldr	r2, [r3, #16]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	f040 8082 	bne.w	8005b66 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a70:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005a72:	e078      	b.n	8005b66 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d074      	beq.n	8005b66 <I2C_MasterReceive_RXNE+0x15a>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d002      	beq.n	8005a88 <I2C_MasterReceive_RXNE+0x7c>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d16e      	bne.n	8005b66 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fbcd 	bl	8007228 <I2C_WaitOnSTOPRequestThroughIT>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d142      	bne.n	8005b1a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ab2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d10a      	bne.n	8005b04 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fdd4 	bl	80056aa <HAL_I2C_MemRxCpltCallback>
}
 8005b02:	e030      	b.n	8005b66 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2212      	movs	r2, #18
 8005b10:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fd89 	bl	800562a <HAL_I2C_MasterRxCpltCallback>
}
 8005b18:	e025      	b.n	8005b66 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff fdac 	bl	80056be <HAL_I2C_ErrorCallback>
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d11b      	bne.n	8005bbe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b94:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005bbc:	e0bd      	b.n	8005d3a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d129      	bne.n	8005c1c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d00a      	beq.n	8005bf4 <I2C_MasterReceive_BTF+0x86>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d007      	beq.n	8005bf4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bf2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c1a:	e08e      	b.n	8005d3a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d176      	bne.n	8005d14 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d002      	beq.n	8005c32 <I2C_MasterReceive_BTF+0xc4>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d108      	bne.n	8005c44 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e019      	b.n	8005c78 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d002      	beq.n	8005c50 <I2C_MasterReceive_BTF+0xe2>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d108      	bne.n	8005c62 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e00a      	b.n	8005c78 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d007      	beq.n	8005c78 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c76:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005cd2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d10a      	bne.n	8005cfe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fcd7 	bl	80056aa <HAL_I2C_MemRxCpltCallback>
}
 8005cfc:	e01d      	b.n	8005d3a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2212      	movs	r2, #18
 8005d0a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff fc8c 	bl	800562a <HAL_I2C_MasterRxCpltCallback>
}
 8005d12:	e012      	b.n	8005d3a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d117      	bne.n	8005d86 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d6e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005d70:	e067      	b.n	8005e42 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]
}
 8005d84:	e05d      	b.n	8005e42 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d8e:	d133      	bne.n	8005df8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b21      	cmp	r3, #33	; 0x21
 8005d9a:	d109      	bne.n	8005db0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e008      	b.n	8005dc2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <I2C_Master_SB+0x92>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d032      	beq.n	8005e42 <I2C_Master_SB+0x100>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d02d      	beq.n	8005e42 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df4:	605a      	str	r2, [r3, #4]
}
 8005df6:	e024      	b.n	8005e42 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10e      	bne.n	8005e1e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	11db      	asrs	r3, r3, #7
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 0306 	and.w	r3, r3, #6
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f063 030f 	orn	r3, r3, #15
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]
}
 8005e1c:	e011      	b.n	8005e42 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d10d      	bne.n	8005e42 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	11db      	asrs	r3, r3, #7
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f003 0306 	and.w	r3, r3, #6
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	f063 030e 	orn	r3, r3, #14
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	611a      	str	r2, [r3, #16]
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d103      	bne.n	8005e72 <I2C_Master_ADD10+0x24>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d011      	beq.n	8005e96 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <I2C_Master_ADD10+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e94:	605a      	str	r2, [r3, #4]
    }
  }
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b091      	sub	sp, #68	; 0x44
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b22      	cmp	r3, #34	; 0x22
 8005eca:	f040 8169 	bne.w	80061a0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10f      	bne.n	8005ef6 <I2C_Master_ADDR+0x54>
 8005ed6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d10b      	bne.n	8005ef6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	e160      	b.n	80061b8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d11d      	bne.n	8005f3a <I2C_Master_ADDR+0x98>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f06:	d118      	bne.n	8005f3a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	651a      	str	r2, [r3, #80]	; 0x50
 8005f38:	e13e      	b.n	80061b8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d113      	bne.n	8005f6c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f44:	2300      	movs	r3, #0
 8005f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	e115      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	f040 808a 	bne.w	800608c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f7e:	d137      	bne.n	8005ff0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9e:	d113      	bne.n	8005fc8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fae:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	e0e7      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	623b      	str	r3, [r7, #32]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e0d3      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d02e      	beq.n	8006054 <I2C_Master_ADDR+0x1b2>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d02b      	beq.n	8006054 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d102      	bne.n	8006008 <I2C_Master_ADDR+0x166>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	2b01      	cmp	r3, #1
 8006006:	d125      	bne.n	8006054 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	2b04      	cmp	r3, #4
 800600c:	d00e      	beq.n	800602c <I2C_Master_ADDR+0x18a>
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	2b02      	cmp	r3, #2
 8006012:	d00b      	beq.n	800602c <I2C_Master_ADDR+0x18a>
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	2b10      	cmp	r3, #16
 8006018:	d008      	beq.n	800602c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e007      	b.n	800603c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800603a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	e0a1      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006062:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	e085      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d14d      	bne.n	8006132 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b04      	cmp	r3, #4
 800609a:	d016      	beq.n	80060ca <I2C_Master_ADDR+0x228>
 800609c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d013      	beq.n	80060ca <I2C_Master_ADDR+0x228>
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d010      	beq.n	80060ca <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e007      	b.n	80060da <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060d8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060e8:	d117      	bne.n	800611a <I2C_Master_ADDR+0x278>
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f0:	d00b      	beq.n	800610a <I2C_Master_ADDR+0x268>
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d008      	beq.n	800610a <I2C_Master_ADDR+0x268>
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2b08      	cmp	r3, #8
 80060fc:	d005      	beq.n	800610a <I2C_Master_ADDR+0x268>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	2b10      	cmp	r3, #16
 8006102:	d002      	beq.n	800610a <I2C_Master_ADDR+0x268>
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	2b20      	cmp	r3, #32
 8006108:	d107      	bne.n	800611a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006118:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	e032      	b.n	8006198 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006140:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800614c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006150:	d117      	bne.n	8006182 <I2C_Master_ADDR+0x2e0>
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006158:	d00b      	beq.n	8006172 <I2C_Master_ADDR+0x2d0>
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	2b01      	cmp	r3, #1
 800615e:	d008      	beq.n	8006172 <I2C_Master_ADDR+0x2d0>
 8006160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006162:	2b08      	cmp	r3, #8
 8006164:	d005      	beq.n	8006172 <I2C_Master_ADDR+0x2d0>
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	2b10      	cmp	r3, #16
 800616a:	d002      	beq.n	8006172 <I2C_Master_ADDR+0x2d0>
 800616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616e:	2b20      	cmp	r3, #32
 8006170:	d107      	bne.n	8006182 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006180:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800619e:	e00b      	b.n	80061b8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	e7ff      	b.n	80061b8 <I2C_Master_ADDR+0x316>
 80061b8:	bf00      	nop
 80061ba:	3744      	adds	r7, #68	; 0x44
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d02b      	beq.n	8006236 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d114      	bne.n	8006236 <I2C_SlaveTransmit_TXE+0x72>
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b29      	cmp	r3, #41	; 0x29
 8006210:	d111      	bne.n	8006236 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006220:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2221      	movs	r2, #33	; 0x21
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2228      	movs	r2, #40	; 0x28
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fa04 	bl	800563e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d011      	beq.n	8006274 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02c      	beq.n	80062f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d114      	bne.n	80062f4 <I2C_SlaveReceive_RXNE+0x74>
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2b2a      	cmp	r3, #42	; 0x2a
 80062ce:	d111      	bne.n	80062f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2222      	movs	r2, #34	; 0x22
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2228      	movs	r2, #40	; 0x28
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7ff f9af 	bl	8005652 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691a      	ldr	r2, [r3, #16]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800635a:	2b28      	cmp	r3, #40	; 0x28
 800635c:	d127      	bne.n	80063ae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800636c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	089b      	lsrs	r3, r3, #2
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800637a:	2301      	movs	r3, #1
 800637c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	09db      	lsrs	r3, r3, #7
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d103      	bne.n	8006392 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	81bb      	strh	r3, [r7, #12]
 8006390:	e002      	b.n	8006398 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80063a0:	89ba      	ldrh	r2, [r7, #12]
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff f95d 	bl	8005666 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063ac:	e008      	b.n	80063c0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f06f 0202 	mvn.w	r2, #2
 80063b6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80063e8:	2300      	movs	r3, #0
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 0201 	orr.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006414:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006424:	d172      	bne.n	800650c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	2b22      	cmp	r3, #34	; 0x22
 800642a:	d002      	beq.n	8006432 <I2C_Slave_STOPF+0x6a>
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b2a      	cmp	r3, #42	; 0x2a
 8006430:	d135      	bne.n	800649e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b29a      	uxth	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f043 0204 	orr.w	r2, r3, #4
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006464:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	4618      	mov	r0, r3
 800646c:	f7fd fc0c 	bl	8003c88 <HAL_DMA_GetState>
 8006470:	4603      	mov	r3, r0
 8006472:	2b01      	cmp	r3, #1
 8006474:	d049      	beq.n	800650a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	4a69      	ldr	r2, [pc, #420]	; (8006620 <I2C_Slave_STOPF+0x258>)
 800647c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	4618      	mov	r0, r3
 8006484:	f7fd fa54 	bl	8003930 <HAL_DMA_Abort_IT>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d03d      	beq.n	800650a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006498:	4610      	mov	r0, r2
 800649a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800649c:	e035      	b.n	800650a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f043 0204 	orr.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fd fbd6 	bl	8003c88 <HAL_DMA_GetState>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d014      	beq.n	800650c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e6:	4a4e      	ldr	r2, [pc, #312]	; (8006620 <I2C_Slave_STOPF+0x258>)
 80064e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fa1e 	bl	8003930 <HAL_DMA_Abort_IT>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d008      	beq.n	800650c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006504:	4610      	mov	r0, r2
 8006506:	4798      	blx	r3
 8006508:	e000      	b.n	800650c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800650a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03e      	beq.n	8006594 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b04      	cmp	r3, #4
 8006522:	d112      	bne.n	800654a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b40      	cmp	r3, #64	; 0x40
 8006556:	d112      	bne.n	800657e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d005      	beq.n	8006594 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0204 	orr.w	r2, r3, #4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f843 	bl	8006628 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80065a2:	e039      	b.n	8006618 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b2a      	cmp	r3, #42	; 0x2a
 80065a8:	d109      	bne.n	80065be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2228      	movs	r2, #40	; 0x28
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff f84a 	bl	8005652 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b28      	cmp	r3, #40	; 0x28
 80065c8:	d111      	bne.n	80065ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a15      	ldr	r2, [pc, #84]	; (8006624 <I2C_Slave_STOPF+0x25c>)
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff f84b 	bl	8005682 <HAL_I2C_ListenCpltCallback>
}
 80065ec:	e014      	b.n	8006618 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f2:	2b22      	cmp	r3, #34	; 0x22
 80065f4:	d002      	beq.n	80065fc <I2C_Slave_STOPF+0x234>
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b22      	cmp	r3, #34	; 0x22
 80065fa:	d10d      	bne.n	8006618 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff f81d 	bl	8005652 <HAL_I2C_SlaveRxCpltCallback>
}
 8006618:	bf00      	nop
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	08006e29 	.word	0x08006e29
 8006624:	ffff0000 	.word	0xffff0000

08006628 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006636:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800663e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b10      	cmp	r3, #16
 8006644:	d002      	beq.n	800664c <I2C_ITError+0x24>
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d10a      	bne.n	8006662 <I2C_ITError+0x3a>
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2b22      	cmp	r3, #34	; 0x22
 8006650:	d107      	bne.n	8006662 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006660:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006668:	2b28      	cmp	r3, #40	; 0x28
 800666a:	d107      	bne.n	800667c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2228      	movs	r2, #40	; 0x28
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800667a:	e015      	b.n	80066a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800668a:	d00a      	beq.n	80066a2 <I2C_ITError+0x7a>
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	2b60      	cmp	r3, #96	; 0x60
 8006690:	d007      	beq.n	80066a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b6:	d162      	bne.n	800677e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d020      	beq.n	8006718 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	4a6a      	ldr	r2, [pc, #424]	; (8006884 <I2C_ITError+0x25c>)
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd f924 	bl	8003930 <HAL_DMA_Abort_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8089 	beq.w	8006802 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006712:	4610      	mov	r0, r2
 8006714:	4798      	blx	r3
 8006716:	e074      	b.n	8006802 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	4a59      	ldr	r2, [pc, #356]	; (8006884 <I2C_ITError+0x25c>)
 800671e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	4618      	mov	r0, r3
 8006726:	f7fd f903 	bl	8003930 <HAL_DMA_Abort_IT>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d068      	beq.n	8006802 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d10b      	bne.n	8006756 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	b2d2      	uxtb	r2, r2
 800674a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	e041      	b.n	8006802 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b60      	cmp	r3, #96	; 0x60
 8006788:	d125      	bne.n	80067d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	d10b      	bne.n	80067be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0201 	bic.w	r2, r2, #1
 80067cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fe ff7f 	bl	80056d2 <HAL_I2C_AbortCpltCallback>
 80067d4:	e015      	b.n	8006802 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b40      	cmp	r3, #64	; 0x40
 80067e2:	d10b      	bne.n	80067fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe ff5e 	bl	80056be <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10e      	bne.n	8006830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006822:	2b00      	cmp	r3, #0
 8006824:	d104      	bne.n	8006830 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800683e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b04      	cmp	r3, #4
 8006852:	d113      	bne.n	800687c <I2C_ITError+0x254>
 8006854:	7bfb      	ldrb	r3, [r7, #15]
 8006856:	2b28      	cmp	r3, #40	; 0x28
 8006858:	d110      	bne.n	800687c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a0a      	ldr	r2, [pc, #40]	; (8006888 <I2C_ITError+0x260>)
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe ff03 	bl	8005682 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	08006e29 	.word	0x08006e29
 8006888:	ffff0000 	.word	0xffff0000

0800688c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	460b      	mov	r3, r1
 800689a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d006      	beq.n	80068b6 <I2C_MasterRequestWrite+0x2a>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d003      	beq.n	80068b6 <I2C_MasterRequestWrite+0x2a>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068b4:	d108      	bne.n	80068c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e00b      	b.n	80068e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068cc:	2b12      	cmp	r3, #18
 80068ce:	d107      	bne.n	80068e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 fb43 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00d      	beq.n	8006914 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	d103      	bne.n	8006910 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e035      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800691c:	d108      	bne.n	8006930 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800691e:	897b      	ldrh	r3, [r7, #10]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	461a      	mov	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800692c:	611a      	str	r2, [r3, #16]
 800692e:	e01b      	b.n	8006968 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	11db      	asrs	r3, r3, #7
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0306 	and.w	r3, r3, #6
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f063 030f 	orn	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	490e      	ldr	r1, [pc, #56]	; (8006988 <I2C_MasterRequestWrite+0xfc>)
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 fb69 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e010      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4907      	ldr	r1, [pc, #28]	; (800698c <I2C_MasterRequestWrite+0x100>)
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fb59 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	00010008 	.word	0x00010008
 800698c:	00010002 	.word	0x00010002

08006990 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	603b      	str	r3, [r7, #0]
 800699c:	460b      	mov	r3, r1
 800699e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d006      	beq.n	80069ca <I2C_MasterRequestRead+0x3a>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d003      	beq.n	80069ca <I2C_MasterRequestRead+0x3a>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069c8:	d108      	bne.n	80069dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e00b      	b.n	80069f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	2b11      	cmp	r3, #17
 80069e2:	d107      	bne.n	80069f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fab9 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00d      	beq.n	8006a28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d103      	bne.n	8006a24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e079      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a30:	d108      	bne.n	8006a44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a32:	897b      	ldrh	r3, [r7, #10]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f043 0301 	orr.w	r3, r3, #1
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	611a      	str	r2, [r3, #16]
 8006a42:	e05f      	b.n	8006b04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a44:	897b      	ldrh	r3, [r7, #10]
 8006a46:	11db      	asrs	r3, r3, #7
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	f003 0306 	and.w	r3, r3, #6
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f063 030f 	orn	r3, r3, #15
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	4930      	ldr	r1, [pc, #192]	; (8006b24 <I2C_MasterRequestRead+0x194>)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fadf 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e054      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006a72:	897b      	ldrh	r3, [r7, #10]
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	4929      	ldr	r1, [pc, #164]	; (8006b28 <I2C_MasterRequestRead+0x198>)
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 facf 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e044      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a92:	2300      	movs	r3, #0
 8006a94:	613b      	str	r3, [r7, #16]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ab6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fa57 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ade:	d103      	bne.n	8006ae8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e017      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006aec:	897b      	ldrh	r3, [r7, #10]
 8006aee:	11db      	asrs	r3, r3, #7
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 0306 	and.w	r3, r3, #6
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f063 030e 	orn	r3, r3, #14
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	4907      	ldr	r1, [pc, #28]	; (8006b28 <I2C_MasterRequestRead+0x198>)
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fa8b 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	00010008 	.word	0x00010008
 8006b28:	00010002 	.word	0x00010002

08006b2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	4608      	mov	r0, r1
 8006b36:	4611      	mov	r1, r2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	817b      	strh	r3, [r7, #10]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	813b      	strh	r3, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fa08 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7c:	d103      	bne.n	8006b86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e05f      	b.n	8006c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b8a:	897b      	ldrh	r3, [r7, #10]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	6a3a      	ldr	r2, [r7, #32]
 8006b9e:	492d      	ldr	r1, [pc, #180]	; (8006c54 <I2C_RequestMemoryWrite+0x128>)
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fa40 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e04c      	b.n	8006c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc8:	6a39      	ldr	r1, [r7, #32]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 faaa 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d107      	bne.n	8006bee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e02b      	b.n	8006c4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d105      	bne.n	8006c04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf8:	893b      	ldrh	r3, [r7, #8]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	611a      	str	r2, [r3, #16]
 8006c02:	e021      	b.n	8006c48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c04:	893b      	ldrh	r3, [r7, #8]
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	6a39      	ldr	r1, [r7, #32]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa84 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d107      	bne.n	8006c3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e005      	b.n	8006c4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3e:	893b      	ldrh	r3, [r7, #8]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	00010002 	.word	0x00010002

08006c58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	817b      	strh	r3, [r7, #10]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	813b      	strh	r3, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f96a 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb8:	d103      	bne.n	8006cc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e0aa      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cc6:	897b      	ldrh	r3, [r7, #10]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	4952      	ldr	r1, [pc, #328]	; (8006e24 <I2C_RequestMemoryRead+0x1cc>)
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f9a2 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e097      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cec:	2300      	movs	r3, #0
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d04:	6a39      	ldr	r1, [r7, #32]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fa0c 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d107      	bne.n	8006d2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e076      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d105      	bne.n	8006d40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d34:	893b      	ldrh	r3, [r7, #8]
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	611a      	str	r2, [r3, #16]
 8006d3e:	e021      	b.n	8006d84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d40:	893b      	ldrh	r3, [r7, #8]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d50:	6a39      	ldr	r1, [r7, #32]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 f9e6 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	2b04      	cmp	r3, #4
 8006d64:	d107      	bne.n	8006d76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e050      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d7a:	893b      	ldrh	r3, [r7, #8]
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	6a39      	ldr	r1, [r7, #32]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 f9cb 	bl	8007124 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00d      	beq.n	8006db0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d107      	bne.n	8006dac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006daa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e035      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f8d3 	bl	8006f78 <I2C_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d103      	bne.n	8006df0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e013      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006df4:	897b      	ldrh	r3, [r7, #10]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f043 0301 	orr.w	r3, r3, #1
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	6a3a      	ldr	r2, [r7, #32]
 8006e08:	4906      	ldr	r1, [pc, #24]	; (8006e24 <I2C_RequestMemoryRead+0x1cc>)
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f90b 	bl	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	00010002 	.word	0x00010002

08006e28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e42:	4b4b      	ldr	r3, [pc, #300]	; (8006f70 <I2C_DMAAbort+0x148>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	08db      	lsrs	r3, r3, #3
 8006e48:	4a4a      	ldr	r2, [pc, #296]	; (8006f74 <I2C_DMAAbort+0x14c>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	0a1a      	lsrs	r2, r3, #8
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	00da      	lsls	r2, r3, #3
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f043 0220 	orr.w	r2, r3, #32
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e6e:	e00a      	b.n	8006e86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e84:	d0ea      	beq.n	8006e5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d003      	beq.n	8006e96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e92:	2200      	movs	r2, #0
 8006e94:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec8:	2200      	movs	r2, #0
 8006eca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	2200      	movs	r2, #0
 8006eda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0201 	bic.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b60      	cmp	r3, #96	; 0x60
 8006ef6:	d10e      	bne.n	8006f16 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f0e:	6978      	ldr	r0, [r7, #20]
 8006f10:	f7fe fbdf 	bl	80056d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f14:	e027      	b.n	8006f66 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f16:	7cfb      	ldrb	r3, [r7, #19]
 8006f18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f1c:	2b28      	cmp	r3, #40	; 0x28
 8006f1e:	d117      	bne.n	8006f50 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2200      	movs	r2, #0
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2228      	movs	r2, #40	; 0x28
 8006f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f4e:	e007      	b.n	8006f60 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f60:	6978      	ldr	r0, [r7, #20]
 8006f62:	f7fe fbac 	bl	80056be <HAL_I2C_ErrorCallback>
}
 8006f66:	bf00      	nop
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000000 	.word	0x20000000
 8006f74:	14f8b589 	.word	0x14f8b589

08006f78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f88:	e025      	b.n	8006fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d021      	beq.n	8006fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f92:	f7fb fca5 	bl	80028e0 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d116      	bne.n	8006fd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e023      	b.n	800701e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10d      	bne.n	8006ffc <I2C_WaitOnFlagUntilTimeout+0x84>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	43da      	mvns	r2, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	4013      	ands	r3, r2
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	bf0c      	ite	eq
 8006ff2:	2301      	moveq	r3, #1
 8006ff4:	2300      	movne	r3, #0
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	e00c      	b.n	8007016 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	43da      	mvns	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4013      	ands	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	bf0c      	ite	eq
 800700e:	2301      	moveq	r3, #1
 8007010:	2300      	movne	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	429a      	cmp	r2, r3
 800701a:	d0b6      	beq.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007034:	e051      	b.n	80070da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d123      	bne.n	800708e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007054:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800705e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	f043 0204 	orr.w	r2, r3, #4
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e046      	b.n	800711c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d021      	beq.n	80070da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007096:	f7fb fc23 	bl	80028e0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d302      	bcc.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d116      	bne.n	80070da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f043 0220 	orr.w	r2, r3, #32
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e020      	b.n	800711c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d10c      	bne.n	80070fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	43da      	mvns	r2, r3
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	e00b      	b.n	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	43da      	mvns	r2, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4013      	ands	r3, r2
 800710a:	b29b      	uxth	r3, r3
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf14      	ite	ne
 8007110:	2301      	movne	r3, #1
 8007112:	2300      	moveq	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d18d      	bne.n	8007036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007130:	e02d      	b.n	800718e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f900 	bl	8007338 <I2C_IsAcknowledgeFailed>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e02d      	b.n	800719e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d021      	beq.n	800718e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714a:	f7fb fbc9 	bl	80028e0 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d116      	bne.n	800718e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e007      	b.n	800719e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	d1ca      	bne.n	8007132 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071b2:	e02d      	b.n	8007210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 f8bf 	bl	8007338 <I2C_IsAcknowledgeFailed>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e02d      	b.n	8007220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ca:	d021      	beq.n	8007210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071cc:	f7fb fb88 	bl	80028e0 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d302      	bcc.n	80071e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d116      	bne.n	8007210 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e007      	b.n	8007220 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b04      	cmp	r3, #4
 800721c:	d1ca      	bne.n	80071b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007234:	4b13      	ldr	r3, [pc, #76]	; (8007284 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	08db      	lsrs	r3, r3, #3
 800723a:	4a13      	ldr	r2, [pc, #76]	; (8007288 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800723c:	fba2 2303 	umull	r2, r3, r2, r3
 8007240:	0a1a      	lsrs	r2, r3, #8
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3b01      	subs	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d107      	bne.n	8007266 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f043 0220 	orr.w	r2, r3, #32
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e008      	b.n	8007278 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007274:	d0e9      	beq.n	800724a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	20000000 	.word	0x20000000
 8007288:	14f8b589 	.word	0x14f8b589

0800728c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007298:	e042      	b.n	8007320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b10      	cmp	r3, #16
 80072a6:	d119      	bne.n	80072dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0210 	mvn.w	r2, #16
 80072b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e029      	b.n	8007330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072dc:	f7fb fb00 	bl	80028e0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d302      	bcc.n	80072f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d116      	bne.n	8007320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	f043 0220 	orr.w	r2, r3, #32
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e007      	b.n	8007330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d1b5      	bne.n	800729a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734e:	d11b      	bne.n	8007388 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007358:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2220      	movs	r2, #32
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f043 0204 	orr.w	r2, r3, #4
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80073a6:	d103      	bne.n	80073b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80073ae:	e007      	b.n	80073c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80073b8:	d102      	bne.n	80073c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2208      	movs	r2, #8
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d129      	bne.n	8007436 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2224      	movs	r2, #36	; 0x24
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0201 	bic.w	r2, r2, #1
 80073f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0210 	bic.w	r2, r2, #16
 8007408:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	e000      	b.n	8007438 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007436:	2302      	movs	r3, #2
  }
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b20      	cmp	r3, #32
 800745c:	d12a      	bne.n	80074b4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2224      	movs	r2, #36	; 0x24
 8007462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0201 	bic.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	f023 030f 	bic.w	r3, r3, #15
 8007484:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	b29a      	uxth	r2, r3
 800748a:	89fb      	ldrh	r3, [r7, #14]
 800748c:	4313      	orrs	r3, r2
 800748e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	89fa      	ldrh	r2, [r7, #14]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0201 	orr.w	r2, r2, #1
 80074a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2220      	movs	r2, #32
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e000      	b.n	80074b6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80074ce:	2300      	movs	r3, #0
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	4b20      	ldr	r3, [pc, #128]	; (8007554 <HAL_PWREx_EnableOverDrive+0x90>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	4a1f      	ldr	r2, [pc, #124]	; (8007554 <HAL_PWREx_EnableOverDrive+0x90>)
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6413      	str	r3, [r2, #64]	; 0x40
 80074de:	4b1d      	ldr	r3, [pc, #116]	; (8007554 <HAL_PWREx_EnableOverDrive+0x90>)
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074ea:	4b1b      	ldr	r3, [pc, #108]	; (8007558 <HAL_PWREx_EnableOverDrive+0x94>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f0:	f7fb f9f6 	bl	80028e0 <HAL_GetTick>
 80074f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074f6:	e009      	b.n	800750c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074f8:	f7fb f9f2 	bl	80028e0 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007506:	d901      	bls.n	800750c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e01f      	b.n	800754c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800750c:	4b13      	ldr	r3, [pc, #76]	; (800755c <HAL_PWREx_EnableOverDrive+0x98>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007518:	d1ee      	bne.n	80074f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800751a:	4b11      	ldr	r3, [pc, #68]	; (8007560 <HAL_PWREx_EnableOverDrive+0x9c>)
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007520:	f7fb f9de 	bl	80028e0 <HAL_GetTick>
 8007524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007526:	e009      	b.n	800753c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007528:	f7fb f9da 	bl	80028e0 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007536:	d901      	bls.n	800753c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e007      	b.n	800754c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <HAL_PWREx_EnableOverDrive+0x98>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007548:	d1ee      	bne.n	8007528 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40023800 	.word	0x40023800
 8007558:	420e0040 	.word	0x420e0040
 800755c:	40007000 	.word	0x40007000
 8007560:	420e0044 	.word	0x420e0044

08007564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e25b      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d075      	beq.n	800766e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007582:	4ba3      	ldr	r3, [pc, #652]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b04      	cmp	r3, #4
 800758c:	d00c      	beq.n	80075a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800758e:	4ba0      	ldr	r3, [pc, #640]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007596:	2b08      	cmp	r3, #8
 8007598:	d112      	bne.n	80075c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800759a:	4b9d      	ldr	r3, [pc, #628]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075a6:	d10b      	bne.n	80075c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075a8:	4b99      	ldr	r3, [pc, #612]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d05b      	beq.n	800766c <HAL_RCC_OscConfig+0x108>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d157      	bne.n	800766c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e236      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075c8:	d106      	bne.n	80075d8 <HAL_RCC_OscConfig+0x74>
 80075ca:	4b91      	ldr	r3, [pc, #580]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a90      	ldr	r2, [pc, #576]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e01d      	b.n	8007614 <HAL_RCC_OscConfig+0xb0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075e0:	d10c      	bne.n	80075fc <HAL_RCC_OscConfig+0x98>
 80075e2:	4b8b      	ldr	r3, [pc, #556]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a8a      	ldr	r2, [pc, #552]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4b88      	ldr	r3, [pc, #544]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a87      	ldr	r2, [pc, #540]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	e00b      	b.n	8007614 <HAL_RCC_OscConfig+0xb0>
 80075fc:	4b84      	ldr	r3, [pc, #528]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a83      	ldr	r2, [pc, #524]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	4b81      	ldr	r3, [pc, #516]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a80      	ldr	r2, [pc, #512]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 800760e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d013      	beq.n	8007644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761c:	f7fb f960 	bl	80028e0 <HAL_GetTick>
 8007620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007624:	f7fb f95c 	bl	80028e0 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b64      	cmp	r3, #100	; 0x64
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e1fb      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	4b76      	ldr	r3, [pc, #472]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f0      	beq.n	8007624 <HAL_RCC_OscConfig+0xc0>
 8007642:	e014      	b.n	800766e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007644:	f7fb f94c 	bl	80028e0 <HAL_GetTick>
 8007648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764a:	e008      	b.n	800765e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800764c:	f7fb f948 	bl	80028e0 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b64      	cmp	r3, #100	; 0x64
 8007658:	d901      	bls.n	800765e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e1e7      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800765e:	4b6c      	ldr	r3, [pc, #432]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1f0      	bne.n	800764c <HAL_RCC_OscConfig+0xe8>
 800766a:	e000      	b.n	800766e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800766c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d063      	beq.n	8007742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800767a:	4b65      	ldr	r3, [pc, #404]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007686:	4b62      	ldr	r3, [pc, #392]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800768e:	2b08      	cmp	r3, #8
 8007690:	d11c      	bne.n	80076cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007692:	4b5f      	ldr	r3, [pc, #380]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d116      	bne.n	80076cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769e:	4b5c      	ldr	r3, [pc, #368]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d005      	beq.n	80076b6 <HAL_RCC_OscConfig+0x152>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d001      	beq.n	80076b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e1bb      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b6:	4b56      	ldr	r3, [pc, #344]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4952      	ldr	r1, [pc, #328]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ca:	e03a      	b.n	8007742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d020      	beq.n	8007716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d4:	4b4f      	ldr	r3, [pc, #316]	; (8007814 <HAL_RCC_OscConfig+0x2b0>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076da:	f7fb f901 	bl	80028e0 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076e2:	f7fb f8fd 	bl	80028e0 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e19c      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f4:	4b46      	ldr	r3, [pc, #280]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0f0      	beq.n	80076e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007700:	4b43      	ldr	r3, [pc, #268]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	4940      	ldr	r1, [pc, #256]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]
 8007714:	e015      	b.n	8007742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007716:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <HAL_RCC_OscConfig+0x2b0>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fb f8e0 	bl	80028e0 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007724:	f7fb f8dc 	bl	80028e0 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e17b      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007736:	4b36      	ldr	r3, [pc, #216]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d030      	beq.n	80077b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007756:	4b30      	ldr	r3, [pc, #192]	; (8007818 <HAL_RCC_OscConfig+0x2b4>)
 8007758:	2201      	movs	r2, #1
 800775a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775c:	f7fb f8c0 	bl	80028e0 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007764:	f7fb f8bc 	bl	80028e0 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e15b      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007776:	4b26      	ldr	r3, [pc, #152]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 8007778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0f0      	beq.n	8007764 <HAL_RCC_OscConfig+0x200>
 8007782:	e015      	b.n	80077b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007784:	4b24      	ldr	r3, [pc, #144]	; (8007818 <HAL_RCC_OscConfig+0x2b4>)
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800778a:	f7fb f8a9 	bl	80028e0 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007792:	f7fb f8a5 	bl	80028e0 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e144      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a4:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80077a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f0      	bne.n	8007792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a0 	beq.w	80078fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077c2:	4b13      	ldr	r3, [pc, #76]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10f      	bne.n	80077ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	4a0e      	ldr	r2, [pc, #56]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6413      	str	r3, [r2, #64]	; 0x40
 80077de:	4b0c      	ldr	r3, [pc, #48]	; (8007810 <HAL_RCC_OscConfig+0x2ac>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_RCC_OscConfig+0x2b8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d121      	bne.n	800783e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077fa:	4b08      	ldr	r3, [pc, #32]	; (800781c <HAL_RCC_OscConfig+0x2b8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a07      	ldr	r2, [pc, #28]	; (800781c <HAL_RCC_OscConfig+0x2b8>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007806:	f7fb f86b 	bl	80028e0 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780c:	e011      	b.n	8007832 <HAL_RCC_OscConfig+0x2ce>
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800
 8007814:	42470000 	.word	0x42470000
 8007818:	42470e80 	.word	0x42470e80
 800781c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007820:	f7fb f85e 	bl	80028e0 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b02      	cmp	r3, #2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e0fd      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007832:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_OscConfig+0x4d4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0f0      	beq.n	8007820 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d106      	bne.n	8007854 <HAL_RCC_OscConfig+0x2f0>
 8007846:	4b7d      	ldr	r3, [pc, #500]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	6713      	str	r3, [r2, #112]	; 0x70
 8007852:	e01c      	b.n	800788e <HAL_RCC_OscConfig+0x32a>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b05      	cmp	r3, #5
 800785a:	d10c      	bne.n	8007876 <HAL_RCC_OscConfig+0x312>
 800785c:	4b77      	ldr	r3, [pc, #476]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a76      	ldr	r2, [pc, #472]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007862:	f043 0304 	orr.w	r3, r3, #4
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	4b74      	ldr	r3, [pc, #464]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786c:	4a73      	ldr	r2, [pc, #460]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	6713      	str	r3, [r2, #112]	; 0x70
 8007874:	e00b      	b.n	800788e <HAL_RCC_OscConfig+0x32a>
 8007876:	4b71      	ldr	r3, [pc, #452]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	4a70      	ldr	r2, [pc, #448]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	6713      	str	r3, [r2, #112]	; 0x70
 8007882:	4b6e      	ldr	r3, [pc, #440]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	4a6d      	ldr	r2, [pc, #436]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007888:	f023 0304 	bic.w	r3, r3, #4
 800788c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d015      	beq.n	80078c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007896:	f7fb f823 	bl	80028e0 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fb f81f 	bl	80028e0 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0bc      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b4:	4b61      	ldr	r3, [pc, #388]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0ee      	beq.n	800789e <HAL_RCC_OscConfig+0x33a>
 80078c0:	e014      	b.n	80078ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c2:	f7fb f80d 	bl	80028e0 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078ca:	f7fb f809 	bl	80028e0 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0a6      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e0:	4b56      	ldr	r3, [pc, #344]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1ee      	bne.n	80078ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d105      	bne.n	80078fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f2:	4b52      	ldr	r3, [pc, #328]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	4a51      	ldr	r2, [pc, #324]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80078f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8092 	beq.w	8007a2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007908:	4b4c      	ldr	r3, [pc, #304]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 030c 	and.w	r3, r3, #12
 8007910:	2b08      	cmp	r3, #8
 8007912:	d05c      	beq.n	80079ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b02      	cmp	r3, #2
 800791a:	d141      	bne.n	80079a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800791c:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <HAL_RCC_OscConfig+0x4dc>)
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007922:	f7fa ffdd 	bl	80028e0 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800792a:	f7fa ffd9 	bl	80028e0 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e078      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	69da      	ldr	r2, [r3, #28]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007956:	019b      	lsls	r3, r3, #6
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	3b01      	subs	r3, #1
 8007962:	041b      	lsls	r3, r3, #16
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	061b      	lsls	r3, r3, #24
 800796c:	4933      	ldr	r1, [pc, #204]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007972:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <HAL_RCC_OscConfig+0x4dc>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007978:	f7fa ffb2 	bl	80028e0 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007980:	f7fa ffae 	bl	80028e0 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e04d      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007992:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x41c>
 800799e:	e045      	b.n	8007a2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <HAL_RCC_OscConfig+0x4dc>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a6:	f7fa ff9b 	bl	80028e0 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ac:	e008      	b.n	80079c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ae:	f7fa ff97 	bl	80028e0 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e036      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c0:	4b1e      	ldr	r3, [pc, #120]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f0      	bne.n	80079ae <HAL_RCC_OscConfig+0x44a>
 80079cc:	e02e      	b.n	8007a2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e029      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079da:	4b18      	ldr	r3, [pc, #96]	; (8007a3c <HAL_RCC_OscConfig+0x4d8>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d11c      	bne.n	8007a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d115      	bne.n	8007a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a02:	4013      	ands	r3, r2
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d10d      	bne.n	8007a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d106      	bne.n	8007a28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40007000 	.word	0x40007000
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	42470060 	.word	0x42470060

08007a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0cc      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a58:	4b68      	ldr	r3, [pc, #416]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d90c      	bls.n	8007a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a66:	4b65      	ldr	r3, [pc, #404]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6e:	4b63      	ldr	r3, [pc, #396]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e0b8      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d020      	beq.n	8007ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a98:	4b59      	ldr	r3, [pc, #356]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	4a58      	ldr	r2, [pc, #352]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ab0:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	4a52      	ldr	r2, [pc, #328]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007abc:	4b50      	ldr	r3, [pc, #320]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	494d      	ldr	r1, [pc, #308]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d044      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d107      	bne.n	8007af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ae2:	4b47      	ldr	r3, [pc, #284]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d119      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e07f      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d003      	beq.n	8007b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d107      	bne.n	8007b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b02:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e06f      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b12:	4b3b      	ldr	r3, [pc, #236]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e067      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b22:	4b37      	ldr	r3, [pc, #220]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f023 0203 	bic.w	r2, r3, #3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4934      	ldr	r1, [pc, #208]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b34:	f7fa fed4 	bl	80028e0 <HAL_GetTick>
 8007b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b3a:	e00a      	b.n	8007b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b3c:	f7fa fed0 	bl	80028e0 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e04f      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b52:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 020c 	and.w	r2, r3, #12
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d1eb      	bne.n	8007b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b64:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d20c      	bcs.n	8007b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b72:	4b22      	ldr	r3, [pc, #136]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7a:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 030f 	and.w	r3, r3, #15
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d001      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e032      	b.n	8007bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b98:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4916      	ldr	r1, [pc, #88]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	490e      	ldr	r1, [pc, #56]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bca:	f000 f821 	bl	8007c10 <HAL_RCC_GetSysClockFreq>
 8007bce:	4601      	mov	r1, r0
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	091b      	lsrs	r3, r3, #4
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <HAL_RCC_ClockConfig+0x1c0>)
 8007bdc:	5cd3      	ldrb	r3, [r2, r3]
 8007bde:	fa21 f303 	lsr.w	r3, r1, r3
 8007be2:	4a09      	ldr	r2, [pc, #36]	; (8007c08 <HAL_RCC_ClockConfig+0x1c4>)
 8007be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007be6:	4b09      	ldr	r3, [pc, #36]	; (8007c0c <HAL_RCC_ClockConfig+0x1c8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fa fd2a 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40023c00 	.word	0x40023c00
 8007c00:	40023800 	.word	0x40023800
 8007c04:	0800c1a0 	.word	0x0800c1a0
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	20000004 	.word	0x20000004

08007c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c26:	4b50      	ldr	r3, [pc, #320]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 030c 	and.w	r3, r3, #12
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d007      	beq.n	8007c42 <HAL_RCC_GetSysClockFreq+0x32>
 8007c32:	2b08      	cmp	r3, #8
 8007c34:	d008      	beq.n	8007c48 <HAL_RCC_GetSysClockFreq+0x38>
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 808d 	bne.w	8007d56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c3c:	4b4b      	ldr	r3, [pc, #300]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007c3e:	60bb      	str	r3, [r7, #8]
       break;
 8007c40:	e08c      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c42:	4b4b      	ldr	r3, [pc, #300]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c44:	60bb      	str	r3, [r7, #8]
      break;
 8007c46:	e089      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c48:	4b47      	ldr	r3, [pc, #284]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c52:	4b45      	ldr	r3, [pc, #276]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d023      	beq.n	8007ca6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c5e:	4b42      	ldr	r3, [pc, #264]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	099b      	lsrs	r3, r3, #6
 8007c64:	f04f 0400 	mov.w	r4, #0
 8007c68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	ea03 0501 	and.w	r5, r3, r1
 8007c74:	ea04 0602 	and.w	r6, r4, r2
 8007c78:	4a3d      	ldr	r2, [pc, #244]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c7a:	fb02 f106 	mul.w	r1, r2, r6
 8007c7e:	2200      	movs	r2, #0
 8007c80:	fb02 f205 	mul.w	r2, r2, r5
 8007c84:	440a      	add	r2, r1
 8007c86:	493a      	ldr	r1, [pc, #232]	; (8007d70 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c88:	fba5 0101 	umull	r0, r1, r5, r1
 8007c8c:	1853      	adds	r3, r2, r1
 8007c8e:	4619      	mov	r1, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	461a      	mov	r2, r3
 8007c98:	4623      	mov	r3, r4
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_uldivmod>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e049      	b.n	8007d3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca6:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	099b      	lsrs	r3, r3, #6
 8007cac:	f04f 0400 	mov.w	r4, #0
 8007cb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	ea03 0501 	and.w	r5, r3, r1
 8007cbc:	ea04 0602 	and.w	r6, r4, r2
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4632      	mov	r2, r6
 8007cc4:	f04f 0300 	mov.w	r3, #0
 8007cc8:	f04f 0400 	mov.w	r4, #0
 8007ccc:	0154      	lsls	r4, r2, #5
 8007cce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007cd2:	014b      	lsls	r3, r1, #5
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	1b49      	subs	r1, r1, r5
 8007cda:	eb62 0206 	sbc.w	r2, r2, r6
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	f04f 0400 	mov.w	r4, #0
 8007ce6:	0194      	lsls	r4, r2, #6
 8007ce8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007cec:	018b      	lsls	r3, r1, #6
 8007cee:	1a5b      	subs	r3, r3, r1
 8007cf0:	eb64 0402 	sbc.w	r4, r4, r2
 8007cf4:	f04f 0100 	mov.w	r1, #0
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	00e2      	lsls	r2, r4, #3
 8007cfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d02:	00d9      	lsls	r1, r3, #3
 8007d04:	460b      	mov	r3, r1
 8007d06:	4614      	mov	r4, r2
 8007d08:	195b      	adds	r3, r3, r5
 8007d0a:	eb44 0406 	adc.w	r4, r4, r6
 8007d0e:	f04f 0100 	mov.w	r1, #0
 8007d12:	f04f 0200 	mov.w	r2, #0
 8007d16:	02a2      	lsls	r2, r4, #10
 8007d18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d1c:	0299      	lsls	r1, r3, #10
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4614      	mov	r4, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	4621      	mov	r1, r4
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f04f 0400 	mov.w	r4, #0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4623      	mov	r3, r4
 8007d30:	f7f8 fed4 	bl	8000adc <__aeabi_uldivmod>
 8007d34:	4603      	mov	r3, r0
 8007d36:	460c      	mov	r4, r1
 8007d38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	3301      	adds	r3, #1
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d52:	60bb      	str	r3, [r7, #8]
      break;
 8007d54:	e002      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d58:	60bb      	str	r3, [r7, #8]
      break;
 8007d5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	00f42400 	.word	0x00f42400
 8007d70:	017d7840 	.word	0x017d7840

08007d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d78:	4b03      	ldr	r3, [pc, #12]	; (8007d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	20000000 	.word	0x20000000

08007d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d90:	f7ff fff0 	bl	8007d74 <HAL_RCC_GetHCLKFreq>
 8007d94:	4601      	mov	r1, r0
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	0a9b      	lsrs	r3, r3, #10
 8007d9c:	f003 0307 	and.w	r3, r3, #7
 8007da0:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007da2:	5cd3      	ldrb	r3, [r2, r3]
 8007da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	40023800 	.word	0x40023800
 8007db0:	0800c1b0 	.word	0x0800c1b0

08007db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007db8:	f7ff ffdc 	bl	8007d74 <HAL_RCC_GetHCLKFreq>
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	0b5b      	lsrs	r3, r3, #13
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4a03      	ldr	r2, [pc, #12]	; (8007dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dca:	5cd3      	ldrb	r3, [r2, r3]
 8007dcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	0800c1b0 	.word	0x0800c1b0

08007ddc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	220f      	movs	r2, #15
 8007dea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007dec:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <HAL_RCC_GetClockConfig+0x5c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 0203 	and.w	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007df8:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <HAL_RCC_GetClockConfig+0x5c>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <HAL_RCC_GetClockConfig+0x5c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007e10:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_RCC_GetClockConfig+0x5c>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	08db      	lsrs	r3, r3, #3
 8007e16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e1e:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <HAL_RCC_GetClockConfig+0x60>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	601a      	str	r2, [r3, #0]
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	40023c00 	.word	0x40023c00

08007e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e01d      	b.n	8007e8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f815 	bl	8007e96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f000 f968 	bl	8008154 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0201 	orr.w	r2, r2, #1
 8007ec0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f003 0307 	and.w	r3, r3, #7
 8007ecc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b06      	cmp	r3, #6
 8007ed2:	d007      	beq.n	8007ee4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d122      	bne.n	8007f4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0302 	and.w	r3, r3, #2
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d11b      	bne.n	8007f4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f06f 0202 	mvn.w	r2, #2
 8007f1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8ee 	bl	8008116 <HAL_TIM_IC_CaptureCallback>
 8007f3a:	e005      	b.n	8007f48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f8e0 	bl	8008102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8f1 	bl	800812a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d122      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d11b      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f06f 0204 	mvn.w	r2, #4
 8007f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8c4 	bl	8008116 <HAL_TIM_IC_CaptureCallback>
 8007f8e:	e005      	b.n	8007f9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f8b6 	bl	8008102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f8c7 	bl	800812a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d122      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d11b      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f06f 0208 	mvn.w	r2, #8
 8007fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2204      	movs	r2, #4
 8007fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f003 0303 	and.w	r3, r3, #3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f89a 	bl	8008116 <HAL_TIM_IC_CaptureCallback>
 8007fe2:	e005      	b.n	8007ff0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f88c 	bl	8008102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f89d 	bl	800812a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b10      	cmp	r3, #16
 8008002:	d122      	bne.n	800804a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f003 0310 	and.w	r3, r3, #16
 800800e:	2b10      	cmp	r3, #16
 8008010:	d11b      	bne.n	800804a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f06f 0210 	mvn.w	r2, #16
 800801a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2208      	movs	r2, #8
 8008020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802c:	2b00      	cmp	r3, #0
 800802e:	d003      	beq.n	8008038 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f870 	bl	8008116 <HAL_TIM_IC_CaptureCallback>
 8008036:	e005      	b.n	8008044 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f862 	bl	8008102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f873 	bl	800812a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10e      	bne.n	8008076 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f06f 0201 	mvn.w	r2, #1
 800806e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fa f94f 	bl	8002314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d10e      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808e:	2b80      	cmp	r3, #128	; 0x80
 8008090:	d107      	bne.n	80080a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800809a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f903 	bl	80082a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d10e      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ba:	2b40      	cmp	r3, #64	; 0x40
 80080bc:	d107      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 f838 	bl	800813e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d10e      	bne.n	80080fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f06f 0220 	mvn.w	r2, #32
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f8cd 	bl	8008294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008116:	b480      	push	{r7}
 8008118:	b083      	sub	sp, #12
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a40      	ldr	r2, [pc, #256]	; (8008268 <TIM_Base_SetConfig+0x114>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008172:	d00f      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a3d      	ldr	r2, [pc, #244]	; (800826c <TIM_Base_SetConfig+0x118>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00b      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a3c      	ldr	r2, [pc, #240]	; (8008270 <TIM_Base_SetConfig+0x11c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d007      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a3b      	ldr	r2, [pc, #236]	; (8008274 <TIM_Base_SetConfig+0x120>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d003      	beq.n	8008194 <TIM_Base_SetConfig+0x40>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a3a      	ldr	r2, [pc, #232]	; (8008278 <TIM_Base_SetConfig+0x124>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a2f      	ldr	r2, [pc, #188]	; (8008268 <TIM_Base_SetConfig+0x114>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b4:	d027      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a2c      	ldr	r2, [pc, #176]	; (800826c <TIM_Base_SetConfig+0x118>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d023      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a2b      	ldr	r2, [pc, #172]	; (8008270 <TIM_Base_SetConfig+0x11c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01f      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a2a      	ldr	r2, [pc, #168]	; (8008274 <TIM_Base_SetConfig+0x120>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d01b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a29      	ldr	r2, [pc, #164]	; (8008278 <TIM_Base_SetConfig+0x124>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d017      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a28      	ldr	r2, [pc, #160]	; (800827c <TIM_Base_SetConfig+0x128>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a27      	ldr	r2, [pc, #156]	; (8008280 <TIM_Base_SetConfig+0x12c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d00f      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a26      	ldr	r2, [pc, #152]	; (8008284 <TIM_Base_SetConfig+0x130>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00b      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a25      	ldr	r2, [pc, #148]	; (8008288 <TIM_Base_SetConfig+0x134>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a24      	ldr	r2, [pc, #144]	; (800828c <TIM_Base_SetConfig+0x138>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_Base_SetConfig+0xb2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a23      	ldr	r2, [pc, #140]	; (8008290 <TIM_Base_SetConfig+0x13c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d108      	bne.n	8008218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800820c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	4313      	orrs	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	4313      	orrs	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689a      	ldr	r2, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a0a      	ldr	r2, [pc, #40]	; (8008268 <TIM_Base_SetConfig+0x114>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_Base_SetConfig+0xf8>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a0c      	ldr	r2, [pc, #48]	; (8008278 <TIM_Base_SetConfig+0x124>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d103      	bne.n	8008254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	615a      	str	r2, [r3, #20]
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40010400 	.word	0x40010400
 800827c:	40014000 	.word	0x40014000
 8008280:	40014400 	.word	0x40014400
 8008284:	40014800 	.word	0x40014800
 8008288:	40001800 	.word	0x40001800
 800828c:	40001c00 	.word	0x40001c00
 8008290:	40002000 	.word	0x40002000

08008294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e03f      	b.n	800834e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d106      	bne.n	80082e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fa f95e 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2224      	movs	r2, #36	; 0x24
 80082ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fb4b 	bl	800899c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695a      	ldr	r2, [r3, #20]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b088      	sub	sp, #32
 800835a:	af02      	add	r7, sp, #8
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	603b      	str	r3, [r7, #0]
 8008362:	4613      	mov	r3, r2
 8008364:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b20      	cmp	r3, #32
 8008374:	f040 8083 	bne.w	800847e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_UART_Transmit+0x2e>
 800837e:	88fb      	ldrh	r3, [r7, #6]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e07b      	b.n	8008480 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800838e:	2b01      	cmp	r3, #1
 8008390:	d101      	bne.n	8008396 <HAL_UART_Transmit+0x40>
 8008392:	2302      	movs	r3, #2
 8008394:	e074      	b.n	8008480 <HAL_UART_Transmit+0x12a>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2221      	movs	r2, #33	; 0x21
 80083a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80083ac:	f7fa fa98 	bl	80028e0 <HAL_GetTick>
 80083b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80083c6:	e042      	b.n	800844e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083de:	d122      	bne.n	8008426 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	2180      	movs	r1, #128	; 0x80
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f96a 	bl	80086c4 <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e042      	b.n	8008480 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	881b      	ldrh	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800840c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	3302      	adds	r3, #2
 800841a:	60bb      	str	r3, [r7, #8]
 800841c:	e017      	b.n	800844e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3301      	adds	r3, #1
 8008422:	60bb      	str	r3, [r7, #8]
 8008424:	e013      	b.n	800844e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2200      	movs	r2, #0
 800842e:	2180      	movs	r1, #128	; 0x80
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 f947 	bl	80086c4 <UART_WaitOnFlagUntilTimeout>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e01f      	b.n	8008480 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	60ba      	str	r2, [r7, #8]
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008452:	b29b      	uxth	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1b7      	bne.n	80083c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2200      	movs	r2, #0
 8008460:	2140      	movs	r1, #64	; 0x40
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f92e 	bl	80086c4 <UART_WaitOnFlagUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e006      	b.n	8008480 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	e000      	b.n	8008480 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800847e:	2302      	movs	r3, #2
  }
}
 8008480:	4618      	mov	r0, r3
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
 80084a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d10d      	bne.n	80084da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <HAL_UART_IRQHandler+0x52>
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f003 0320 	and.w	r3, r3, #32
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9e0 	bl	8008898 <UART_Receive_IT>
      return;
 80084d8:	e0d1      	b.n	800867e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 80b0 	beq.w	8008642 <HAL_UART_IRQHandler+0x1ba>
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <HAL_UART_IRQHandler+0x70>
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 80a5 	beq.w	8008642 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <HAL_UART_IRQHandler+0x90>
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	f043 0201 	orr.w	r2, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <HAL_UART_IRQHandler+0xb0>
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	f043 0202 	orr.w	r2, r3, #2
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <HAL_UART_IRQHandler+0xd0>
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	f043 0204 	orr.w	r2, r3, #4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	f003 0308 	and.w	r3, r3, #8
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00f      	beq.n	8008582 <HAL_UART_IRQHandler+0xfa>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d104      	bne.n	8008576 <HAL_UART_IRQHandler+0xee>
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	f043 0208 	orr.w	r2, r3, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d078      	beq.n	800867c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d007      	beq.n	80085a4 <HAL_UART_IRQHandler+0x11c>
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	f003 0320 	and.w	r3, r3, #32
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f97a 	bl	8008898 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	bf0c      	ite	eq
 80085b2:	2301      	moveq	r3, #1
 80085b4:	2300      	movne	r3, #0
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	f003 0308 	and.w	r3, r3, #8
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <HAL_UART_IRQHandler+0x144>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d031      	beq.n	8008630 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f8c3 	bl	8008758 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085dc:	2b40      	cmp	r3, #64	; 0x40
 80085de:	d123      	bne.n	8008628 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695a      	ldr	r2, [r3, #20]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d013      	beq.n	8008620 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	4a21      	ldr	r2, [pc, #132]	; (8008684 <HAL_UART_IRQHandler+0x1fc>)
 80085fe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	4618      	mov	r0, r3
 8008606:	f7fb f993 	bl	8003930 <HAL_DMA_Abort_IT>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d016      	beq.n	800863e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800861a:	4610      	mov	r0, r2
 800861c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861e:	e00e      	b.n	800863e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f845 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008626:	e00a      	b.n	800863e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f841 	bl	80086b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	e006      	b.n	800863e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f83d 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800863c:	e01e      	b.n	800867c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863e:	bf00      	nop
    return;
 8008640:	e01c      	b.n	800867c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008648:	2b00      	cmp	r3, #0
 800864a:	d008      	beq.n	800865e <HAL_UART_IRQHandler+0x1d6>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f8b0 	bl	80087bc <UART_Transmit_IT>
    return;
 800865c:	e00f      	b.n	800867e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00a      	beq.n	800867e <HAL_UART_IRQHandler+0x1f6>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d005      	beq.n	800867e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8f8 	bl	8008868 <UART_EndTransmit_IT>
    return;
 8008678:	bf00      	nop
 800867a:	e000      	b.n	800867e <HAL_UART_IRQHandler+0x1f6>
    return;
 800867c:	bf00      	nop
  }
}
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	08008795 	.word	0x08008795

08008688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	603b      	str	r3, [r7, #0]
 80086d0:	4613      	mov	r3, r2
 80086d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d4:	e02c      	b.n	8008730 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086dc:	d028      	beq.n	8008730 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80086e4:	f7fa f8fc 	bl	80028e0 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d21d      	bcs.n	8008730 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68da      	ldr	r2, [r3, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008702:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695a      	ldr	r2, [r3, #20]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f022 0201 	bic.w	r2, r2, #1
 8008712:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2220      	movs	r2, #32
 8008718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e00f      	b.n	8008750 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4013      	ands	r3, r2
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	429a      	cmp	r2, r3
 800873e:	bf0c      	ite	eq
 8008740:	2301      	moveq	r3, #1
 8008742:	2300      	movne	r3, #0
 8008744:	b2db      	uxtb	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	79fb      	ldrb	r3, [r7, #7]
 800874a:	429a      	cmp	r2, r3
 800874c:	d0c3      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800876e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695a      	ldr	r2, [r3, #20]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0201 	bic.w	r2, r2, #1
 800877e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff7e 	bl	80086b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087b4:	bf00      	nop
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b21      	cmp	r3, #33	; 0x21
 80087ce:	d144      	bne.n	800885a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d8:	d11a      	bne.n	8008810 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ee:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	1c9a      	adds	r2, r3, #2
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	621a      	str	r2, [r3, #32]
 8008802:	e00e      	b.n	8008822 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	621a      	str	r2, [r3, #32]
 800880e:	e008      	b.n	8008822 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	1c59      	adds	r1, r3, #1
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6211      	str	r1, [r2, #32]
 800881a:	781a      	ldrb	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008826:	b29b      	uxth	r3, r3
 8008828:	3b01      	subs	r3, #1
 800882a:	b29b      	uxth	r3, r3
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	4619      	mov	r1, r3
 8008830:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10f      	bne.n	8008856 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68da      	ldr	r2, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008844:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008854:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	e000      	b.n	800885c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800885a:	2302      	movs	r3, #2
  }
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800887e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7ff fefd 	bl	8008688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b22      	cmp	r3, #34	; 0x22
 80088aa:	d171      	bne.n	8008990 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d123      	bne.n	80088fe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10e      	bne.n	80088e2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	1c9a      	adds	r2, r3, #2
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
 80088e0:	e029      	b.n	8008936 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f6:	1c5a      	adds	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28
 80088fc:	e01b      	b.n	8008936 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6858      	ldr	r0, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	1c59      	adds	r1, r3, #1
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6291      	str	r1, [r2, #40]	; 0x28
 8008916:	b2c2      	uxtb	r2, r0
 8008918:	701a      	strb	r2, [r3, #0]
 800891a:	e00c      	b.n	8008936 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	b2da      	uxtb	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	1c58      	adds	r0, r3, #1
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	6288      	str	r0, [r1, #40]	; 0x28
 800892e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008932:	b2d2      	uxtb	r2, r2
 8008934:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800893a:	b29b      	uxth	r3, r3
 800893c:	3b01      	subs	r3, #1
 800893e:	b29b      	uxth	r3, r3
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	4619      	mov	r1, r3
 8008944:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008946:	2b00      	cmp	r3, #0
 8008948:	d120      	bne.n	800898c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0220 	bic.w	r2, r2, #32
 8008958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68da      	ldr	r2, [r3, #12]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695a      	ldr	r2, [r3, #20]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f022 0201 	bic.w	r2, r2, #1
 8008978:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fe8a 	bl	800869c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	e002      	b.n	8008992 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e000      	b.n	8008992 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008990:	2302      	movs	r3, #2
  }
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	430a      	orrs	r2, r1
 80089ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	431a      	orrs	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80089de:	f023 030c 	bic.w	r3, r3, #12
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	430b      	orrs	r3, r1
 80089ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a0a:	f040 818b 	bne.w	8008d24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4ac1      	ldr	r2, [pc, #772]	; (8008d18 <UART_SetConfig+0x37c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d005      	beq.n	8008a24 <UART_SetConfig+0x88>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4abf      	ldr	r2, [pc, #764]	; (8008d1c <UART_SetConfig+0x380>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	f040 80bd 	bne.w	8008b9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a24:	f7ff f9c6 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 8008a28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	461d      	mov	r5, r3
 8008a2e:	f04f 0600 	mov.w	r6, #0
 8008a32:	46a8      	mov	r8, r5
 8008a34:	46b1      	mov	r9, r6
 8008a36:	eb18 0308 	adds.w	r3, r8, r8
 8008a3a:	eb49 0409 	adc.w	r4, r9, r9
 8008a3e:	4698      	mov	r8, r3
 8008a40:	46a1      	mov	r9, r4
 8008a42:	eb18 0805 	adds.w	r8, r8, r5
 8008a46:	eb49 0906 	adc.w	r9, r9, r6
 8008a4a:	f04f 0100 	mov.w	r1, #0
 8008a4e:	f04f 0200 	mov.w	r2, #0
 8008a52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a5e:	4688      	mov	r8, r1
 8008a60:	4691      	mov	r9, r2
 8008a62:	eb18 0005 	adds.w	r0, r8, r5
 8008a66:	eb49 0106 	adc.w	r1, r9, r6
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	461d      	mov	r5, r3
 8008a70:	f04f 0600 	mov.w	r6, #0
 8008a74:	196b      	adds	r3, r5, r5
 8008a76:	eb46 0406 	adc.w	r4, r6, r6
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	f7f8 f82d 	bl	8000adc <__aeabi_uldivmod>
 8008a82:	4603      	mov	r3, r0
 8008a84:	460c      	mov	r4, r1
 8008a86:	461a      	mov	r2, r3
 8008a88:	4ba5      	ldr	r3, [pc, #660]	; (8008d20 <UART_SetConfig+0x384>)
 8008a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	461d      	mov	r5, r3
 8008a98:	f04f 0600 	mov.w	r6, #0
 8008a9c:	46a9      	mov	r9, r5
 8008a9e:	46b2      	mov	sl, r6
 8008aa0:	eb19 0309 	adds.w	r3, r9, r9
 8008aa4:	eb4a 040a 	adc.w	r4, sl, sl
 8008aa8:	4699      	mov	r9, r3
 8008aaa:	46a2      	mov	sl, r4
 8008aac:	eb19 0905 	adds.w	r9, r9, r5
 8008ab0:	eb4a 0a06 	adc.w	sl, sl, r6
 8008ab4:	f04f 0100 	mov.w	r1, #0
 8008ab8:	f04f 0200 	mov.w	r2, #0
 8008abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ac0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ac4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ac8:	4689      	mov	r9, r1
 8008aca:	4692      	mov	sl, r2
 8008acc:	eb19 0005 	adds.w	r0, r9, r5
 8008ad0:	eb4a 0106 	adc.w	r1, sl, r6
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	461d      	mov	r5, r3
 8008ada:	f04f 0600 	mov.w	r6, #0
 8008ade:	196b      	adds	r3, r5, r5
 8008ae0:	eb46 0406 	adc.w	r4, r6, r6
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4623      	mov	r3, r4
 8008ae8:	f7f7 fff8 	bl	8000adc <__aeabi_uldivmod>
 8008aec:	4603      	mov	r3, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	461a      	mov	r2, r3
 8008af2:	4b8b      	ldr	r3, [pc, #556]	; (8008d20 <UART_SetConfig+0x384>)
 8008af4:	fba3 1302 	umull	r1, r3, r3, r2
 8008af8:	095b      	lsrs	r3, r3, #5
 8008afa:	2164      	movs	r1, #100	; 0x64
 8008afc:	fb01 f303 	mul.w	r3, r1, r3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	3332      	adds	r3, #50	; 0x32
 8008b06:	4a86      	ldr	r2, [pc, #536]	; (8008d20 <UART_SetConfig+0x384>)
 8008b08:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0c:	095b      	lsrs	r3, r3, #5
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b14:	4498      	add	r8, r3
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	461d      	mov	r5, r3
 8008b1a:	f04f 0600 	mov.w	r6, #0
 8008b1e:	46a9      	mov	r9, r5
 8008b20:	46b2      	mov	sl, r6
 8008b22:	eb19 0309 	adds.w	r3, r9, r9
 8008b26:	eb4a 040a 	adc.w	r4, sl, sl
 8008b2a:	4699      	mov	r9, r3
 8008b2c:	46a2      	mov	sl, r4
 8008b2e:	eb19 0905 	adds.w	r9, r9, r5
 8008b32:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b36:	f04f 0100 	mov.w	r1, #0
 8008b3a:	f04f 0200 	mov.w	r2, #0
 8008b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	4692      	mov	sl, r2
 8008b4e:	eb19 0005 	adds.w	r0, r9, r5
 8008b52:	eb4a 0106 	adc.w	r1, sl, r6
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	f04f 0600 	mov.w	r6, #0
 8008b60:	196b      	adds	r3, r5, r5
 8008b62:	eb46 0406 	adc.w	r4, r6, r6
 8008b66:	461a      	mov	r2, r3
 8008b68:	4623      	mov	r3, r4
 8008b6a:	f7f7 ffb7 	bl	8000adc <__aeabi_uldivmod>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	461a      	mov	r2, r3
 8008b74:	4b6a      	ldr	r3, [pc, #424]	; (8008d20 <UART_SetConfig+0x384>)
 8008b76:	fba3 1302 	umull	r1, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2164      	movs	r1, #100	; 0x64
 8008b7e:	fb01 f303 	mul.w	r3, r1, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a65      	ldr	r2, [pc, #404]	; (8008d20 <UART_SetConfig+0x384>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 0207 	and.w	r2, r3, #7
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4442      	add	r2, r8
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	e26f      	b.n	800907e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b9e:	f7ff f8f5 	bl	8007d8c <HAL_RCC_GetPCLK1Freq>
 8008ba2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	461d      	mov	r5, r3
 8008ba8:	f04f 0600 	mov.w	r6, #0
 8008bac:	46a8      	mov	r8, r5
 8008bae:	46b1      	mov	r9, r6
 8008bb0:	eb18 0308 	adds.w	r3, r8, r8
 8008bb4:	eb49 0409 	adc.w	r4, r9, r9
 8008bb8:	4698      	mov	r8, r3
 8008bba:	46a1      	mov	r9, r4
 8008bbc:	eb18 0805 	adds.w	r8, r8, r5
 8008bc0:	eb49 0906 	adc.w	r9, r9, r6
 8008bc4:	f04f 0100 	mov.w	r1, #0
 8008bc8:	f04f 0200 	mov.w	r2, #0
 8008bcc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008bd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008bd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008bd8:	4688      	mov	r8, r1
 8008bda:	4691      	mov	r9, r2
 8008bdc:	eb18 0005 	adds.w	r0, r8, r5
 8008be0:	eb49 0106 	adc.w	r1, r9, r6
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	461d      	mov	r5, r3
 8008bea:	f04f 0600 	mov.w	r6, #0
 8008bee:	196b      	adds	r3, r5, r5
 8008bf0:	eb46 0406 	adc.w	r4, r6, r6
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	f7f7 ff70 	bl	8000adc <__aeabi_uldivmod>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	461a      	mov	r2, r3
 8008c02:	4b47      	ldr	r3, [pc, #284]	; (8008d20 <UART_SetConfig+0x384>)
 8008c04:	fba3 2302 	umull	r2, r3, r3, r2
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	461d      	mov	r5, r3
 8008c12:	f04f 0600 	mov.w	r6, #0
 8008c16:	46a9      	mov	r9, r5
 8008c18:	46b2      	mov	sl, r6
 8008c1a:	eb19 0309 	adds.w	r3, r9, r9
 8008c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8008c22:	4699      	mov	r9, r3
 8008c24:	46a2      	mov	sl, r4
 8008c26:	eb19 0905 	adds.w	r9, r9, r5
 8008c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c42:	4689      	mov	r9, r1
 8008c44:	4692      	mov	sl, r2
 8008c46:	eb19 0005 	adds.w	r0, r9, r5
 8008c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	461d      	mov	r5, r3
 8008c54:	f04f 0600 	mov.w	r6, #0
 8008c58:	196b      	adds	r3, r5, r5
 8008c5a:	eb46 0406 	adc.w	r4, r6, r6
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4623      	mov	r3, r4
 8008c62:	f7f7 ff3b 	bl	8000adc <__aeabi_uldivmod>
 8008c66:	4603      	mov	r3, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4b2c      	ldr	r3, [pc, #176]	; (8008d20 <UART_SetConfig+0x384>)
 8008c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c72:	095b      	lsrs	r3, r3, #5
 8008c74:	2164      	movs	r1, #100	; 0x64
 8008c76:	fb01 f303 	mul.w	r3, r1, r3
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	3332      	adds	r3, #50	; 0x32
 8008c80:	4a27      	ldr	r2, [pc, #156]	; (8008d20 <UART_SetConfig+0x384>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	095b      	lsrs	r3, r3, #5
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c8e:	4498      	add	r8, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	461d      	mov	r5, r3
 8008c94:	f04f 0600 	mov.w	r6, #0
 8008c98:	46a9      	mov	r9, r5
 8008c9a:	46b2      	mov	sl, r6
 8008c9c:	eb19 0309 	adds.w	r3, r9, r9
 8008ca0:	eb4a 040a 	adc.w	r4, sl, sl
 8008ca4:	4699      	mov	r9, r3
 8008ca6:	46a2      	mov	sl, r4
 8008ca8:	eb19 0905 	adds.w	r9, r9, r5
 8008cac:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cb0:	f04f 0100 	mov.w	r1, #0
 8008cb4:	f04f 0200 	mov.w	r2, #0
 8008cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008cc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cc4:	4689      	mov	r9, r1
 8008cc6:	4692      	mov	sl, r2
 8008cc8:	eb19 0005 	adds.w	r0, r9, r5
 8008ccc:	eb4a 0106 	adc.w	r1, sl, r6
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	461d      	mov	r5, r3
 8008cd6:	f04f 0600 	mov.w	r6, #0
 8008cda:	196b      	adds	r3, r5, r5
 8008cdc:	eb46 0406 	adc.w	r4, r6, r6
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	f7f7 fefa 	bl	8000adc <__aeabi_uldivmod>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	460c      	mov	r4, r1
 8008cec:	461a      	mov	r2, r3
 8008cee:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <UART_SetConfig+0x384>)
 8008cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cf4:	095b      	lsrs	r3, r3, #5
 8008cf6:	2164      	movs	r1, #100	; 0x64
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	00db      	lsls	r3, r3, #3
 8008d00:	3332      	adds	r3, #50	; 0x32
 8008d02:	4a07      	ldr	r2, [pc, #28]	; (8008d20 <UART_SetConfig+0x384>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	f003 0207 	and.w	r2, r3, #7
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4442      	add	r2, r8
 8008d14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008d16:	e1b2      	b.n	800907e <UART_SetConfig+0x6e2>
 8008d18:	40011000 	.word	0x40011000
 8008d1c:	40011400 	.word	0x40011400
 8008d20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4ad7      	ldr	r2, [pc, #860]	; (8009088 <UART_SetConfig+0x6ec>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d005      	beq.n	8008d3a <UART_SetConfig+0x39e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4ad6      	ldr	r2, [pc, #856]	; (800908c <UART_SetConfig+0x6f0>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	f040 80d1 	bne.w	8008edc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d3a:	f7ff f83b 	bl	8007db4 <HAL_RCC_GetPCLK2Freq>
 8008d3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	469a      	mov	sl, r3
 8008d44:	f04f 0b00 	mov.w	fp, #0
 8008d48:	46d0      	mov	r8, sl
 8008d4a:	46d9      	mov	r9, fp
 8008d4c:	eb18 0308 	adds.w	r3, r8, r8
 8008d50:	eb49 0409 	adc.w	r4, r9, r9
 8008d54:	4698      	mov	r8, r3
 8008d56:	46a1      	mov	r9, r4
 8008d58:	eb18 080a 	adds.w	r8, r8, sl
 8008d5c:	eb49 090b 	adc.w	r9, r9, fp
 8008d60:	f04f 0100 	mov.w	r1, #0
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008d6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008d70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008d74:	4688      	mov	r8, r1
 8008d76:	4691      	mov	r9, r2
 8008d78:	eb1a 0508 	adds.w	r5, sl, r8
 8008d7c:	eb4b 0609 	adc.w	r6, fp, r9
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	4619      	mov	r1, r3
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	f04f 0400 	mov.w	r4, #0
 8008d92:	0094      	lsls	r4, r2, #2
 8008d94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d98:	008b      	lsls	r3, r1, #2
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4623      	mov	r3, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	4631      	mov	r1, r6
 8008da2:	f7f7 fe9b 	bl	8000adc <__aeabi_uldivmod>
 8008da6:	4603      	mov	r3, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	461a      	mov	r2, r3
 8008dac:	4bb8      	ldr	r3, [pc, #736]	; (8009090 <UART_SetConfig+0x6f4>)
 8008dae:	fba3 2302 	umull	r2, r3, r3, r2
 8008db2:	095b      	lsrs	r3, r3, #5
 8008db4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	469b      	mov	fp, r3
 8008dbc:	f04f 0c00 	mov.w	ip, #0
 8008dc0:	46d9      	mov	r9, fp
 8008dc2:	46e2      	mov	sl, ip
 8008dc4:	eb19 0309 	adds.w	r3, r9, r9
 8008dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8008dcc:	4699      	mov	r9, r3
 8008dce:	46a2      	mov	sl, r4
 8008dd0:	eb19 090b 	adds.w	r9, r9, fp
 8008dd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008dd8:	f04f 0100 	mov.w	r1, #0
 8008ddc:	f04f 0200 	mov.w	r2, #0
 8008de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dec:	4689      	mov	r9, r1
 8008dee:	4692      	mov	sl, r2
 8008df0:	eb1b 0509 	adds.w	r5, fp, r9
 8008df4:	eb4c 060a 	adc.w	r6, ip, sl
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f04f 0200 	mov.w	r2, #0
 8008e02:	f04f 0300 	mov.w	r3, #0
 8008e06:	f04f 0400 	mov.w	r4, #0
 8008e0a:	0094      	lsls	r4, r2, #2
 8008e0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	461a      	mov	r2, r3
 8008e14:	4623      	mov	r3, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	4631      	mov	r1, r6
 8008e1a:	f7f7 fe5f 	bl	8000adc <__aeabi_uldivmod>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	461a      	mov	r2, r3
 8008e24:	4b9a      	ldr	r3, [pc, #616]	; (8009090 <UART_SetConfig+0x6f4>)
 8008e26:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	2164      	movs	r1, #100	; 0x64
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	3332      	adds	r3, #50	; 0x32
 8008e38:	4a95      	ldr	r2, [pc, #596]	; (8009090 <UART_SetConfig+0x6f4>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e44:	4498      	add	r8, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	469b      	mov	fp, r3
 8008e4a:	f04f 0c00 	mov.w	ip, #0
 8008e4e:	46d9      	mov	r9, fp
 8008e50:	46e2      	mov	sl, ip
 8008e52:	eb19 0309 	adds.w	r3, r9, r9
 8008e56:	eb4a 040a 	adc.w	r4, sl, sl
 8008e5a:	4699      	mov	r9, r3
 8008e5c:	46a2      	mov	sl, r4
 8008e5e:	eb19 090b 	adds.w	r9, r9, fp
 8008e62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e66:	f04f 0100 	mov.w	r1, #0
 8008e6a:	f04f 0200 	mov.w	r2, #0
 8008e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e7a:	4689      	mov	r9, r1
 8008e7c:	4692      	mov	sl, r2
 8008e7e:	eb1b 0509 	adds.w	r5, fp, r9
 8008e82:	eb4c 060a 	adc.w	r6, ip, sl
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	f04f 0200 	mov.w	r2, #0
 8008e90:	f04f 0300 	mov.w	r3, #0
 8008e94:	f04f 0400 	mov.w	r4, #0
 8008e98:	0094      	lsls	r4, r2, #2
 8008e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e9e:	008b      	lsls	r3, r1, #2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	f7f7 fe18 	bl	8000adc <__aeabi_uldivmod>
 8008eac:	4603      	mov	r3, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4b77      	ldr	r3, [pc, #476]	; (8009090 <UART_SetConfig+0x6f4>)
 8008eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008eb8:	095b      	lsrs	r3, r3, #5
 8008eba:	2164      	movs	r1, #100	; 0x64
 8008ebc:	fb01 f303 	mul.w	r3, r1, r3
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	3332      	adds	r3, #50	; 0x32
 8008ec6:	4a72      	ldr	r2, [pc, #456]	; (8009090 <UART_SetConfig+0x6f4>)
 8008ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ecc:	095b      	lsrs	r3, r3, #5
 8008ece:	f003 020f 	and.w	r2, r3, #15
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4442      	add	r2, r8
 8008ed8:	609a      	str	r2, [r3, #8]
 8008eda:	e0d0      	b.n	800907e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008edc:	f7fe ff56 	bl	8007d8c <HAL_RCC_GetPCLK1Freq>
 8008ee0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	469a      	mov	sl, r3
 8008ee6:	f04f 0b00 	mov.w	fp, #0
 8008eea:	46d0      	mov	r8, sl
 8008eec:	46d9      	mov	r9, fp
 8008eee:	eb18 0308 	adds.w	r3, r8, r8
 8008ef2:	eb49 0409 	adc.w	r4, r9, r9
 8008ef6:	4698      	mov	r8, r3
 8008ef8:	46a1      	mov	r9, r4
 8008efa:	eb18 080a 	adds.w	r8, r8, sl
 8008efe:	eb49 090b 	adc.w	r9, r9, fp
 8008f02:	f04f 0100 	mov.w	r1, #0
 8008f06:	f04f 0200 	mov.w	r2, #0
 8008f0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008f0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008f12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008f16:	4688      	mov	r8, r1
 8008f18:	4691      	mov	r9, r2
 8008f1a:	eb1a 0508 	adds.w	r5, sl, r8
 8008f1e:	eb4b 0609 	adc.w	r6, fp, r9
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	4619      	mov	r1, r3
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	f04f 0400 	mov.w	r4, #0
 8008f34:	0094      	lsls	r4, r2, #2
 8008f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f3a:	008b      	lsls	r3, r1, #2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	4623      	mov	r3, r4
 8008f40:	4628      	mov	r0, r5
 8008f42:	4631      	mov	r1, r6
 8008f44:	f7f7 fdca 	bl	8000adc <__aeabi_uldivmod>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b50      	ldr	r3, [pc, #320]	; (8009090 <UART_SetConfig+0x6f4>)
 8008f50:	fba3 2302 	umull	r2, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	469b      	mov	fp, r3
 8008f5e:	f04f 0c00 	mov.w	ip, #0
 8008f62:	46d9      	mov	r9, fp
 8008f64:	46e2      	mov	sl, ip
 8008f66:	eb19 0309 	adds.w	r3, r9, r9
 8008f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8008f6e:	4699      	mov	r9, r3
 8008f70:	46a2      	mov	sl, r4
 8008f72:	eb19 090b 	adds.w	r9, r9, fp
 8008f76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f7a:	f04f 0100 	mov.w	r1, #0
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f8e:	4689      	mov	r9, r1
 8008f90:	4692      	mov	sl, r2
 8008f92:	eb1b 0509 	adds.w	r5, fp, r9
 8008f96:	eb4c 060a 	adc.w	r6, ip, sl
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	f04f 0200 	mov.w	r2, #0
 8008fa4:	f04f 0300 	mov.w	r3, #0
 8008fa8:	f04f 0400 	mov.w	r4, #0
 8008fac:	0094      	lsls	r4, r2, #2
 8008fae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fb2:	008b      	lsls	r3, r1, #2
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	4631      	mov	r1, r6
 8008fbc:	f7f7 fd8e 	bl	8000adc <__aeabi_uldivmod>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4b32      	ldr	r3, [pc, #200]	; (8009090 <UART_SetConfig+0x6f4>)
 8008fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	011b      	lsls	r3, r3, #4
 8008fd8:	3332      	adds	r3, #50	; 0x32
 8008fda:	4a2d      	ldr	r2, [pc, #180]	; (8009090 <UART_SetConfig+0x6f4>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe6:	4498      	add	r8, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	469b      	mov	fp, r3
 8008fec:	f04f 0c00 	mov.w	ip, #0
 8008ff0:	46d9      	mov	r9, fp
 8008ff2:	46e2      	mov	sl, ip
 8008ff4:	eb19 0309 	adds.w	r3, r9, r9
 8008ff8:	eb4a 040a 	adc.w	r4, sl, sl
 8008ffc:	4699      	mov	r9, r3
 8008ffe:	46a2      	mov	sl, r4
 8009000:	eb19 090b 	adds.w	r9, r9, fp
 8009004:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009008:	f04f 0100 	mov.w	r1, #0
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009014:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009018:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800901c:	4689      	mov	r9, r1
 800901e:	4692      	mov	sl, r2
 8009020:	eb1b 0509 	adds.w	r5, fp, r9
 8009024:	eb4c 060a 	adc.w	r6, ip, sl
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4619      	mov	r1, r3
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	f04f 0400 	mov.w	r4, #0
 800903a:	0094      	lsls	r4, r2, #2
 800903c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009040:	008b      	lsls	r3, r1, #2
 8009042:	461a      	mov	r2, r3
 8009044:	4623      	mov	r3, r4
 8009046:	4628      	mov	r0, r5
 8009048:	4631      	mov	r1, r6
 800904a:	f7f7 fd47 	bl	8000adc <__aeabi_uldivmod>
 800904e:	4603      	mov	r3, r0
 8009050:	460c      	mov	r4, r1
 8009052:	461a      	mov	r2, r3
 8009054:	4b0e      	ldr	r3, [pc, #56]	; (8009090 <UART_SetConfig+0x6f4>)
 8009056:	fba3 1302 	umull	r1, r3, r3, r2
 800905a:	095b      	lsrs	r3, r3, #5
 800905c:	2164      	movs	r1, #100	; 0x64
 800905e:	fb01 f303 	mul.w	r3, r1, r3
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	3332      	adds	r3, #50	; 0x32
 8009068:	4a09      	ldr	r2, [pc, #36]	; (8009090 <UART_SetConfig+0x6f4>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	f003 020f 	and.w	r2, r3, #15
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4442      	add	r2, r8
 800907a:	609a      	str	r2, [r3, #8]
}
 800907c:	e7ff      	b.n	800907e <UART_SetConfig+0x6e2>
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009088:	40011000 	.word	0x40011000
 800908c:	40011400 	.word	0x40011400
 8009090:	51eb851f 	.word	0x51eb851f

08009094 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800909e:	2300      	movs	r3, #0
 80090a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80090a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a6:	2b84      	cmp	r3, #132	; 0x84
 80090a8:	d005      	beq.n	80090b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80090aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4413      	add	r3, r2
 80090b2:	3303      	adds	r3, #3
 80090b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80090b6:	68fb      	ldr	r3, [r7, #12]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ca:	f3ef 8305 	mrs	r3, IPSR
 80090ce:	607b      	str	r3, [r7, #4]
  return(result);
 80090d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bf14      	ite	ne
 80090d6:	2301      	movne	r3, #1
 80090d8:	2300      	moveq	r3, #0
 80090da:	b2db      	uxtb	r3, r3
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80090ec:	f001 f92e 	bl	800a34c <vTaskStartScheduler>
  
  return osOK;
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80090f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090f8:	b089      	sub	sp, #36	; 0x24
 80090fa:	af04      	add	r7, sp, #16
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d020      	beq.n	800914a <osThreadCreate+0x54>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d01c      	beq.n	800914a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685c      	ldr	r4, [r3, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681d      	ldr	r5, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691e      	ldr	r6, [r3, #16]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff ffb6 	bl	8009094 <makeFreeRtosPriority>
 8009128:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009132:	9202      	str	r2, [sp, #8]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	9100      	str	r1, [sp, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	4632      	mov	r2, r6
 800913c:	4629      	mov	r1, r5
 800913e:	4620      	mov	r0, r4
 8009140:	f000 ff41 	bl	8009fc6 <xTaskCreateStatic>
 8009144:	4603      	mov	r3, r0
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e01c      	b.n	8009184 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685c      	ldr	r4, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009156:	b29e      	uxth	r6, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff98 	bl	8009094 <makeFreeRtosPriority>
 8009164:	4602      	mov	r2, r0
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	9301      	str	r3, [sp, #4]
 800916c:	9200      	str	r2, [sp, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	4632      	mov	r2, r6
 8009172:	4629      	mov	r1, r5
 8009174:	4620      	mov	r0, r4
 8009176:	f000 ff80 	bl	800a07a <xTaskCreate>
 800917a:	4603      	mov	r3, r0
 800917c:	2b01      	cmp	r3, #1
 800917e:	d001      	beq.n	8009184 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	e000      	b.n	8009186 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800918e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d001      	beq.n	80091a4 <osDelay+0x16>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	e000      	b.n	80091a6 <osDelay+0x18>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 f89c 	bl	800a2e4 <vTaskDelay>
  
  return osOK;
 80091ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d007      	beq.n	80091d6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	4619      	mov	r1, r3
 80091cc:	2001      	movs	r0, #1
 80091ce:	f000 faae 	bl	800972e <xQueueCreateMutexStatic>
 80091d2:	4603      	mov	r3, r0
 80091d4:	e003      	b.n	80091de <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80091d6:	2001      	movs	r0, #1
 80091d8:	f000 fa91 	bl	80096fe <xQueueCreateMutex>
 80091dc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80091f2:	2300      	movs	r3, #0
 80091f4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <osMutexWait+0x18>
    return osErrorParameter;
 80091fc:	2380      	movs	r3, #128	; 0x80
 80091fe:	e03a      	b.n	8009276 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920a:	d103      	bne.n	8009214 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800920c:	f04f 33ff 	mov.w	r3, #4294967295
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	e009      	b.n	8009228 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d006      	beq.n	8009228 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <osMutexWait+0x40>
      ticks = 1;
 8009224:	2301      	movs	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009228:	f7ff ff4c 	bl	80090c4 <inHandlerMode>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d017      	beq.n	8009262 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	461a      	mov	r2, r3
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fd1e 	bl	8009c7c <xQueueReceiveFromISR>
 8009240:	4603      	mov	r3, r0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d001      	beq.n	800924a <osMutexWait+0x62>
      return osErrorOS;
 8009246:	23ff      	movs	r3, #255	; 0xff
 8009248:	e015      	b.n	8009276 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d011      	beq.n	8009274 <osMutexWait+0x8c>
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <osMutexWait+0x98>)
 8009252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009256:	601a      	str	r2, [r3, #0]
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	e008      	b.n	8009274 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fc01 	bl	8009a6c <xQueueSemaphoreTake>
 800926a:	4603      	mov	r3, r0
 800926c:	2b01      	cmp	r3, #1
 800926e:	d001      	beq.n	8009274 <osMutexWait+0x8c>
    return osErrorOS;
 8009270:	23ff      	movs	r3, #255	; 0xff
 8009272:	e000      	b.n	8009276 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	e000ed04 	.word	0xe000ed04

08009284 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800928c:	2300      	movs	r3, #0
 800928e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009294:	f7ff ff16 	bl	80090c4 <inHandlerMode>
 8009298:	4603      	mov	r3, r0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d016      	beq.n	80092cc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800929e:	f107 0308 	add.w	r3, r7, #8
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fb57 	bl	8009958 <xQueueGiveFromISR>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d001      	beq.n	80092b4 <osMutexRelease+0x30>
      return osErrorOS;
 80092b0:	23ff      	movs	r3, #255	; 0xff
 80092b2:	e017      	b.n	80092e4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d013      	beq.n	80092e2 <osMutexRelease+0x5e>
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <osMutexRelease+0x68>)
 80092bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	e00a      	b.n	80092e2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80092cc:	2300      	movs	r3, #0
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa46 	bl	8009764 <xQueueGenericSend>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d001      	beq.n	80092e2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80092de:	23ff      	movs	r3, #255	; 0xff
 80092e0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	e000ed04 	.word	0xe000ed04

080092f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f103 0208 	add.w	r2, r3, #8
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f103 0208 	add.w	r2, r3, #8
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f103 0208 	add.w	r2, r3, #8
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800933e:	bf00      	nop
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	601a      	str	r2, [r3, #0]
}
 8009386:	bf00      	nop
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009392:	b480      	push	{r7}
 8009394:	b085      	sub	sp, #20
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d103      	bne.n	80093b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e00c      	b.n	80093cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	e002      	b.n	80093c0 <vListInsert+0x2e>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d2f6      	bcs.n	80093ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	685a      	ldr	r2, [r3, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	601a      	str	r2, [r3, #0]
}
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6892      	ldr	r2, [r2, #8]
 800941a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6852      	ldr	r2, [r2, #4]
 8009424:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d103      	bne.n	8009438 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	1e5a      	subs	r2, r3, #1
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
 800947e:	e7fe      	b.n	800947e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009480:	f001 feb4 	bl	800b1ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009490:	fb01 f303 	mul.w	r3, r1, r3
 8009494:	441a      	add	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b0:	3b01      	subs	r3, #1
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80094b6:	fb01 f303 	mul.w	r3, r1, r3
 80094ba:	441a      	add	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	22ff      	movs	r2, #255	; 0xff
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	22ff      	movs	r2, #255	; 0xff
 80094cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d114      	bne.n	8009500 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d01a      	beq.n	8009514 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3310      	adds	r3, #16
 80094e2:	4618      	mov	r0, r3
 80094e4:	f001 f970 	bl	800a7c8 <xTaskRemoveFromEventList>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d012      	beq.n	8009514 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <xQueueGenericReset+0xcc>)
 80094f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	f3bf 8f6f 	isb	sy
 80094fe:	e009      	b.n	8009514 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3310      	adds	r3, #16
 8009504:	4618      	mov	r0, r3
 8009506:	f7ff fef3 	bl	80092f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3324      	adds	r3, #36	; 0x24
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff feee 	bl	80092f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009514:	f001 fe98 	bl	800b248 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009518:	2301      	movs	r3, #1
}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	e000ed04 	.word	0xe000ed04

08009528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08e      	sub	sp, #56	; 0x38
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <xQueueGenericCreateStatic+0x28>
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
 800954e:	e7fe      	b.n	800954e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d109      	bne.n	800956a <xQueueGenericCreateStatic+0x42>
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
 8009568:	e7fe      	b.n	8009568 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <xQueueGenericCreateStatic+0x4e>
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <xQueueGenericCreateStatic+0x52>
 8009576:	2301      	movs	r3, #1
 8009578:	e000      	b.n	800957c <xQueueGenericCreateStatic+0x54>
 800957a:	2300      	movs	r3, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <xQueueGenericCreateStatic+0x6c>
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	623b      	str	r3, [r7, #32]
 8009592:	e7fe      	b.n	8009592 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <xQueueGenericCreateStatic+0x78>
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <xQueueGenericCreateStatic+0x7c>
 80095a0:	2301      	movs	r3, #1
 80095a2:	e000      	b.n	80095a6 <xQueueGenericCreateStatic+0x7e>
 80095a4:	2300      	movs	r3, #0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <xQueueGenericCreateStatic+0x96>
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	61fb      	str	r3, [r7, #28]
 80095bc:	e7fe      	b.n	80095bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095be:	2348      	movs	r3, #72	; 0x48
 80095c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b48      	cmp	r3, #72	; 0x48
 80095c6:	d009      	beq.n	80095dc <xQueueGenericCreateStatic+0xb4>
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	e7fe      	b.n	80095da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00d      	beq.n	8009604 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f844 	bl	800968c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009606:	4618      	mov	r0, r3
 8009608:	3730      	adds	r7, #48	; 0x30
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800960e:	b580      	push	{r7, lr}
 8009610:	b08a      	sub	sp, #40	; 0x28
 8009612:	af02      	add	r7, sp, #8
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	4613      	mov	r3, r2
 800961a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d109      	bne.n	8009636 <xQueueGenericCreate+0x28>
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	613b      	str	r3, [r7, #16]
 8009634:	e7fe      	b.n	8009634 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800963c:	2300      	movs	r3, #0
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e004      	b.n	800964c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	fb02 f303 	mul.w	r3, r2, r3
 800964a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	3348      	adds	r3, #72	; 0x48
 8009650:	4618      	mov	r0, r3
 8009652:	f001 fee5 	bl	800b420 <pvPortMalloc>
 8009656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d011      	beq.n	8009682 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	3348      	adds	r3, #72	; 0x48
 8009666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009670:	79fa      	ldrb	r2, [r7, #7]
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4613      	mov	r3, r2
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 f805 	bl	800968c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009682:	69bb      	ldr	r3, [r7, #24]
	}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
 8009698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	e002      	b.n	80096ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80096ba:	2101      	movs	r1, #1
 80096bc:	69b8      	ldr	r0, [r7, #24]
 80096be:	f7ff fecb 	bl	8009458 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00e      	beq.n	80096f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80096ea:	2300      	movs	r3, #0
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f837 	bl	8009764 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af00      	add	r7, sp, #0
 8009704:	4603      	mov	r3, r0
 8009706:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009708:	2301      	movs	r3, #1
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	461a      	mov	r2, r3
 8009714:	6939      	ldr	r1, [r7, #16]
 8009716:	6978      	ldr	r0, [r7, #20]
 8009718:	f7ff ff79 	bl	800960e <xQueueGenericCreate>
 800971c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f7ff ffd3 	bl	80096ca <prvInitialiseMutex>

		return xNewQueue;
 8009724:	68fb      	ldr	r3, [r7, #12]
	}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800972e:	b580      	push	{r7, lr}
 8009730:	b088      	sub	sp, #32
 8009732:	af02      	add	r7, sp, #8
 8009734:	4603      	mov	r3, r0
 8009736:	6039      	str	r1, [r7, #0]
 8009738:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800973a:	2301      	movs	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2200      	movs	r2, #0
 800974a:	6939      	ldr	r1, [r7, #16]
 800974c:	6978      	ldr	r0, [r7, #20]
 800974e:	f7ff feeb 	bl	8009528 <xQueueGenericCreateStatic>
 8009752:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff ffb8 	bl	80096ca <prvInitialiseMutex>

		return xNewQueue;
 800975a:	68fb      	ldr	r3, [r7, #12]
	}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08e      	sub	sp, #56	; 0x38
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
 8009770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009772:	2300      	movs	r3, #0
 8009774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <xQueueGenericSend+0x30>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	e7fe      	b.n	8009792 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <xQueueGenericSend+0x3e>
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <xQueueGenericSend+0x42>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <xQueueGenericSend+0x44>
 80097a6:	2300      	movs	r3, #0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <xQueueGenericSend+0x5c>
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
 80097be:	e7fe      	b.n	80097be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d103      	bne.n	80097ce <xQueueGenericSend+0x6a>
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <xQueueGenericSend+0x6e>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e000      	b.n	80097d4 <xQueueGenericSend+0x70>
 80097d2:	2300      	movs	r3, #0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <xQueueGenericSend+0x88>
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	623b      	str	r3, [r7, #32]
 80097ea:	e7fe      	b.n	80097ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ec:	f001 f9a2 	bl	800ab34 <xTaskGetSchedulerState>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <xQueueGenericSend+0x98>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <xQueueGenericSend+0x9c>
 80097fc:	2301      	movs	r3, #1
 80097fe:	e000      	b.n	8009802 <xQueueGenericSend+0x9e>
 8009800:	2300      	movs	r3, #0
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <xQueueGenericSend+0xb6>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	61fb      	str	r3, [r7, #28]
 8009818:	e7fe      	b.n	8009818 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800981a:	f001 fce7 	bl	800b1ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	429a      	cmp	r2, r3
 8009828:	d302      	bcc.n	8009830 <xQueueGenericSend+0xcc>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b02      	cmp	r3, #2
 800982e:	d129      	bne.n	8009884 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	68b9      	ldr	r1, [r7, #8]
 8009834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009836:	f000 fab6 	bl	8009da6 <prvCopyDataToQueue>
 800983a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	d010      	beq.n	8009866 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009846:	3324      	adds	r3, #36	; 0x24
 8009848:	4618      	mov	r0, r3
 800984a:	f000 ffbd 	bl	800a7c8 <xTaskRemoveFromEventList>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d013      	beq.n	800987c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009854:	4b3f      	ldr	r3, [pc, #252]	; (8009954 <xQueueGenericSend+0x1f0>)
 8009856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	e00a      	b.n	800987c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d007      	beq.n	800987c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800986c:	4b39      	ldr	r3, [pc, #228]	; (8009954 <xQueueGenericSend+0x1f0>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800987c:	f001 fce4 	bl	800b248 <vPortExitCritical>
				return pdPASS;
 8009880:	2301      	movs	r3, #1
 8009882:	e063      	b.n	800994c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d103      	bne.n	8009892 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800988a:	f001 fcdd 	bl	800b248 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800988e:	2300      	movs	r3, #0
 8009890:	e05c      	b.n	800994c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009894:	2b00      	cmp	r3, #0
 8009896:	d106      	bne.n	80098a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009898:	f107 0314 	add.w	r3, r7, #20
 800989c:	4618      	mov	r0, r3
 800989e:	f000 fff5 	bl	800a88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098a6:	f001 fccf 	bl	800b248 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098aa:	f000 fdad 	bl	800a408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098ae:	f001 fc9d 	bl	800b1ec <vPortEnterCritical>
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098b8:	b25b      	sxtb	r3, r3
 80098ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098be:	d103      	bne.n	80098c8 <xQueueGenericSend+0x164>
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ce:	b25b      	sxtb	r3, r3
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d103      	bne.n	80098de <xQueueGenericSend+0x17a>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098de:	f001 fcb3 	bl	800b248 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098e2:	1d3a      	adds	r2, r7, #4
 80098e4:	f107 0314 	add.w	r3, r7, #20
 80098e8:	4611      	mov	r1, r2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 ffe4 	bl	800a8b8 <xTaskCheckForTimeOut>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d124      	bne.n	8009940 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f8:	f000 fb4d 	bl	8009f96 <prvIsQueueFull>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d018      	beq.n	8009934 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	3310      	adds	r3, #16
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f000 ff38 	bl	800a780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009912:	f000 fad8 	bl	8009ec6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009916:	f000 fd85 	bl	800a424 <xTaskResumeAll>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f af7c 	bne.w	800981a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009922:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <xQueueGenericSend+0x1f0>)
 8009924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009928:	601a      	str	r2, [r3, #0]
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	e772      	b.n	800981a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009936:	f000 fac6 	bl	8009ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800993a:	f000 fd73 	bl	800a424 <xTaskResumeAll>
 800993e:	e76c      	b.n	800981a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009942:	f000 fac0 	bl	8009ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009946:	f000 fd6d 	bl	800a424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800994a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800994c:	4618      	mov	r0, r3
 800994e:	3738      	adds	r7, #56	; 0x38
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08e      	sub	sp, #56	; 0x38
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	2b00      	cmp	r3, #0
 800996a:	d109      	bne.n	8009980 <xQueueGiveFromISR+0x28>
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	623b      	str	r3, [r7, #32]
 800997e:	e7fe      	b.n	800997e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d009      	beq.n	800999c <xQueueGiveFromISR+0x44>
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	e7fe      	b.n	800999a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d103      	bne.n	80099ac <xQueueGiveFromISR+0x54>
 80099a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <xQueueGiveFromISR+0x58>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e000      	b.n	80099b2 <xQueueGiveFromISR+0x5a>
 80099b0:	2300      	movs	r3, #0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d109      	bne.n	80099ca <xQueueGiveFromISR+0x72>
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	61bb      	str	r3, [r7, #24]
 80099c8:	e7fe      	b.n	80099c8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099ca:	f001 fceb 	bl	800b3a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099ce:	f3ef 8211 	mrs	r2, BASEPRI
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	617a      	str	r2, [r7, #20]
 80099e4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d22b      	bcs.n	8009a52 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	1c5a      	adds	r2, r3, #1
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d112      	bne.n	8009a3c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d016      	beq.n	8009a4c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	3324      	adds	r3, #36	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fed0 	bl	800a7c8 <xTaskRemoveFromEventList>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00e      	beq.n	8009a4c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2201      	movs	r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	e007      	b.n	8009a4c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a40:	3301      	adds	r3, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	b25a      	sxtb	r2, r3
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a50:	e001      	b.n	8009a56 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3738      	adds	r7, #56	; 0x38
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08e      	sub	sp, #56	; 0x38
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d109      	bne.n	8009a9c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	623b      	str	r3, [r7, #32]
 8009a9a:	e7fe      	b.n	8009a9a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d009      	beq.n	8009ab8 <xQueueSemaphoreTake+0x4c>
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	61fb      	str	r3, [r7, #28]
 8009ab6:	e7fe      	b.n	8009ab6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ab8:	f001 f83c 	bl	800ab34 <xTaskGetSchedulerState>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d102      	bne.n	8009ac8 <xQueueSemaphoreTake+0x5c>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <xQueueSemaphoreTake+0x60>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <xQueueSemaphoreTake+0x62>
 8009acc:	2300      	movs	r3, #0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d109      	bne.n	8009ae6 <xQueueSemaphoreTake+0x7a>
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	61bb      	str	r3, [r7, #24]
 8009ae4:	e7fe      	b.n	8009ae4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ae6:	f001 fb81 	bl	800b1ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d024      	beq.n	8009b40 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af8:	1e5a      	subs	r2, r3, #1
 8009afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009b06:	f001 f9cf 	bl	800aea8 <pvTaskIncrementMutexHeldCount>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00f      	beq.n	8009b38 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1a:	3310      	adds	r3, #16
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fe53 	bl	800a7c8 <xTaskRemoveFromEventList>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d007      	beq.n	8009b38 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b28:	4b53      	ldr	r3, [pc, #332]	; (8009c78 <xQueueSemaphoreTake+0x20c>)
 8009b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2e:	601a      	str	r2, [r3, #0]
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b38:	f001 fb86 	bl	800b248 <vPortExitCritical>
				return pdPASS;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e096      	b.n	8009c6e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d110      	bne.n	8009b68 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d009      	beq.n	8009b60 <xQueueSemaphoreTake+0xf4>
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	617b      	str	r3, [r7, #20]
 8009b5e:	e7fe      	b.n	8009b5e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009b60:	f001 fb72 	bl	800b248 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e082      	b.n	8009c6e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b6e:	f107 030c 	add.w	r3, r7, #12
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fe8a 	bl	800a88c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b7c:	f001 fb64 	bl	800b248 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b80:	f000 fc42 	bl	800a408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b84:	f001 fb32 	bl	800b1ec <vPortEnterCritical>
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b8e:	b25b      	sxtb	r3, r3
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d103      	bne.n	8009b9e <xQueueSemaphoreTake+0x132>
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba4:	b25b      	sxtb	r3, r3
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d103      	bne.n	8009bb4 <xQueueSemaphoreTake+0x148>
 8009bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bb4:	f001 fb48 	bl	800b248 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bb8:	463a      	mov	r2, r7
 8009bba:	f107 030c 	add.w	r3, r7, #12
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fe79 	bl	800a8b8 <xTaskCheckForTimeOut>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d132      	bne.n	8009c32 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009bce:	f000 f9cc 	bl	8009f6a <prvIsQueueEmpty>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d026      	beq.n	8009c26 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d109      	bne.n	8009bf4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009be0:	f001 fb04 	bl	800b1ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 ffc1 	bl	800ab70 <xTaskPriorityInherit>
 8009bee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009bf0:	f001 fb2a 	bl	800b248 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf6:	3324      	adds	r3, #36	; 0x24
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	4611      	mov	r1, r2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fdbf 	bl	800a780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c04:	f000 f95f 	bl	8009ec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c08:	f000 fc0c 	bl	800a424 <xTaskResumeAll>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f47f af69 	bne.w	8009ae6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009c14:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <xQueueSemaphoreTake+0x20c>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	e75f      	b.n	8009ae6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c28:	f000 f94d 	bl	8009ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c2c:	f000 fbfa 	bl	800a424 <xTaskResumeAll>
 8009c30:	e759      	b.n	8009ae6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009c32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c34:	f000 f947 	bl	8009ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c38:	f000 fbf4 	bl	800a424 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c3e:	f000 f994 	bl	8009f6a <prvIsQueueEmpty>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f43f af4e 	beq.w	8009ae6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00d      	beq.n	8009c6c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009c50:	f001 facc 	bl	800b1ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009c54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c56:	f000 f88e 	bl	8009d76 <prvGetDisinheritPriorityAfterTimeout>
 8009c5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 f888 	bl	800ad78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009c68:	f001 faee 	bl	800b248 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3738      	adds	r7, #56	; 0x38
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	e000ed04 	.word	0xe000ed04

08009c7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <xQueueReceiveFromISR+0x2a>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	623b      	str	r3, [r7, #32]
 8009ca4:	e7fe      	b.n	8009ca4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d103      	bne.n	8009cb4 <xQueueReceiveFromISR+0x38>
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <xQueueReceiveFromISR+0x3c>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <xQueueReceiveFromISR+0x3e>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <xQueueReceiveFromISR+0x56>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	e7fe      	b.n	8009cd0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009cd2:	f001 fb67 	bl	800b3a4 <vPortValidateInterruptPriority>
	__asm volatile
 8009cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61ba      	str	r2, [r7, #24]
 8009cec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009cee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d02f      	beq.n	8009d5e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d08:	68b9      	ldr	r1, [r7, #8]
 8009d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d0c:	f000 f8b5 	bl	8009e7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	1e5a      	subs	r2, r3, #1
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d20:	d112      	bne.n	8009d48 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d016      	beq.n	8009d58 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	3310      	adds	r3, #16
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fd4a 	bl	800a7c8 <xTaskRemoveFromEventList>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00e      	beq.n	8009d58 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	601a      	str	r2, [r3, #0]
 8009d46:	e007      	b.n	8009d58 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	b25a      	sxtb	r2, r3
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d5c:	e001      	b.n	8009d62 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3738      	adds	r7, #56	; 0x38
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d006      	beq.n	8009d94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f1c3 0307 	rsb	r3, r3, #7
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e001      	b.n	8009d98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009d98:	68fb      	ldr	r3, [r7, #12]
	}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3714      	adds	r7, #20
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b086      	sub	sp, #24
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	60f8      	str	r0, [r7, #12]
 8009dae:	60b9      	str	r1, [r7, #8]
 8009db0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009db2:	2300      	movs	r3, #0
 8009db4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10d      	bne.n	8009de0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d14d      	bne.n	8009e68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 ff4d 	bl	800ac70 <xTaskPriorityDisinherit>
 8009dd6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	609a      	str	r2, [r3, #8]
 8009dde:	e043      	b.n	8009e68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d119      	bne.n	8009e1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6858      	ldr	r0, [r3, #4]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	461a      	mov	r2, r3
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	f001 fd15 	bl	800b820 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	441a      	add	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d32b      	bcc.n	8009e68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	605a      	str	r2, [r3, #4]
 8009e18:	e026      	b.n	8009e68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	68d8      	ldr	r0, [r3, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e22:	461a      	mov	r2, r3
 8009e24:	68b9      	ldr	r1, [r7, #8]
 8009e26:	f001 fcfb 	bl	800b820 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	425b      	negs	r3, r3
 8009e34:	441a      	add	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68da      	ldr	r2, [r3, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d207      	bcs.n	8009e56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	425b      	negs	r3, r3
 8009e50:	441a      	add	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d105      	bne.n	8009e68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009e70:	697b      	ldr	r3, [r7, #20]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d018      	beq.n	8009ebe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68da      	ldr	r2, [r3, #12]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e94:	441a      	add	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68da      	ldr	r2, [r3, #12]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d303      	bcc.n	8009eae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68d9      	ldr	r1, [r3, #12]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6838      	ldr	r0, [r7, #0]
 8009eba:	f001 fcb1 	bl	800b820 <memcpy>
	}
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ece:	f001 f98d 	bl	800b1ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009eda:	e011      	b.n	8009f00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d012      	beq.n	8009f0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3324      	adds	r3, #36	; 0x24
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fc6d 	bl	800a7c8 <xTaskRemoveFromEventList>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009ef4:	f000 fd40 	bl	800a978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dce9      	bgt.n	8009edc <prvUnlockQueue+0x16>
 8009f08:	e000      	b.n	8009f0c <prvUnlockQueue+0x46>
					break;
 8009f0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	22ff      	movs	r2, #255	; 0xff
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f14:	f001 f998 	bl	800b248 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f18:	f001 f968 	bl	800b1ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f24:	e011      	b.n	8009f4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d012      	beq.n	8009f54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fc48 	bl	800a7c8 <xTaskRemoveFromEventList>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f3e:	f000 fd1b 	bl	800a978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f42:	7bbb      	ldrb	r3, [r7, #14]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dce9      	bgt.n	8009f26 <prvUnlockQueue+0x60>
 8009f52:	e000      	b.n	8009f56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f5e:	f001 f973 	bl	800b248 <vPortExitCritical>
}
 8009f62:	bf00      	nop
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f72:	f001 f93b 	bl	800b1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	e001      	b.n	8009f88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f88:	f001 f95e 	bl	800b248 <vPortExitCritical>

	return xReturn;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009f9e:	f001 f925 	bl	800b1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d102      	bne.n	8009fb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	e001      	b.n	8009fb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f001 f946 	bl	800b248 <vPortExitCritical>

	return xReturn;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b08e      	sub	sp, #56	; 0x38
 8009fca:	af04      	add	r7, sp, #16
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <xTaskCreateStatic+0x28>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	623b      	str	r3, [r7, #32]
 8009fec:	e7fe      	b.n	8009fec <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d109      	bne.n	800a008 <xTaskCreateStatic+0x42>
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	e7fe      	b.n	800a006 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a008:	2354      	movs	r3, #84	; 0x54
 800a00a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b54      	cmp	r3, #84	; 0x54
 800a010:	d009      	beq.n	800a026 <xTaskCreateStatic+0x60>
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	61bb      	str	r3, [r7, #24]
 800a024:	e7fe      	b.n	800a024 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a026:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d01e      	beq.n	800a06c <xTaskCreateStatic+0xa6>
 800a02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01b      	beq.n	800a06c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a03c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	2202      	movs	r2, #2
 800a042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a046:	2300      	movs	r3, #0
 800a048:	9303      	str	r3, [sp, #12]
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	9302      	str	r3, [sp, #8]
 800a04e:	f107 0314 	add.w	r3, r7, #20
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 f850 	bl	800a104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a066:	f000 f8d3 	bl	800a210 <prvAddNewTaskToReadyList>
 800a06a:	e001      	b.n	800a070 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a070:	697b      	ldr	r3, [r7, #20]
	}
 800a072:	4618      	mov	r0, r3
 800a074:	3728      	adds	r7, #40	; 0x28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08c      	sub	sp, #48	; 0x30
 800a07e:	af04      	add	r7, sp, #16
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4618      	mov	r0, r3
 800a090:	f001 f9c6 	bl	800b420 <pvPortMalloc>
 800a094:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00e      	beq.n	800a0ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a09c:	2054      	movs	r0, #84	; 0x54
 800a09e:	f001 f9bf 	bl	800b420 <pvPortMalloc>
 800a0a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30
 800a0b0:	e005      	b.n	800a0be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0b2:	6978      	ldr	r0, [r7, #20]
 800a0b4:	f001 fa76 	bl	800b5a4 <vPortFree>
 800a0b8:	e001      	b.n	800a0be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d017      	beq.n	800a0f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0cc:	88fa      	ldrh	r2, [r7, #6]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	9303      	str	r3, [sp, #12]
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	9302      	str	r3, [sp, #8]
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	9301      	str	r3, [sp, #4]
 800a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 f80e 	bl	800a104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0e8:	69f8      	ldr	r0, [r7, #28]
 800a0ea:	f000 f891 	bl	800a210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	e002      	b.n	800a0fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
	}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3720      	adds	r7, #32
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a11c:	3b01      	subs	r3, #1
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <prvInitialiseNewTask+0x46>
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	e7fe      	b.n	800a148 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d01f      	beq.n	800a190 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a150:	2300      	movs	r3, #0
 800a152:	61fb      	str	r3, [r7, #28]
 800a154:	e012      	b.n	800a17c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	4413      	add	r3, r2
 800a15c:	7819      	ldrb	r1, [r3, #0]
 800a15e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	4413      	add	r3, r2
 800a164:	3334      	adds	r3, #52	; 0x34
 800a166:	460a      	mov	r2, r1
 800a168:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d006      	beq.n	800a184 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	3301      	adds	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	2b0f      	cmp	r3, #15
 800a180:	d9e9      	bls.n	800a156 <prvInitialiseNewTask+0x52>
 800a182:	e000      	b.n	800a186 <prvInitialiseNewTask+0x82>
			{
				break;
 800a184:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a18e:	e003      	b.n	800a198 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	2b06      	cmp	r3, #6
 800a19c:	d901      	bls.n	800a1a2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a19e:	2306      	movs	r3, #6
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ac:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff f8b9 	bl	8009330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	3318      	adds	r3, #24
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff f8b4 	bl	8009330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	f1c3 0207 	rsb	r2, r3, #7
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	68f9      	ldr	r1, [r7, #12]
 800a1f0:	69b8      	ldr	r0, [r7, #24]
 800a1f2:	f000 fed3 	bl	800af9c <pxPortInitialiseStack>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a206:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a208:	bf00      	nop
 800a20a:	3720      	adds	r7, #32
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a218:	f000 ffe8 	bl	800b1ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a21c:	4b2a      	ldr	r3, [pc, #168]	; (800a2c8 <prvAddNewTaskToReadyList+0xb8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3301      	adds	r3, #1
 800a222:	4a29      	ldr	r2, [pc, #164]	; (800a2c8 <prvAddNewTaskToReadyList+0xb8>)
 800a224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a226:	4b29      	ldr	r3, [pc, #164]	; (800a2cc <prvAddNewTaskToReadyList+0xbc>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d109      	bne.n	800a242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a22e:	4a27      	ldr	r2, [pc, #156]	; (800a2cc <prvAddNewTaskToReadyList+0xbc>)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a234:	4b24      	ldr	r3, [pc, #144]	; (800a2c8 <prvAddNewTaskToReadyList+0xb8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d110      	bne.n	800a25e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a23c:	f000 fbc0 	bl	800a9c0 <prvInitialiseTaskLists>
 800a240:	e00d      	b.n	800a25e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a242:	4b23      	ldr	r3, [pc, #140]	; (800a2d0 <prvAddNewTaskToReadyList+0xc0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a24a:	4b20      	ldr	r3, [pc, #128]	; (800a2cc <prvAddNewTaskToReadyList+0xbc>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a254:	429a      	cmp	r2, r3
 800a256:	d802      	bhi.n	800a25e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a258:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <prvAddNewTaskToReadyList+0xbc>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a25e:	4b1d      	ldr	r3, [pc, #116]	; (800a2d4 <prvAddNewTaskToReadyList+0xc4>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3301      	adds	r3, #1
 800a264:	4a1b      	ldr	r2, [pc, #108]	; (800a2d4 <prvAddNewTaskToReadyList+0xc4>)
 800a266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	2201      	movs	r2, #1
 800a26e:	409a      	lsls	r2, r3
 800a270:	4b19      	ldr	r3, [pc, #100]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4313      	orrs	r3, r2
 800a276:	4a18      	ldr	r2, [pc, #96]	; (800a2d8 <prvAddNewTaskToReadyList+0xc8>)
 800a278:	6013      	str	r3, [r2, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a27e:	4613      	mov	r3, r2
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	4413      	add	r3, r2
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4a15      	ldr	r2, [pc, #84]	; (800a2dc <prvAddNewTaskToReadyList+0xcc>)
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3304      	adds	r3, #4
 800a28e:	4619      	mov	r1, r3
 800a290:	4610      	mov	r0, r2
 800a292:	f7ff f85a 	bl	800934a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a296:	f000 ffd7 	bl	800b248 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <prvAddNewTaskToReadyList+0xc0>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00e      	beq.n	800a2c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2a2:	4b0a      	ldr	r3, [pc, #40]	; (800a2cc <prvAddNewTaskToReadyList+0xbc>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d207      	bcs.n	800a2c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <prvAddNewTaskToReadyList+0xd0>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	2000044c 	.word	0x2000044c
 800a2cc:	2000034c 	.word	0x2000034c
 800a2d0:	20000458 	.word	0x20000458
 800a2d4:	20000468 	.word	0x20000468
 800a2d8:	20000454 	.word	0x20000454
 800a2dc:	20000350 	.word	0x20000350
 800a2e0:	e000ed04 	.word	0xe000ed04

0800a2e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2f6:	4b13      	ldr	r3, [pc, #76]	; (800a344 <vTaskDelay+0x60>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d009      	beq.n	800a312 <vTaskDelay+0x2e>
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	60bb      	str	r3, [r7, #8]
 800a310:	e7fe      	b.n	800a310 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a312:	f000 f879 	bl	800a408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a316:	2100      	movs	r1, #0
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fdd9 	bl	800aed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a31e:	f000 f881 	bl	800a424 <xTaskResumeAll>
 800a322:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d107      	bne.n	800a33a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a32a:	4b07      	ldr	r3, [pc, #28]	; (800a348 <vTaskDelay+0x64>)
 800a32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a33a:	bf00      	nop
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20000474 	.word	0x20000474
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	; 0x28
 800a350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a352:	2300      	movs	r3, #0
 800a354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a35a:	463a      	mov	r2, r7
 800a35c:	1d39      	adds	r1, r7, #4
 800a35e:	f107 0308 	add.w	r3, r7, #8
 800a362:	4618      	mov	r0, r3
 800a364:	f7f7 fb4c 	bl	8001a00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	9202      	str	r2, [sp, #8]
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	2300      	movs	r3, #0
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	2300      	movs	r3, #0
 800a378:	460a      	mov	r2, r1
 800a37a:	491d      	ldr	r1, [pc, #116]	; (800a3f0 <vTaskStartScheduler+0xa4>)
 800a37c:	481d      	ldr	r0, [pc, #116]	; (800a3f4 <vTaskStartScheduler+0xa8>)
 800a37e:	f7ff fe22 	bl	8009fc6 <xTaskCreateStatic>
 800a382:	4602      	mov	r2, r0
 800a384:	4b1c      	ldr	r3, [pc, #112]	; (800a3f8 <vTaskStartScheduler+0xac>)
 800a386:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a388:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <vTaskStartScheduler+0xac>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a390:	2301      	movs	r3, #1
 800a392:	617b      	str	r3, [r7, #20]
 800a394:	e001      	b.n	800a39a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a396:	2300      	movs	r3, #0
 800a398:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d115      	bne.n	800a3cc <vTaskStartScheduler+0x80>
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <vTaskStartScheduler+0xb0>)
 800a3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3ba:	4b11      	ldr	r3, [pc, #68]	; (800a400 <vTaskStartScheduler+0xb4>)
 800a3bc:	2201      	movs	r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3c0:	4b10      	ldr	r3, [pc, #64]	; (800a404 <vTaskStartScheduler+0xb8>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a3c6:	f000 fe73 	bl	800b0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3ca:	e00d      	b.n	800a3e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d2:	d109      	bne.n	800a3e8 <vTaskStartScheduler+0x9c>
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	e7fe      	b.n	800a3e6 <vTaskStartScheduler+0x9a>
}
 800a3e8:	bf00      	nop
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	0800c198 	.word	0x0800c198
 800a3f4:	0800a991 	.word	0x0800a991
 800a3f8:	20000470 	.word	0x20000470
 800a3fc:	2000046c 	.word	0x2000046c
 800a400:	20000458 	.word	0x20000458
 800a404:	20000450 	.word	0x20000450

0800a408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a40c:	4b04      	ldr	r3, [pc, #16]	; (800a420 <vTaskSuspendAll+0x18>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3301      	adds	r3, #1
 800a412:	4a03      	ldr	r2, [pc, #12]	; (800a420 <vTaskSuspendAll+0x18>)
 800a414:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a416:	bf00      	nop
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	20000474 	.word	0x20000474

0800a424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a432:	4b41      	ldr	r3, [pc, #260]	; (800a538 <xTaskResumeAll+0x114>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d109      	bne.n	800a44e <xTaskResumeAll+0x2a>
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	e7fe      	b.n	800a44c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a44e:	f000 fecd 	bl	800b1ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a452:	4b39      	ldr	r3, [pc, #228]	; (800a538 <xTaskResumeAll+0x114>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3b01      	subs	r3, #1
 800a458:	4a37      	ldr	r2, [pc, #220]	; (800a538 <xTaskResumeAll+0x114>)
 800a45a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45c:	4b36      	ldr	r3, [pc, #216]	; (800a538 <xTaskResumeAll+0x114>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d161      	bne.n	800a528 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a464:	4b35      	ldr	r3, [pc, #212]	; (800a53c <xTaskResumeAll+0x118>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05d      	beq.n	800a528 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a46c:	e02e      	b.n	800a4cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a46e:	4b34      	ldr	r3, [pc, #208]	; (800a540 <xTaskResumeAll+0x11c>)
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3318      	adds	r3, #24
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fe ffc2 	bl	8009404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3304      	adds	r3, #4
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe ffbd 	bl	8009404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	2201      	movs	r2, #1
 800a490:	409a      	lsls	r2, r3
 800a492:	4b2c      	ldr	r3, [pc, #176]	; (800a544 <xTaskResumeAll+0x120>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4313      	orrs	r3, r2
 800a498:	4a2a      	ldr	r2, [pc, #168]	; (800a544 <xTaskResumeAll+0x120>)
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4a27      	ldr	r2, [pc, #156]	; (800a548 <xTaskResumeAll+0x124>)
 800a4aa:	441a      	add	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3304      	adds	r3, #4
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	f7fe ff49 	bl	800934a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4bc:	4b23      	ldr	r3, [pc, #140]	; (800a54c <xTaskResumeAll+0x128>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d302      	bcc.n	800a4cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a4c6:	4b22      	ldr	r3, [pc, #136]	; (800a550 <xTaskResumeAll+0x12c>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4cc:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <xTaskResumeAll+0x11c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1cc      	bne.n	800a46e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4da:	f000 fb0b 	bl	800aaf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4de:	4b1d      	ldr	r3, [pc, #116]	; (800a554 <xTaskResumeAll+0x130>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d010      	beq.n	800a50c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4ea:	f000 f837 	bl	800a55c <xTaskIncrementTick>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a4f4:	4b16      	ldr	r3, [pc, #88]	; (800a550 <xTaskResumeAll+0x12c>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f1      	bne.n	800a4ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a506:	4b13      	ldr	r3, [pc, #76]	; (800a554 <xTaskResumeAll+0x130>)
 800a508:	2200      	movs	r2, #0
 800a50a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a50c:	4b10      	ldr	r3, [pc, #64]	; (800a550 <xTaskResumeAll+0x12c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <xTaskResumeAll+0x134>)
 800a51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a528:	f000 fe8e 	bl	800b248 <vPortExitCritical>

	return xAlreadyYielded;
 800a52c:	68bb      	ldr	r3, [r7, #8]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000474 	.word	0x20000474
 800a53c:	2000044c 	.word	0x2000044c
 800a540:	2000040c 	.word	0x2000040c
 800a544:	20000454 	.word	0x20000454
 800a548:	20000350 	.word	0x20000350
 800a54c:	2000034c 	.word	0x2000034c
 800a550:	20000460 	.word	0x20000460
 800a554:	2000045c 	.word	0x2000045c
 800a558:	e000ed04 	.word	0xe000ed04

0800a55c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a562:	2300      	movs	r3, #0
 800a564:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a566:	4b4e      	ldr	r3, [pc, #312]	; (800a6a0 <xTaskIncrementTick+0x144>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f040 8087 	bne.w	800a67e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a570:	4b4c      	ldr	r3, [pc, #304]	; (800a6a4 <xTaskIncrementTick+0x148>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	3301      	adds	r3, #1
 800a576:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a578:	4a4a      	ldr	r2, [pc, #296]	; (800a6a4 <xTaskIncrementTick+0x148>)
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11f      	bne.n	800a5c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a584:	4b48      	ldr	r3, [pc, #288]	; (800a6a8 <xTaskIncrementTick+0x14c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <xTaskIncrementTick+0x46>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	e7fe      	b.n	800a5a0 <xTaskIncrementTick+0x44>
 800a5a2:	4b41      	ldr	r3, [pc, #260]	; (800a6a8 <xTaskIncrementTick+0x14c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60fb      	str	r3, [r7, #12]
 800a5a8:	4b40      	ldr	r3, [pc, #256]	; (800a6ac <xTaskIncrementTick+0x150>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a3e      	ldr	r2, [pc, #248]	; (800a6a8 <xTaskIncrementTick+0x14c>)
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	4a3e      	ldr	r2, [pc, #248]	; (800a6ac <xTaskIncrementTick+0x150>)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	4b3e      	ldr	r3, [pc, #248]	; (800a6b0 <xTaskIncrementTick+0x154>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	4a3c      	ldr	r2, [pc, #240]	; (800a6b0 <xTaskIncrementTick+0x154>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	f000 fa98 	bl	800aaf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5c4:	4b3b      	ldr	r3, [pc, #236]	; (800a6b4 <xTaskIncrementTick+0x158>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d348      	bcc.n	800a660 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5ce:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <xTaskIncrementTick+0x14c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d104      	bne.n	800a5e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d8:	4b36      	ldr	r3, [pc, #216]	; (800a6b4 <xTaskIncrementTick+0x158>)
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295
 800a5de:	601a      	str	r2, [r3, #0]
					break;
 800a5e0:	e03e      	b.n	800a660 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e2:	4b31      	ldr	r3, [pc, #196]	; (800a6a8 <xTaskIncrementTick+0x14c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d203      	bcs.n	800a602 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5fa:	4a2e      	ldr	r2, [pc, #184]	; (800a6b4 <xTaskIncrementTick+0x158>)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a600:	e02e      	b.n	800a660 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	3304      	adds	r3, #4
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fefc 	bl	8009404 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	3318      	adds	r3, #24
 800a618:	4618      	mov	r0, r3
 800a61a:	f7fe fef3 	bl	8009404 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	2201      	movs	r2, #1
 800a624:	409a      	lsls	r2, r3
 800a626:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <xTaskIncrementTick+0x15c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	4a22      	ldr	r2, [pc, #136]	; (800a6b8 <xTaskIncrementTick+0x15c>)
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4a1f      	ldr	r2, [pc, #124]	; (800a6bc <xTaskIncrementTick+0x160>)
 800a63e:	441a      	add	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fe fe7f 	bl	800934a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a650:	4b1b      	ldr	r3, [pc, #108]	; (800a6c0 <xTaskIncrementTick+0x164>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	429a      	cmp	r2, r3
 800a658:	d3b9      	bcc.n	800a5ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	e7b6      	b.n	800a5ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a660:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <xTaskIncrementTick+0x164>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a666:	4915      	ldr	r1, [pc, #84]	; (800a6bc <xTaskIncrementTick+0x160>)
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d907      	bls.n	800a688 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e004      	b.n	800a688 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <xTaskIncrementTick+0x168>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3301      	adds	r3, #1
 800a684:	4a0f      	ldr	r2, [pc, #60]	; (800a6c4 <xTaskIncrementTick+0x168>)
 800a686:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a688:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <xTaskIncrementTick+0x16c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a694:	697b      	ldr	r3, [r7, #20]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000474 	.word	0x20000474
 800a6a4:	20000450 	.word	0x20000450
 800a6a8:	20000404 	.word	0x20000404
 800a6ac:	20000408 	.word	0x20000408
 800a6b0:	20000464 	.word	0x20000464
 800a6b4:	2000046c 	.word	0x2000046c
 800a6b8:	20000454 	.word	0x20000454
 800a6bc:	20000350 	.word	0x20000350
 800a6c0:	2000034c 	.word	0x2000034c
 800a6c4:	2000045c 	.word	0x2000045c
 800a6c8:	20000460 	.word	0x20000460

0800a6cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6d2:	4b26      	ldr	r3, [pc, #152]	; (800a76c <vTaskSwitchContext+0xa0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6da:	4b25      	ldr	r3, [pc, #148]	; (800a770 <vTaskSwitchContext+0xa4>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6e0:	e03e      	b.n	800a760 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a6e2:	4b23      	ldr	r3, [pc, #140]	; (800a770 <vTaskSwitchContext+0xa4>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e8:	4b22      	ldr	r3, [pc, #136]	; (800a774 <vTaskSwitchContext+0xa8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	fab3 f383 	clz	r3, r3
 800a6f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6f6:	7afb      	ldrb	r3, [r7, #11]
 800a6f8:	f1c3 031f 	rsb	r3, r3, #31
 800a6fc:	617b      	str	r3, [r7, #20]
 800a6fe:	491e      	ldr	r1, [pc, #120]	; (800a778 <vTaskSwitchContext+0xac>)
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d109      	bne.n	800a726 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	607b      	str	r3, [r7, #4]
 800a724:	e7fe      	b.n	800a724 <vTaskSwitchContext+0x58>
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a11      	ldr	r2, [pc, #68]	; (800a778 <vTaskSwitchContext+0xac>)
 800a732:	4413      	add	r3, r2
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	605a      	str	r2, [r3, #4]
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3308      	adds	r3, #8
 800a748:	429a      	cmp	r2, r3
 800a74a:	d104      	bne.n	800a756 <vTaskSwitchContext+0x8a>
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	605a      	str	r2, [r3, #4]
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	4a07      	ldr	r2, [pc, #28]	; (800a77c <vTaskSwitchContext+0xb0>)
 800a75e:	6013      	str	r3, [r2, #0]
}
 800a760:	bf00      	nop
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20000474 	.word	0x20000474
 800a770:	20000460 	.word	0x20000460
 800a774:	20000454 	.word	0x20000454
 800a778:	20000350 	.word	0x20000350
 800a77c:	2000034c 	.word	0x2000034c

0800a780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d109      	bne.n	800a7a4 <vTaskPlaceOnEventList+0x24>
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
 800a7a2:	e7fe      	b.n	800a7a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <vTaskPlaceOnEventList+0x44>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3318      	adds	r3, #24
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7fe fdf0 	bl	8009392 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	6838      	ldr	r0, [r7, #0]
 800a7b6:	f000 fb8b 	bl	800aed0 <prvAddCurrentTaskToDelayedList>
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	2000034c 	.word	0x2000034c

0800a7c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <xTaskRemoveFromEventList+0x2a>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60fb      	str	r3, [r7, #12]
 800a7f0:	e7fe      	b.n	800a7f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3318      	adds	r3, #24
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fe fe04 	bl	8009404 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7fc:	4b1d      	ldr	r3, [pc, #116]	; (800a874 <xTaskRemoveFromEventList+0xac>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d11c      	bne.n	800a83e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3304      	adds	r3, #4
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fe fdfb 	bl	8009404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	2201      	movs	r2, #1
 800a814:	409a      	lsls	r2, r3
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <xTaskRemoveFromEventList+0xb0>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	4a16      	ldr	r2, [pc, #88]	; (800a878 <xTaskRemoveFromEventList+0xb0>)
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4a13      	ldr	r2, [pc, #76]	; (800a87c <xTaskRemoveFromEventList+0xb4>)
 800a82e:	441a      	add	r2, r3
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	3304      	adds	r3, #4
 800a834:	4619      	mov	r1, r3
 800a836:	4610      	mov	r0, r2
 800a838:	f7fe fd87 	bl	800934a <vListInsertEnd>
 800a83c:	e005      	b.n	800a84a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	3318      	adds	r3, #24
 800a842:	4619      	mov	r1, r3
 800a844:	480e      	ldr	r0, [pc, #56]	; (800a880 <xTaskRemoveFromEventList+0xb8>)
 800a846:	f7fe fd80 	bl	800934a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <xTaskRemoveFromEventList+0xbc>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	429a      	cmp	r2, r3
 800a856:	d905      	bls.n	800a864 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a858:	2301      	movs	r3, #1
 800a85a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <xTaskRemoveFromEventList+0xc0>)
 800a85e:	2201      	movs	r2, #1
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	e001      	b.n	800a868 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a864:	2300      	movs	r3, #0
 800a866:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a868:	697b      	ldr	r3, [r7, #20]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000474 	.word	0x20000474
 800a878:	20000454 	.word	0x20000454
 800a87c:	20000350 	.word	0x20000350
 800a880:	2000040c 	.word	0x2000040c
 800a884:	2000034c 	.word	0x2000034c
 800a888:	20000460 	.word	0x20000460

0800a88c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a894:	4b06      	ldr	r3, [pc, #24]	; (800a8b0 <vTaskInternalSetTimeOutState+0x24>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a89c:	4b05      	ldr	r3, [pc, #20]	; (800a8b4 <vTaskInternalSetTimeOutState+0x28>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	605a      	str	r2, [r3, #4]
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	20000464 	.word	0x20000464
 800a8b4:	20000450 	.word	0x20000450

0800a8b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <xTaskCheckForTimeOut+0x24>
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	613b      	str	r3, [r7, #16]
 800a8da:	e7fe      	b.n	800a8da <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <xTaskCheckForTimeOut+0x3e>
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	e7fe      	b.n	800a8f4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a8f6:	f000 fc79 	bl	800b1ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a8fa:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <xTaskCheckForTimeOut+0xb8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	69ba      	ldr	r2, [r7, #24]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d102      	bne.n	800a91a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	e023      	b.n	800a962 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4b15      	ldr	r3, [pc, #84]	; (800a974 <xTaskCheckForTimeOut+0xbc>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	429a      	cmp	r2, r3
 800a924:	d007      	beq.n	800a936 <xTaskCheckForTimeOut+0x7e>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d302      	bcc.n	800a936 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	e015      	b.n	800a962 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d20b      	bcs.n	800a958 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	1ad2      	subs	r2, r2, r3
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff ff9d 	bl	800a88c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a952:	2300      	movs	r3, #0
 800a954:	61fb      	str	r3, [r7, #28]
 800a956:	e004      	b.n	800a962 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a95e:	2301      	movs	r3, #1
 800a960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a962:	f000 fc71 	bl	800b248 <vPortExitCritical>

	return xReturn;
 800a966:	69fb      	ldr	r3, [r7, #28]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3720      	adds	r7, #32
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	20000450 	.word	0x20000450
 800a974:	20000464 	.word	0x20000464

0800a978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a97c:	4b03      	ldr	r3, [pc, #12]	; (800a98c <vTaskMissedYield+0x14>)
 800a97e:	2201      	movs	r2, #1
 800a980:	601a      	str	r2, [r3, #0]
}
 800a982:	bf00      	nop
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000460 	.word	0x20000460

0800a990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a998:	f000 f852 	bl	800aa40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a99c:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <prvIdleTask+0x28>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d9f9      	bls.n	800a998 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9a4:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <prvIdleTask+0x2c>)
 800a9a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9b4:	e7f0      	b.n	800a998 <prvIdleTask+0x8>
 800a9b6:	bf00      	nop
 800a9b8:	20000350 	.word	0x20000350
 800a9bc:	e000ed04 	.word	0xe000ed04

0800a9c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	607b      	str	r3, [r7, #4]
 800a9ca:	e00c      	b.n	800a9e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4a12      	ldr	r2, [pc, #72]	; (800aa20 <prvInitialiseTaskLists+0x60>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fc88 	bl	80092f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	607b      	str	r3, [r7, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b06      	cmp	r3, #6
 800a9ea:	d9ef      	bls.n	800a9cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9ec:	480d      	ldr	r0, [pc, #52]	; (800aa24 <prvInitialiseTaskLists+0x64>)
 800a9ee:	f7fe fc7f 	bl	80092f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9f2:	480d      	ldr	r0, [pc, #52]	; (800aa28 <prvInitialiseTaskLists+0x68>)
 800a9f4:	f7fe fc7c 	bl	80092f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9f8:	480c      	ldr	r0, [pc, #48]	; (800aa2c <prvInitialiseTaskLists+0x6c>)
 800a9fa:	f7fe fc79 	bl	80092f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9fe:	480c      	ldr	r0, [pc, #48]	; (800aa30 <prvInitialiseTaskLists+0x70>)
 800aa00:	f7fe fc76 	bl	80092f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa04:	480b      	ldr	r0, [pc, #44]	; (800aa34 <prvInitialiseTaskLists+0x74>)
 800aa06:	f7fe fc73 	bl	80092f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa0a:	4b0b      	ldr	r3, [pc, #44]	; (800aa38 <prvInitialiseTaskLists+0x78>)
 800aa0c:	4a05      	ldr	r2, [pc, #20]	; (800aa24 <prvInitialiseTaskLists+0x64>)
 800aa0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <prvInitialiseTaskLists+0x7c>)
 800aa12:	4a05      	ldr	r2, [pc, #20]	; (800aa28 <prvInitialiseTaskLists+0x68>)
 800aa14:	601a      	str	r2, [r3, #0]
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000350 	.word	0x20000350
 800aa24:	200003dc 	.word	0x200003dc
 800aa28:	200003f0 	.word	0x200003f0
 800aa2c:	2000040c 	.word	0x2000040c
 800aa30:	20000420 	.word	0x20000420
 800aa34:	20000438 	.word	0x20000438
 800aa38:	20000404 	.word	0x20000404
 800aa3c:	20000408 	.word	0x20000408

0800aa40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa46:	e019      	b.n	800aa7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa48:	f000 fbd0 	bl	800b1ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <prvCheckTasksWaitingTermination+0x4c>)
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe fcd3 	bl	8009404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <prvCheckTasksWaitingTermination+0x50>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	4a0a      	ldr	r2, [pc, #40]	; (800aa90 <prvCheckTasksWaitingTermination+0x50>)
 800aa66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa68:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <prvCheckTasksWaitingTermination+0x54>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <prvCheckTasksWaitingTermination+0x54>)
 800aa70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa72:	f000 fbe9 	bl	800b248 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f80e 	bl	800aa98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <prvCheckTasksWaitingTermination+0x54>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e1      	bne.n	800aa48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20000420 	.word	0x20000420
 800aa90:	2000044c 	.word	0x2000044c
 800aa94:	20000434 	.word	0x20000434

0800aa98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d108      	bne.n	800aabc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fd78 	bl	800b5a4 <vPortFree>
				vPortFree( pxTCB );
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fd75 	bl	800b5a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aaba:	e017      	b.n	800aaec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d103      	bne.n	800aace <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fd6c 	bl	800b5a4 <vPortFree>
	}
 800aacc:	e00e      	b.n	800aaec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d009      	beq.n	800aaec <prvDeleteTCB+0x54>
 800aad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aadc:	f383 8811 	msr	BASEPRI, r3
 800aae0:	f3bf 8f6f 	isb	sy
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	60fb      	str	r3, [r7, #12]
 800aaea:	e7fe      	b.n	800aaea <prvDeleteTCB+0x52>
	}
 800aaec:	bf00      	nop
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aafa:	4b0c      	ldr	r3, [pc, #48]	; (800ab2c <prvResetNextTaskUnblockTime+0x38>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <prvResetNextTaskUnblockTime+0x3c>)
 800ab06:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab0c:	e008      	b.n	800ab20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0e:	4b07      	ldr	r3, [pc, #28]	; (800ab2c <prvResetNextTaskUnblockTime+0x38>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4a04      	ldr	r2, [pc, #16]	; (800ab30 <prvResetNextTaskUnblockTime+0x3c>)
 800ab1e:	6013      	str	r3, [r2, #0]
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	20000404 	.word	0x20000404
 800ab30:	2000046c 	.word	0x2000046c

0800ab34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <xTaskGetSchedulerState+0x34>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d102      	bne.n	800ab48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab42:	2301      	movs	r3, #1
 800ab44:	607b      	str	r3, [r7, #4]
 800ab46:	e008      	b.n	800ab5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab48:	4b08      	ldr	r3, [pc, #32]	; (800ab6c <xTaskGetSchedulerState+0x38>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d102      	bne.n	800ab56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab50:	2302      	movs	r3, #2
 800ab52:	607b      	str	r3, [r7, #4]
 800ab54:	e001      	b.n	800ab5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab56:	2300      	movs	r3, #0
 800ab58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab5a:	687b      	ldr	r3, [r7, #4]
	}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	20000458 	.word	0x20000458
 800ab6c:	20000474 	.word	0x20000474

0800ab70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d069      	beq.n	800ac5a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	4b36      	ldr	r3, [pc, #216]	; (800ac64 <xTaskPriorityInherit+0xf4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d259      	bcs.n	800ac48 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db06      	blt.n	800abaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	4b31      	ldr	r3, [pc, #196]	; (800ac64 <xTaskPriorityInherit+0xf4>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	f1c3 0207 	rsb	r2, r3, #7
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6959      	ldr	r1, [r3, #20]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb2:	4613      	mov	r3, r2
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4a2b      	ldr	r2, [pc, #172]	; (800ac68 <xTaskPriorityInherit+0xf8>)
 800abbc:	4413      	add	r3, r2
 800abbe:	4299      	cmp	r1, r3
 800abc0:	d13a      	bne.n	800ac38 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fc1c 	bl	8009404 <uxListRemove>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d115      	bne.n	800abfe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd6:	4924      	ldr	r1, [pc, #144]	; (800ac68 <xTaskPriorityInherit+0xf8>)
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	440b      	add	r3, r1
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xTaskPriorityInherit+0x8e>
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	2201      	movs	r2, #1
 800abee:	fa02 f303 	lsl.w	r3, r2, r3
 800abf2:	43da      	mvns	r2, r3
 800abf4:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <xTaskPriorityInherit+0xfc>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4013      	ands	r3, r2
 800abfa:	4a1c      	ldr	r2, [pc, #112]	; (800ac6c <xTaskPriorityInherit+0xfc>)
 800abfc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800abfe:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <xTaskPriorityInherit+0xf4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	409a      	lsls	r2, r3
 800ac10:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <xTaskPriorityInherit+0xfc>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	4a15      	ldr	r2, [pc, #84]	; (800ac6c <xTaskPriorityInherit+0xfc>)
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <xTaskPriorityInherit+0xf8>)
 800ac28:	441a      	add	r2, r3
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	4619      	mov	r1, r3
 800ac30:	4610      	mov	r0, r2
 800ac32:	f7fe fb8a 	bl	800934a <vListInsertEnd>
 800ac36:	e004      	b.n	800ac42 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ac38:	4b0a      	ldr	r3, [pc, #40]	; (800ac64 <xTaskPriorityInherit+0xf4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ac42:	2301      	movs	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e008      	b.n	800ac5a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <xTaskPriorityInherit+0xf4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d201      	bcs.n	800ac5a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ac56:	2301      	movs	r3, #1
 800ac58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
	}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	2000034c 	.word	0x2000034c
 800ac68:	20000350 	.word	0x20000350
 800ac6c:	20000454 	.word	0x20000454

0800ac70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d06c      	beq.n	800ad60 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac86:	4b39      	ldr	r3, [pc, #228]	; (800ad6c <xTaskPriorityDisinherit+0xfc>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	693a      	ldr	r2, [r7, #16]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d009      	beq.n	800aca4 <xTaskPriorityDisinherit+0x34>
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	e7fe      	b.n	800aca2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <xTaskPriorityDisinherit+0x50>
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	60bb      	str	r3, [r7, #8]
 800acbe:	e7fe      	b.n	800acbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc4:	1e5a      	subs	r2, r3, #1
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d044      	beq.n	800ad60 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d140      	bne.n	800ad60 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fe fb8e 	bl	8009404 <uxListRemove>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d115      	bne.n	800ad1a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf2:	491f      	ldr	r1, [pc, #124]	; (800ad70 <xTaskPriorityDisinherit+0x100>)
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	440b      	add	r3, r1
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <xTaskPriorityDisinherit+0xaa>
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad08:	2201      	movs	r2, #1
 800ad0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0e:	43da      	mvns	r2, r3
 800ad10:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <xTaskPriorityDisinherit+0x104>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4013      	ands	r3, r2
 800ad16:	4a17      	ldr	r2, [pc, #92]	; (800ad74 <xTaskPriorityDisinherit+0x104>)
 800ad18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	f1c3 0207 	rsb	r2, r3, #7
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad32:	2201      	movs	r2, #1
 800ad34:	409a      	lsls	r2, r3
 800ad36:	4b0f      	ldr	r3, [pc, #60]	; (800ad74 <xTaskPriorityDisinherit+0x104>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	4a0d      	ldr	r2, [pc, #52]	; (800ad74 <xTaskPriorityDisinherit+0x104>)
 800ad3e:	6013      	str	r3, [r2, #0]
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad44:	4613      	mov	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4a08      	ldr	r2, [pc, #32]	; (800ad70 <xTaskPriorityDisinherit+0x100>)
 800ad4e:	441a      	add	r2, r3
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3304      	adds	r3, #4
 800ad54:	4619      	mov	r1, r3
 800ad56:	4610      	mov	r0, r2
 800ad58:	f7fe faf7 	bl	800934a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad60:	697b      	ldr	r3, [r7, #20]
	}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	2000034c 	.word	0x2000034c
 800ad70:	20000350 	.word	0x20000350
 800ad74:	20000454 	.word	0x20000454

0800ad78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b088      	sub	sp, #32
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ad86:	2301      	movs	r3, #1
 800ad88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 8081 	beq.w	800ae94 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <vTaskPriorityDisinheritAfterTimeout+0x36>
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	e7fe      	b.n	800adac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d902      	bls.n	800adbe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	e002      	b.n	800adc4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d062      	beq.n	800ae94 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	429a      	cmp	r2, r3
 800add6:	d15d      	bne.n	800ae94 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800add8:	4b30      	ldr	r3, [pc, #192]	; (800ae9c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d109      	bne.n	800adf6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	e7fe      	b.n	800adf4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	db04      	blt.n	800ae14 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	f1c3 0207 	rsb	r2, r3, #7
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	6959      	ldr	r1, [r3, #20]
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4a1f      	ldr	r2, [pc, #124]	; (800aea0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ae24:	4413      	add	r3, r2
 800ae26:	4299      	cmp	r1, r3
 800ae28:	d134      	bne.n	800ae94 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae2a:	69bb      	ldr	r3, [r7, #24]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fae8 	bl	8009404 <uxListRemove>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d115      	bne.n	800ae66 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4918      	ldr	r1, [pc, #96]	; (800aea0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae54:	2201      	movs	r2, #1
 800ae56:	fa02 f303 	lsl.w	r3, r2, r3
 800ae5a:	43da      	mvns	r2, r3
 800ae5c:	4b11      	ldr	r3, [pc, #68]	; (800aea4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4013      	ands	r3, r2
 800ae62:	4a10      	ldr	r2, [pc, #64]	; (800aea4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	409a      	lsls	r2, r3
 800ae6e:	4b0d      	ldr	r3, [pc, #52]	; (800aea4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	4a0b      	ldr	r2, [pc, #44]	; (800aea4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	4413      	add	r3, r2
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ae86:	441a      	add	r2, r3
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	4610      	mov	r0, r2
 800ae90:	f7fe fa5b 	bl	800934a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae94:	bf00      	nop
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	2000034c 	.word	0x2000034c
 800aea0:	20000350 	.word	0x20000350
 800aea4:	20000454 	.word	0x20000454

0800aea8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aeac:	4b07      	ldr	r3, [pc, #28]	; (800aecc <pvTaskIncrementMutexHeldCount+0x24>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d004      	beq.n	800aebe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <pvTaskIncrementMutexHeldCount+0x24>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeba:	3201      	adds	r2, #1
 800aebc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800aebe:	4b03      	ldr	r3, [pc, #12]	; (800aecc <pvTaskIncrementMutexHeldCount+0x24>)
 800aec0:	681b      	ldr	r3, [r3, #0]
	}
 800aec2:	4618      	mov	r0, r3
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	2000034c 	.word	0x2000034c

0800aed0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aeda:	4b29      	ldr	r3, [pc, #164]	; (800af80 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aee0:	4b28      	ldr	r3, [pc, #160]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	3304      	adds	r3, #4
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fe fa8c 	bl	8009404 <uxListRemove>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	2201      	movs	r2, #1
 800aefa:	fa02 f303 	lsl.w	r3, r2, r3
 800aefe:	43da      	mvns	r2, r3
 800af00:	4b21      	ldr	r3, [pc, #132]	; (800af88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4013      	ands	r3, r2
 800af06:	4a20      	ldr	r2, [pc, #128]	; (800af88 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d10a      	bne.n	800af28 <prvAddCurrentTaskToDelayedList+0x58>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d007      	beq.n	800af28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af18:	4b1a      	ldr	r3, [pc, #104]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4619      	mov	r1, r3
 800af20:	481a      	ldr	r0, [pc, #104]	; (800af8c <prvAddCurrentTaskToDelayedList+0xbc>)
 800af22:	f7fe fa12 	bl	800934a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af26:	e026      	b.n	800af76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4413      	add	r3, r2
 800af2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af30:	4b14      	ldr	r3, [pc, #80]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d209      	bcs.n	800af54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af40:	4b13      	ldr	r3, [pc, #76]	; (800af90 <prvAddCurrentTaskToDelayedList+0xc0>)
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	4b0f      	ldr	r3, [pc, #60]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7fe fa20 	bl	8009392 <vListInsert>
}
 800af52:	e010      	b.n	800af76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af54:	4b0f      	ldr	r3, [pc, #60]	; (800af94 <prvAddCurrentTaskToDelayedList+0xc4>)
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <prvAddCurrentTaskToDelayedList+0xb4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4619      	mov	r1, r3
 800af60:	4610      	mov	r0, r2
 800af62:	f7fe fa16 	bl	8009392 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af66:	4b0c      	ldr	r3, [pc, #48]	; (800af98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d202      	bcs.n	800af76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800af70:	4a09      	ldr	r2, [pc, #36]	; (800af98 <prvAddCurrentTaskToDelayedList+0xc8>)
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6013      	str	r3, [r2, #0]
}
 800af76:	bf00      	nop
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20000450 	.word	0x20000450
 800af84:	2000034c 	.word	0x2000034c
 800af88:	20000454 	.word	0x20000454
 800af8c:	20000438 	.word	0x20000438
 800af90:	20000408 	.word	0x20000408
 800af94:	20000404 	.word	0x20000404
 800af98:	2000046c 	.word	0x2000046c

0800af9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3b04      	subs	r3, #4
 800afac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800afb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3b04      	subs	r3, #4
 800afba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f023 0201 	bic.w	r2, r3, #1
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	3b04      	subs	r3, #4
 800afca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800afcc:	4a0c      	ldr	r2, [pc, #48]	; (800b000 <pxPortInitialiseStack+0x64>)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3b14      	subs	r3, #20
 800afd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3b04      	subs	r3, #4
 800afe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f06f 0202 	mvn.w	r2, #2
 800afea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3b20      	subs	r3, #32
 800aff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aff2:	68fb      	ldr	r3, [r7, #12]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3714      	adds	r7, #20
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr
 800b000:	0800b005 	.word	0x0800b005

0800b004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b00e:	4b11      	ldr	r3, [pc, #68]	; (800b054 <prvTaskExitError+0x50>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b016:	d009      	beq.n	800b02c <prvTaskExitError+0x28>
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	e7fe      	b.n	800b02a <prvTaskExitError+0x26>
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b03e:	bf00      	nop
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d0fc      	beq.n	800b040 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	2000000c 	.word	0x2000000c
	...

0800b060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b060:	4b07      	ldr	r3, [pc, #28]	; (800b080 <pxCurrentTCBConst2>)
 800b062:	6819      	ldr	r1, [r3, #0]
 800b064:	6808      	ldr	r0, [r1, #0]
 800b066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06a:	f380 8809 	msr	PSP, r0
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f04f 0000 	mov.w	r0, #0
 800b076:	f380 8811 	msr	BASEPRI, r0
 800b07a:	4770      	bx	lr
 800b07c:	f3af 8000 	nop.w

0800b080 <pxCurrentTCBConst2>:
 800b080:	2000034c 	.word	0x2000034c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop

0800b088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b088:	4808      	ldr	r0, [pc, #32]	; (800b0ac <prvPortStartFirstTask+0x24>)
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	6800      	ldr	r0, [r0, #0]
 800b08e:	f380 8808 	msr	MSP, r0
 800b092:	f04f 0000 	mov.w	r0, #0
 800b096:	f380 8814 	msr	CONTROL, r0
 800b09a:	b662      	cpsie	i
 800b09c:	b661      	cpsie	f
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	df00      	svc	0
 800b0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0aa:	bf00      	nop
 800b0ac:	e000ed08 	.word	0xe000ed08

0800b0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0b6:	4b44      	ldr	r3, [pc, #272]	; (800b1c8 <xPortStartScheduler+0x118>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a44      	ldr	r2, [pc, #272]	; (800b1cc <xPortStartScheduler+0x11c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d109      	bne.n	800b0d4 <xPortStartScheduler+0x24>
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	613b      	str	r3, [r7, #16]
 800b0d2:	e7fe      	b.n	800b0d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0d4:	4b3c      	ldr	r3, [pc, #240]	; (800b1c8 <xPortStartScheduler+0x118>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a3d      	ldr	r2, [pc, #244]	; (800b1d0 <xPortStartScheduler+0x120>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d109      	bne.n	800b0f2 <xPortStartScheduler+0x42>
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60fb      	str	r3, [r7, #12]
 800b0f0:	e7fe      	b.n	800b0f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0f2:	4b38      	ldr	r3, [pc, #224]	; (800b1d4 <xPortStartScheduler+0x124>)
 800b0f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	22ff      	movs	r2, #255	; 0xff
 800b102:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b10c:	78fb      	ldrb	r3, [r7, #3]
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b114:	b2da      	uxtb	r2, r3
 800b116:	4b30      	ldr	r3, [pc, #192]	; (800b1d8 <xPortStartScheduler+0x128>)
 800b118:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b11a:	4b30      	ldr	r3, [pc, #192]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b11c:	2207      	movs	r2, #7
 800b11e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b120:	e009      	b.n	800b136 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b122:	4b2e      	ldr	r3, [pc, #184]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	3b01      	subs	r3, #1
 800b128:	4a2c      	ldr	r2, [pc, #176]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b12a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b12c:	78fb      	ldrb	r3, [r7, #3]
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	b2db      	uxtb	r3, r3
 800b134:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13e:	2b80      	cmp	r3, #128	; 0x80
 800b140:	d0ef      	beq.n	800b122 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b142:	4b26      	ldr	r3, [pc, #152]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f1c3 0307 	rsb	r3, r3, #7
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	d009      	beq.n	800b162 <xPortStartScheduler+0xb2>
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	e7fe      	b.n	800b160 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b162:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	021b      	lsls	r3, r3, #8
 800b168:	4a1c      	ldr	r2, [pc, #112]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b16a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b16c:	4b1b      	ldr	r3, [pc, #108]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b174:	4a19      	ldr	r2, [pc, #100]	; (800b1dc <xPortStartScheduler+0x12c>)
 800b176:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b180:	4b17      	ldr	r3, [pc, #92]	; (800b1e0 <xPortStartScheduler+0x130>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a16      	ldr	r2, [pc, #88]	; (800b1e0 <xPortStartScheduler+0x130>)
 800b186:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b18a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b18c:	4b14      	ldr	r3, [pc, #80]	; (800b1e0 <xPortStartScheduler+0x130>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a13      	ldr	r2, [pc, #76]	; (800b1e0 <xPortStartScheduler+0x130>)
 800b192:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b196:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b198:	f000 f8d6 	bl	800b348 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b19c:	4b11      	ldr	r3, [pc, #68]	; (800b1e4 <xPortStartScheduler+0x134>)
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1a2:	f000 f8f5 	bl	800b390 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1a6:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <xPortStartScheduler+0x138>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <xPortStartScheduler+0x138>)
 800b1ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1b2:	f7ff ff69 	bl	800b088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1b6:	f7ff fa89 	bl	800a6cc <vTaskSwitchContext>
	prvTaskExitError();
 800b1ba:	f7ff ff23 	bl	800b004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	e000ed00 	.word	0xe000ed00
 800b1cc:	410fc271 	.word	0x410fc271
 800b1d0:	410fc270 	.word	0x410fc270
 800b1d4:	e000e400 	.word	0xe000e400
 800b1d8:	20000478 	.word	0x20000478
 800b1dc:	2000047c 	.word	0x2000047c
 800b1e0:	e000ed20 	.word	0xe000ed20
 800b1e4:	2000000c 	.word	0x2000000c
 800b1e8:	e000ef34 	.word	0xe000ef34

0800b1ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b204:	4b0e      	ldr	r3, [pc, #56]	; (800b240 <vPortEnterCritical+0x54>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	4a0d      	ldr	r2, [pc, #52]	; (800b240 <vPortEnterCritical+0x54>)
 800b20c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b20e:	4b0c      	ldr	r3, [pc, #48]	; (800b240 <vPortEnterCritical+0x54>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d10e      	bne.n	800b234 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b216:	4b0b      	ldr	r3, [pc, #44]	; (800b244 <vPortEnterCritical+0x58>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d009      	beq.n	800b234 <vPortEnterCritical+0x48>
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	e7fe      	b.n	800b232 <vPortEnterCritical+0x46>
	}
}
 800b234:	bf00      	nop
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	2000000c 	.word	0x2000000c
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b24e:	4b11      	ldr	r3, [pc, #68]	; (800b294 <vPortExitCritical+0x4c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d109      	bne.n	800b26a <vPortExitCritical+0x22>
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	607b      	str	r3, [r7, #4]
 800b268:	e7fe      	b.n	800b268 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b26a:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <vPortExitCritical+0x4c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3b01      	subs	r3, #1
 800b270:	4a08      	ldr	r2, [pc, #32]	; (800b294 <vPortExitCritical+0x4c>)
 800b272:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b274:	4b07      	ldr	r3, [pc, #28]	; (800b294 <vPortExitCritical+0x4c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d104      	bne.n	800b286 <vPortExitCritical+0x3e>
 800b27c:	2300      	movs	r3, #0
 800b27e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b286:	bf00      	nop
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	2000000c 	.word	0x2000000c
	...

0800b2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2a0:	f3ef 8009 	mrs	r0, PSP
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	4b15      	ldr	r3, [pc, #84]	; (800b300 <pxCurrentTCBConst>)
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	f01e 0f10 	tst.w	lr, #16
 800b2b0:	bf08      	it	eq
 800b2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ba:	6010      	str	r0, [r2, #0]
 800b2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b2c4:	f380 8811 	msr	BASEPRI, r0
 800b2c8:	f3bf 8f4f 	dsb	sy
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f7ff f9fc 	bl	800a6cc <vTaskSwitchContext>
 800b2d4:	f04f 0000 	mov.w	r0, #0
 800b2d8:	f380 8811 	msr	BASEPRI, r0
 800b2dc:	bc09      	pop	{r0, r3}
 800b2de:	6819      	ldr	r1, [r3, #0]
 800b2e0:	6808      	ldr	r0, [r1, #0]
 800b2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e6:	f01e 0f10 	tst.w	lr, #16
 800b2ea:	bf08      	it	eq
 800b2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2f0:	f380 8809 	msr	PSP, r0
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	f3af 8000 	nop.w

0800b300 <pxCurrentTCBConst>:
 800b300:	2000034c 	.word	0x2000034c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop

0800b308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b320:	f7ff f91c 	bl	800a55c <xTaskIncrementTick>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b32a:	4b06      	ldr	r3, [pc, #24]	; (800b344 <SysTick_Handler+0x3c>)
 800b32c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	e000ed04 	.word	0xe000ed04

0800b348 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <vPortSetupTimerInterrupt+0x34>)
 800b34e:	2200      	movs	r2, #0
 800b350:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b352:	4b0b      	ldr	r3, [pc, #44]	; (800b380 <vPortSetupTimerInterrupt+0x38>)
 800b354:	2200      	movs	r2, #0
 800b356:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b358:	4b0a      	ldr	r3, [pc, #40]	; (800b384 <vPortSetupTimerInterrupt+0x3c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <vPortSetupTimerInterrupt+0x40>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	099b      	lsrs	r3, r3, #6
 800b364:	4a09      	ldr	r2, [pc, #36]	; (800b38c <vPortSetupTimerInterrupt+0x44>)
 800b366:	3b01      	subs	r3, #1
 800b368:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b36a:	4b04      	ldr	r3, [pc, #16]	; (800b37c <vPortSetupTimerInterrupt+0x34>)
 800b36c:	2207      	movs	r2, #7
 800b36e:	601a      	str	r2, [r3, #0]
}
 800b370:	bf00      	nop
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	e000e010 	.word	0xe000e010
 800b380:	e000e018 	.word	0xe000e018
 800b384:	20000000 	.word	0x20000000
 800b388:	10624dd3 	.word	0x10624dd3
 800b38c:	e000e014 	.word	0xe000e014

0800b390 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b390:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3a0 <vPortEnableVFP+0x10>
 800b394:	6801      	ldr	r1, [r0, #0]
 800b396:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b39a:	6001      	str	r1, [r0, #0]
 800b39c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b39e:	bf00      	nop
 800b3a0:	e000ed88 	.word	0xe000ed88

0800b3a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b3aa:	f3ef 8305 	mrs	r3, IPSR
 800b3ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b0f      	cmp	r3, #15
 800b3b4:	d913      	bls.n	800b3de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b3b6:	4a16      	ldr	r2, [pc, #88]	; (800b410 <vPortValidateInterruptPriority+0x6c>)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3c0:	4b14      	ldr	r3, [pc, #80]	; (800b414 <vPortValidateInterruptPriority+0x70>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	7afa      	ldrb	r2, [r7, #11]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d209      	bcs.n	800b3de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	607b      	str	r3, [r7, #4]
 800b3dc:	e7fe      	b.n	800b3dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3de:	4b0e      	ldr	r3, [pc, #56]	; (800b418 <vPortValidateInterruptPriority+0x74>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <vPortValidateInterruptPriority+0x78>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d909      	bls.n	800b402 <vPortValidateInterruptPriority+0x5e>
 800b3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f2:	f383 8811 	msr	BASEPRI, r3
 800b3f6:	f3bf 8f6f 	isb	sy
 800b3fa:	f3bf 8f4f 	dsb	sy
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	e7fe      	b.n	800b400 <vPortValidateInterruptPriority+0x5c>
	}
 800b402:	bf00      	nop
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	e000e3f0 	.word	0xe000e3f0
 800b414:	20000478 	.word	0x20000478
 800b418:	e000ed0c 	.word	0xe000ed0c
 800b41c:	2000047c 	.word	0x2000047c

0800b420 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b08a      	sub	sp, #40	; 0x28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b42c:	f7fe ffec 	bl	800a408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b430:	4b57      	ldr	r3, [pc, #348]	; (800b590 <pvPortMalloc+0x170>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b438:	f000 f90c 	bl	800b654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b43c:	4b55      	ldr	r3, [pc, #340]	; (800b594 <pvPortMalloc+0x174>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4013      	ands	r3, r2
 800b444:	2b00      	cmp	r3, #0
 800b446:	f040 808c 	bne.w	800b562 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01c      	beq.n	800b48a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b450:	2208      	movs	r2, #8
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4413      	add	r3, r2
 800b456:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d013      	beq.n	800b48a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f023 0307 	bic.w	r3, r3, #7
 800b468:	3308      	adds	r3, #8
 800b46a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f003 0307 	and.w	r3, r3, #7
 800b472:	2b00      	cmp	r3, #0
 800b474:	d009      	beq.n	800b48a <pvPortMalloc+0x6a>
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	f383 8811 	msr	BASEPRI, r3
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	f3bf 8f4f 	dsb	sy
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	e7fe      	b.n	800b488 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d068      	beq.n	800b562 <pvPortMalloc+0x142>
 800b490:	4b41      	ldr	r3, [pc, #260]	; (800b598 <pvPortMalloc+0x178>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	429a      	cmp	r2, r3
 800b498:	d863      	bhi.n	800b562 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b49a:	4b40      	ldr	r3, [pc, #256]	; (800b59c <pvPortMalloc+0x17c>)
 800b49c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b49e:	4b3f      	ldr	r3, [pc, #252]	; (800b59c <pvPortMalloc+0x17c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4a4:	e004      	b.n	800b4b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d903      	bls.n	800b4c2 <pvPortMalloc+0xa2>
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1f1      	bne.n	800b4a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4c2:	4b33      	ldr	r3, [pc, #204]	; (800b590 <pvPortMalloc+0x170>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d04a      	beq.n	800b562 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	4413      	add	r3, r2
 800b4d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	6a3b      	ldr	r3, [r7, #32]
 800b4dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	1ad2      	subs	r2, r2, r3
 800b4e6:	2308      	movs	r3, #8
 800b4e8:	005b      	lsls	r3, r3, #1
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d91e      	bls.n	800b52c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	f003 0307 	and.w	r3, r3, #7
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d009      	beq.n	800b514 <pvPortMalloc+0xf4>
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	613b      	str	r3, [r7, #16]
 800b512:	e7fe      	b.n	800b512 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	1ad2      	subs	r2, r2, r3
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b526:	69b8      	ldr	r0, [r7, #24]
 800b528:	f000 f8f6 	bl	800b718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b52c:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <pvPortMalloc+0x178>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	4a18      	ldr	r2, [pc, #96]	; (800b598 <pvPortMalloc+0x178>)
 800b538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b53a:	4b17      	ldr	r3, [pc, #92]	; (800b598 <pvPortMalloc+0x178>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	4b18      	ldr	r3, [pc, #96]	; (800b5a0 <pvPortMalloc+0x180>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	429a      	cmp	r2, r3
 800b544:	d203      	bcs.n	800b54e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <pvPortMalloc+0x178>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a15      	ldr	r2, [pc, #84]	; (800b5a0 <pvPortMalloc+0x180>)
 800b54c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	4b10      	ldr	r3, [pc, #64]	; (800b594 <pvPortMalloc+0x174>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	431a      	orrs	r2, r3
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b562:	f7fe ff5f 	bl	800a424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	f003 0307 	and.w	r3, r3, #7
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d009      	beq.n	800b584 <pvPortMalloc+0x164>
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e7fe      	b.n	800b582 <pvPortMalloc+0x162>
	return pvReturn;
 800b584:	69fb      	ldr	r3, [r7, #28]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3728      	adds	r7, #40	; 0x28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20004088 	.word	0x20004088
 800b594:	20004094 	.word	0x20004094
 800b598:	2000408c 	.word	0x2000408c
 800b59c:	20004080 	.word	0x20004080
 800b5a0:	20004090 	.word	0x20004090

0800b5a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d046      	beq.n	800b644 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5b6:	2308      	movs	r3, #8
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	4413      	add	r3, r2
 800b5be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	685a      	ldr	r2, [r3, #4]
 800b5c8:	4b20      	ldr	r3, [pc, #128]	; (800b64c <vPortFree+0xa8>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <vPortFree+0x42>
 800b5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e7fe      	b.n	800b5e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d009      	beq.n	800b602 <vPortFree+0x5e>
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	60bb      	str	r3, [r7, #8]
 800b600:	e7fe      	b.n	800b600 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	4b11      	ldr	r3, [pc, #68]	; (800b64c <vPortFree+0xa8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4013      	ands	r3, r2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d019      	beq.n	800b644 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d115      	bne.n	800b644 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <vPortFree+0xa8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	43db      	mvns	r3, r3
 800b622:	401a      	ands	r2, r3
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b628:	f7fe feee 	bl	800a408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	685a      	ldr	r2, [r3, #4]
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <vPortFree+0xac>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4413      	add	r3, r2
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <vPortFree+0xac>)
 800b638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 f86c 	bl	800b718 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b640:	f7fe fef0 	bl	800a424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b644:	bf00      	nop
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	20004094 	.word	0x20004094
 800b650:	2000408c 	.word	0x2000408c

0800b654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b65a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <prvHeapInit+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3307      	adds	r3, #7
 800b672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <prvHeapInit+0xac>)
 800b684:	4413      	add	r3, r2
 800b686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b68c:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <prvHeapInit+0xb0>)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b692:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <prvHeapInit+0xb0>)
 800b694:	2200      	movs	r2, #0
 800b696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0307 	bic.w	r3, r3, #7
 800b6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <prvHeapInit+0xb4>)
 800b6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <prvHeapInit+0xb4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <prvHeapInit+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvHeapInit+0xb4>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <prvHeapInit+0xb8>)
 800b6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <prvHeapInit+0xbc>)
 800b6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <prvHeapInit+0xc0>)
 800b6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	20000480 	.word	0x20000480
 800b704:	20004080 	.word	0x20004080
 800b708:	20004088 	.word	0x20004088
 800b70c:	20004090 	.word	0x20004090
 800b710:	2000408c 	.word	0x2000408c
 800b714:	20004094 	.word	0x20004094

0800b718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b720:	4b28      	ldr	r3, [pc, #160]	; (800b7c4 <prvInsertBlockIntoFreeList+0xac>)
 800b722:	60fb      	str	r3, [r7, #12]
 800b724:	e002      	b.n	800b72c <prvInsertBlockIntoFreeList+0x14>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d8f7      	bhi.n	800b726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d108      	bne.n	800b75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	441a      	add	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d118      	bne.n	800b7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d00d      	beq.n	800b796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e008      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d002      	beq.n	800b7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20004080 	.word	0x20004080
 800b7c8:	20004088 	.word	0x20004088

0800b7cc <__errno>:
 800b7cc:	4b01      	ldr	r3, [pc, #4]	; (800b7d4 <__errno+0x8>)
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	20000010 	.word	0x20000010

0800b7d8 <__libc_init_array>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	4e0d      	ldr	r6, [pc, #52]	; (800b810 <__libc_init_array+0x38>)
 800b7dc:	4c0d      	ldr	r4, [pc, #52]	; (800b814 <__libc_init_array+0x3c>)
 800b7de:	1ba4      	subs	r4, r4, r6
 800b7e0:	10a4      	asrs	r4, r4, #2
 800b7e2:	2500      	movs	r5, #0
 800b7e4:	42a5      	cmp	r5, r4
 800b7e6:	d109      	bne.n	800b7fc <__libc_init_array+0x24>
 800b7e8:	4e0b      	ldr	r6, [pc, #44]	; (800b818 <__libc_init_array+0x40>)
 800b7ea:	4c0c      	ldr	r4, [pc, #48]	; (800b81c <__libc_init_array+0x44>)
 800b7ec:	f000 fc28 	bl	800c040 <_init>
 800b7f0:	1ba4      	subs	r4, r4, r6
 800b7f2:	10a4      	asrs	r4, r4, #2
 800b7f4:	2500      	movs	r5, #0
 800b7f6:	42a5      	cmp	r5, r4
 800b7f8:	d105      	bne.n	800b806 <__libc_init_array+0x2e>
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b800:	4798      	blx	r3
 800b802:	3501      	adds	r5, #1
 800b804:	e7ee      	b.n	800b7e4 <__libc_init_array+0xc>
 800b806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b80a:	4798      	blx	r3
 800b80c:	3501      	adds	r5, #1
 800b80e:	e7f2      	b.n	800b7f6 <__libc_init_array+0x1e>
 800b810:	0800c1fc 	.word	0x0800c1fc
 800b814:	0800c1fc 	.word	0x0800c1fc
 800b818:	0800c1fc 	.word	0x0800c1fc
 800b81c:	0800c200 	.word	0x0800c200

0800b820 <memcpy>:
 800b820:	b510      	push	{r4, lr}
 800b822:	1e43      	subs	r3, r0, #1
 800b824:	440a      	add	r2, r1
 800b826:	4291      	cmp	r1, r2
 800b828:	d100      	bne.n	800b82c <memcpy+0xc>
 800b82a:	bd10      	pop	{r4, pc}
 800b82c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b830:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b834:	e7f7      	b.n	800b826 <memcpy+0x6>

0800b836 <memset>:
 800b836:	4402      	add	r2, r0
 800b838:	4603      	mov	r3, r0
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d100      	bne.n	800b840 <memset+0xa>
 800b83e:	4770      	bx	lr
 800b840:	f803 1b01 	strb.w	r1, [r3], #1
 800b844:	e7f9      	b.n	800b83a <memset+0x4>
	...

0800b848 <siprintf>:
 800b848:	b40e      	push	{r1, r2, r3}
 800b84a:	b500      	push	{lr}
 800b84c:	b09c      	sub	sp, #112	; 0x70
 800b84e:	ab1d      	add	r3, sp, #116	; 0x74
 800b850:	9002      	str	r0, [sp, #8]
 800b852:	9006      	str	r0, [sp, #24]
 800b854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b858:	4809      	ldr	r0, [pc, #36]	; (800b880 <siprintf+0x38>)
 800b85a:	9107      	str	r1, [sp, #28]
 800b85c:	9104      	str	r1, [sp, #16]
 800b85e:	4909      	ldr	r1, [pc, #36]	; (800b884 <siprintf+0x3c>)
 800b860:	f853 2b04 	ldr.w	r2, [r3], #4
 800b864:	9105      	str	r1, [sp, #20]
 800b866:	6800      	ldr	r0, [r0, #0]
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	a902      	add	r1, sp, #8
 800b86c:	f000 f866 	bl	800b93c <_svfiprintf_r>
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	2200      	movs	r2, #0
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	b01c      	add	sp, #112	; 0x70
 800b878:	f85d eb04 	ldr.w	lr, [sp], #4
 800b87c:	b003      	add	sp, #12
 800b87e:	4770      	bx	lr
 800b880:	20000010 	.word	0x20000010
 800b884:	ffff0208 	.word	0xffff0208

0800b888 <__ssputs_r>:
 800b888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b88c:	688e      	ldr	r6, [r1, #8]
 800b88e:	429e      	cmp	r6, r3
 800b890:	4682      	mov	sl, r0
 800b892:	460c      	mov	r4, r1
 800b894:	4690      	mov	r8, r2
 800b896:	4699      	mov	r9, r3
 800b898:	d837      	bhi.n	800b90a <__ssputs_r+0x82>
 800b89a:	898a      	ldrh	r2, [r1, #12]
 800b89c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8a0:	d031      	beq.n	800b906 <__ssputs_r+0x7e>
 800b8a2:	6825      	ldr	r5, [r4, #0]
 800b8a4:	6909      	ldr	r1, [r1, #16]
 800b8a6:	1a6f      	subs	r7, r5, r1
 800b8a8:	6965      	ldr	r5, [r4, #20]
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b8b4:	f109 0301 	add.w	r3, r9, #1
 800b8b8:	443b      	add	r3, r7
 800b8ba:	429d      	cmp	r5, r3
 800b8bc:	bf38      	it	cc
 800b8be:	461d      	movcc	r5, r3
 800b8c0:	0553      	lsls	r3, r2, #21
 800b8c2:	d530      	bpl.n	800b926 <__ssputs_r+0x9e>
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	f000 fb21 	bl	800bf0c <_malloc_r>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	b950      	cbnz	r0, 800b8e4 <__ssputs_r+0x5c>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	f8ca 3000 	str.w	r3, [sl]
 800b8d4:	89a3      	ldrh	r3, [r4, #12]
 800b8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8da:	81a3      	strh	r3, [r4, #12]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e4:	463a      	mov	r2, r7
 800b8e6:	6921      	ldr	r1, [r4, #16]
 800b8e8:	f7ff ff9a 	bl	800b820 <memcpy>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	6126      	str	r6, [r4, #16]
 800b8fa:	6165      	str	r5, [r4, #20]
 800b8fc:	443e      	add	r6, r7
 800b8fe:	1bed      	subs	r5, r5, r7
 800b900:	6026      	str	r6, [r4, #0]
 800b902:	60a5      	str	r5, [r4, #8]
 800b904:	464e      	mov	r6, r9
 800b906:	454e      	cmp	r6, r9
 800b908:	d900      	bls.n	800b90c <__ssputs_r+0x84>
 800b90a:	464e      	mov	r6, r9
 800b90c:	4632      	mov	r2, r6
 800b90e:	4641      	mov	r1, r8
 800b910:	6820      	ldr	r0, [r4, #0]
 800b912:	f000 fa93 	bl	800be3c <memmove>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	1b9b      	subs	r3, r3, r6
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	441e      	add	r6, r3
 800b920:	6026      	str	r6, [r4, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	e7dc      	b.n	800b8e0 <__ssputs_r+0x58>
 800b926:	462a      	mov	r2, r5
 800b928:	f000 fb4a 	bl	800bfc0 <_realloc_r>
 800b92c:	4606      	mov	r6, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1e2      	bne.n	800b8f8 <__ssputs_r+0x70>
 800b932:	6921      	ldr	r1, [r4, #16]
 800b934:	4650      	mov	r0, sl
 800b936:	f000 fa9b 	bl	800be70 <_free_r>
 800b93a:	e7c8      	b.n	800b8ce <__ssputs_r+0x46>

0800b93c <_svfiprintf_r>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	461d      	mov	r5, r3
 800b942:	898b      	ldrh	r3, [r1, #12]
 800b944:	061f      	lsls	r7, r3, #24
 800b946:	b09d      	sub	sp, #116	; 0x74
 800b948:	4680      	mov	r8, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	4616      	mov	r6, r2
 800b94e:	d50f      	bpl.n	800b970 <_svfiprintf_r+0x34>
 800b950:	690b      	ldr	r3, [r1, #16]
 800b952:	b96b      	cbnz	r3, 800b970 <_svfiprintf_r+0x34>
 800b954:	2140      	movs	r1, #64	; 0x40
 800b956:	f000 fad9 	bl	800bf0c <_malloc_r>
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	6120      	str	r0, [r4, #16]
 800b95e:	b928      	cbnz	r0, 800b96c <_svfiprintf_r+0x30>
 800b960:	230c      	movs	r3, #12
 800b962:	f8c8 3000 	str.w	r3, [r8]
 800b966:	f04f 30ff 	mov.w	r0, #4294967295
 800b96a:	e0c8      	b.n	800bafe <_svfiprintf_r+0x1c2>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	6163      	str	r3, [r4, #20]
 800b970:	2300      	movs	r3, #0
 800b972:	9309      	str	r3, [sp, #36]	; 0x24
 800b974:	2320      	movs	r3, #32
 800b976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b97a:	2330      	movs	r3, #48	; 0x30
 800b97c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b980:	9503      	str	r5, [sp, #12]
 800b982:	f04f 0b01 	mov.w	fp, #1
 800b986:	4637      	mov	r7, r6
 800b988:	463d      	mov	r5, r7
 800b98a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b98e:	b10b      	cbz	r3, 800b994 <_svfiprintf_r+0x58>
 800b990:	2b25      	cmp	r3, #37	; 0x25
 800b992:	d13e      	bne.n	800ba12 <_svfiprintf_r+0xd6>
 800b994:	ebb7 0a06 	subs.w	sl, r7, r6
 800b998:	d00b      	beq.n	800b9b2 <_svfiprintf_r+0x76>
 800b99a:	4653      	mov	r3, sl
 800b99c:	4632      	mov	r2, r6
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	f7ff ff71 	bl	800b888 <__ssputs_r>
 800b9a6:	3001      	adds	r0, #1
 800b9a8:	f000 80a4 	beq.w	800baf4 <_svfiprintf_r+0x1b8>
 800b9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ae:	4453      	add	r3, sl
 800b9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b2:	783b      	ldrb	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 809d 	beq.w	800baf4 <_svfiprintf_r+0x1b8>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ce:	462f      	mov	r7, r5
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b9d6:	4850      	ldr	r0, [pc, #320]	; (800bb18 <_svfiprintf_r+0x1dc>)
 800b9d8:	f7f4 fc12 	bl	8000200 <memchr>
 800b9dc:	9b04      	ldr	r3, [sp, #16]
 800b9de:	b9d0      	cbnz	r0, 800ba16 <_svfiprintf_r+0xda>
 800b9e0:	06d9      	lsls	r1, r3, #27
 800b9e2:	bf44      	itt	mi
 800b9e4:	2220      	movmi	r2, #32
 800b9e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9ea:	071a      	lsls	r2, r3, #28
 800b9ec:	bf44      	itt	mi
 800b9ee:	222b      	movmi	r2, #43	; 0x2b
 800b9f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9f4:	782a      	ldrb	r2, [r5, #0]
 800b9f6:	2a2a      	cmp	r2, #42	; 0x2a
 800b9f8:	d015      	beq.n	800ba26 <_svfiprintf_r+0xea>
 800b9fa:	9a07      	ldr	r2, [sp, #28]
 800b9fc:	462f      	mov	r7, r5
 800b9fe:	2000      	movs	r0, #0
 800ba00:	250a      	movs	r5, #10
 800ba02:	4639      	mov	r1, r7
 800ba04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba08:	3b30      	subs	r3, #48	; 0x30
 800ba0a:	2b09      	cmp	r3, #9
 800ba0c:	d94d      	bls.n	800baaa <_svfiprintf_r+0x16e>
 800ba0e:	b1b8      	cbz	r0, 800ba40 <_svfiprintf_r+0x104>
 800ba10:	e00f      	b.n	800ba32 <_svfiprintf_r+0xf6>
 800ba12:	462f      	mov	r7, r5
 800ba14:	e7b8      	b.n	800b988 <_svfiprintf_r+0x4c>
 800ba16:	4a40      	ldr	r2, [pc, #256]	; (800bb18 <_svfiprintf_r+0x1dc>)
 800ba18:	1a80      	subs	r0, r0, r2
 800ba1a:	fa0b f000 	lsl.w	r0, fp, r0
 800ba1e:	4318      	orrs	r0, r3
 800ba20:	9004      	str	r0, [sp, #16]
 800ba22:	463d      	mov	r5, r7
 800ba24:	e7d3      	b.n	800b9ce <_svfiprintf_r+0x92>
 800ba26:	9a03      	ldr	r2, [sp, #12]
 800ba28:	1d11      	adds	r1, r2, #4
 800ba2a:	6812      	ldr	r2, [r2, #0]
 800ba2c:	9103      	str	r1, [sp, #12]
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	db01      	blt.n	800ba36 <_svfiprintf_r+0xfa>
 800ba32:	9207      	str	r2, [sp, #28]
 800ba34:	e004      	b.n	800ba40 <_svfiprintf_r+0x104>
 800ba36:	4252      	negs	r2, r2
 800ba38:	f043 0302 	orr.w	r3, r3, #2
 800ba3c:	9207      	str	r2, [sp, #28]
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	783b      	ldrb	r3, [r7, #0]
 800ba42:	2b2e      	cmp	r3, #46	; 0x2e
 800ba44:	d10c      	bne.n	800ba60 <_svfiprintf_r+0x124>
 800ba46:	787b      	ldrb	r3, [r7, #1]
 800ba48:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4a:	d133      	bne.n	800bab4 <_svfiprintf_r+0x178>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	1d1a      	adds	r2, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	9203      	str	r2, [sp, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfb8      	it	lt
 800ba58:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba5c:	3702      	adds	r7, #2
 800ba5e:	9305      	str	r3, [sp, #20]
 800ba60:	4d2e      	ldr	r5, [pc, #184]	; (800bb1c <_svfiprintf_r+0x1e0>)
 800ba62:	7839      	ldrb	r1, [r7, #0]
 800ba64:	2203      	movs	r2, #3
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7f4 fbca 	bl	8000200 <memchr>
 800ba6c:	b138      	cbz	r0, 800ba7e <_svfiprintf_r+0x142>
 800ba6e:	2340      	movs	r3, #64	; 0x40
 800ba70:	1b40      	subs	r0, r0, r5
 800ba72:	fa03 f000 	lsl.w	r0, r3, r0
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	4303      	orrs	r3, r0
 800ba7a:	3701      	adds	r7, #1
 800ba7c:	9304      	str	r3, [sp, #16]
 800ba7e:	7839      	ldrb	r1, [r7, #0]
 800ba80:	4827      	ldr	r0, [pc, #156]	; (800bb20 <_svfiprintf_r+0x1e4>)
 800ba82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba86:	2206      	movs	r2, #6
 800ba88:	1c7e      	adds	r6, r7, #1
 800ba8a:	f7f4 fbb9 	bl	8000200 <memchr>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d038      	beq.n	800bb04 <_svfiprintf_r+0x1c8>
 800ba92:	4b24      	ldr	r3, [pc, #144]	; (800bb24 <_svfiprintf_r+0x1e8>)
 800ba94:	bb13      	cbnz	r3, 800badc <_svfiprintf_r+0x1a0>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	3307      	adds	r3, #7
 800ba9a:	f023 0307 	bic.w	r3, r3, #7
 800ba9e:	3308      	adds	r3, #8
 800baa0:	9303      	str	r3, [sp, #12]
 800baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa4:	444b      	add	r3, r9
 800baa6:	9309      	str	r3, [sp, #36]	; 0x24
 800baa8:	e76d      	b.n	800b986 <_svfiprintf_r+0x4a>
 800baaa:	fb05 3202 	mla	r2, r5, r2, r3
 800baae:	2001      	movs	r0, #1
 800bab0:	460f      	mov	r7, r1
 800bab2:	e7a6      	b.n	800ba02 <_svfiprintf_r+0xc6>
 800bab4:	2300      	movs	r3, #0
 800bab6:	3701      	adds	r7, #1
 800bab8:	9305      	str	r3, [sp, #20]
 800baba:	4619      	mov	r1, r3
 800babc:	250a      	movs	r5, #10
 800babe:	4638      	mov	r0, r7
 800bac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bac4:	3a30      	subs	r2, #48	; 0x30
 800bac6:	2a09      	cmp	r2, #9
 800bac8:	d903      	bls.n	800bad2 <_svfiprintf_r+0x196>
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0c8      	beq.n	800ba60 <_svfiprintf_r+0x124>
 800bace:	9105      	str	r1, [sp, #20]
 800bad0:	e7c6      	b.n	800ba60 <_svfiprintf_r+0x124>
 800bad2:	fb05 2101 	mla	r1, r5, r1, r2
 800bad6:	2301      	movs	r3, #1
 800bad8:	4607      	mov	r7, r0
 800bada:	e7f0      	b.n	800babe <_svfiprintf_r+0x182>
 800badc:	ab03      	add	r3, sp, #12
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	4622      	mov	r2, r4
 800bae2:	4b11      	ldr	r3, [pc, #68]	; (800bb28 <_svfiprintf_r+0x1ec>)
 800bae4:	a904      	add	r1, sp, #16
 800bae6:	4640      	mov	r0, r8
 800bae8:	f3af 8000 	nop.w
 800baec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800baf0:	4681      	mov	r9, r0
 800baf2:	d1d6      	bne.n	800baa2 <_svfiprintf_r+0x166>
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	065b      	lsls	r3, r3, #25
 800baf8:	f53f af35 	bmi.w	800b966 <_svfiprintf_r+0x2a>
 800bafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bafe:	b01d      	add	sp, #116	; 0x74
 800bb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb04:	ab03      	add	r3, sp, #12
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4b07      	ldr	r3, [pc, #28]	; (800bb28 <_svfiprintf_r+0x1ec>)
 800bb0c:	a904      	add	r1, sp, #16
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f000 f882 	bl	800bc18 <_printf_i>
 800bb14:	e7ea      	b.n	800baec <_svfiprintf_r+0x1b0>
 800bb16:	bf00      	nop
 800bb18:	0800c1c0 	.word	0x0800c1c0
 800bb1c:	0800c1c6 	.word	0x0800c1c6
 800bb20:	0800c1ca 	.word	0x0800c1ca
 800bb24:	00000000 	.word	0x00000000
 800bb28:	0800b889 	.word	0x0800b889

0800bb2c <_printf_common>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	4691      	mov	r9, r2
 800bb32:	461f      	mov	r7, r3
 800bb34:	688a      	ldr	r2, [r1, #8]
 800bb36:	690b      	ldr	r3, [r1, #16]
 800bb38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	bfb8      	it	lt
 800bb40:	4613      	movlt	r3, r2
 800bb42:	f8c9 3000 	str.w	r3, [r9]
 800bb46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	b112      	cbz	r2, 800bb56 <_printf_common+0x2a>
 800bb50:	3301      	adds	r3, #1
 800bb52:	f8c9 3000 	str.w	r3, [r9]
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	0699      	lsls	r1, r3, #26
 800bb5a:	bf42      	ittt	mi
 800bb5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bb60:	3302      	addmi	r3, #2
 800bb62:	f8c9 3000 	strmi.w	r3, [r9]
 800bb66:	6825      	ldr	r5, [r4, #0]
 800bb68:	f015 0506 	ands.w	r5, r5, #6
 800bb6c:	d107      	bne.n	800bb7e <_printf_common+0x52>
 800bb6e:	f104 0a19 	add.w	sl, r4, #25
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	f8d9 2000 	ldr.w	r2, [r9]
 800bb78:	1a9b      	subs	r3, r3, r2
 800bb7a:	42ab      	cmp	r3, r5
 800bb7c:	dc28      	bgt.n	800bbd0 <_printf_common+0xa4>
 800bb7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bb82:	6822      	ldr	r2, [r4, #0]
 800bb84:	3300      	adds	r3, #0
 800bb86:	bf18      	it	ne
 800bb88:	2301      	movne	r3, #1
 800bb8a:	0692      	lsls	r2, r2, #26
 800bb8c:	d42d      	bmi.n	800bbea <_printf_common+0xbe>
 800bb8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb92:	4639      	mov	r1, r7
 800bb94:	4630      	mov	r0, r6
 800bb96:	47c0      	blx	r8
 800bb98:	3001      	adds	r0, #1
 800bb9a:	d020      	beq.n	800bbde <_printf_common+0xb2>
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	68e5      	ldr	r5, [r4, #12]
 800bba0:	f8d9 2000 	ldr.w	r2, [r9]
 800bba4:	f003 0306 	and.w	r3, r3, #6
 800bba8:	2b04      	cmp	r3, #4
 800bbaa:	bf08      	it	eq
 800bbac:	1aad      	subeq	r5, r5, r2
 800bbae:	68a3      	ldr	r3, [r4, #8]
 800bbb0:	6922      	ldr	r2, [r4, #16]
 800bbb2:	bf0c      	ite	eq
 800bbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbb8:	2500      	movne	r5, #0
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	bfc4      	itt	gt
 800bbbe:	1a9b      	subgt	r3, r3, r2
 800bbc0:	18ed      	addgt	r5, r5, r3
 800bbc2:	f04f 0900 	mov.w	r9, #0
 800bbc6:	341a      	adds	r4, #26
 800bbc8:	454d      	cmp	r5, r9
 800bbca:	d11a      	bne.n	800bc02 <_printf_common+0xd6>
 800bbcc:	2000      	movs	r0, #0
 800bbce:	e008      	b.n	800bbe2 <_printf_common+0xb6>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	47c0      	blx	r8
 800bbda:	3001      	adds	r0, #1
 800bbdc:	d103      	bne.n	800bbe6 <_printf_common+0xba>
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe6:	3501      	adds	r5, #1
 800bbe8:	e7c3      	b.n	800bb72 <_printf_common+0x46>
 800bbea:	18e1      	adds	r1, r4, r3
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	2030      	movs	r0, #48	; 0x30
 800bbf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbf4:	4422      	add	r2, r4
 800bbf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbfe:	3302      	adds	r3, #2
 800bc00:	e7c5      	b.n	800bb8e <_printf_common+0x62>
 800bc02:	2301      	movs	r3, #1
 800bc04:	4622      	mov	r2, r4
 800bc06:	4639      	mov	r1, r7
 800bc08:	4630      	mov	r0, r6
 800bc0a:	47c0      	blx	r8
 800bc0c:	3001      	adds	r0, #1
 800bc0e:	d0e6      	beq.n	800bbde <_printf_common+0xb2>
 800bc10:	f109 0901 	add.w	r9, r9, #1
 800bc14:	e7d8      	b.n	800bbc8 <_printf_common+0x9c>
	...

0800bc18 <_printf_i>:
 800bc18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bc20:	460c      	mov	r4, r1
 800bc22:	7e09      	ldrb	r1, [r1, #24]
 800bc24:	b085      	sub	sp, #20
 800bc26:	296e      	cmp	r1, #110	; 0x6e
 800bc28:	4617      	mov	r7, r2
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	4698      	mov	r8, r3
 800bc2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc30:	f000 80b3 	beq.w	800bd9a <_printf_i+0x182>
 800bc34:	d822      	bhi.n	800bc7c <_printf_i+0x64>
 800bc36:	2963      	cmp	r1, #99	; 0x63
 800bc38:	d036      	beq.n	800bca8 <_printf_i+0x90>
 800bc3a:	d80a      	bhi.n	800bc52 <_printf_i+0x3a>
 800bc3c:	2900      	cmp	r1, #0
 800bc3e:	f000 80b9 	beq.w	800bdb4 <_printf_i+0x19c>
 800bc42:	2958      	cmp	r1, #88	; 0x58
 800bc44:	f000 8083 	beq.w	800bd4e <_printf_i+0x136>
 800bc48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc4c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bc50:	e032      	b.n	800bcb8 <_printf_i+0xa0>
 800bc52:	2964      	cmp	r1, #100	; 0x64
 800bc54:	d001      	beq.n	800bc5a <_printf_i+0x42>
 800bc56:	2969      	cmp	r1, #105	; 0x69
 800bc58:	d1f6      	bne.n	800bc48 <_printf_i+0x30>
 800bc5a:	6820      	ldr	r0, [r4, #0]
 800bc5c:	6813      	ldr	r3, [r2, #0]
 800bc5e:	0605      	lsls	r5, r0, #24
 800bc60:	f103 0104 	add.w	r1, r3, #4
 800bc64:	d52a      	bpl.n	800bcbc <_printf_i+0xa4>
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	6011      	str	r1, [r2, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	da03      	bge.n	800bc76 <_printf_i+0x5e>
 800bc6e:	222d      	movs	r2, #45	; 0x2d
 800bc70:	425b      	negs	r3, r3
 800bc72:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bc76:	486f      	ldr	r0, [pc, #444]	; (800be34 <_printf_i+0x21c>)
 800bc78:	220a      	movs	r2, #10
 800bc7a:	e039      	b.n	800bcf0 <_printf_i+0xd8>
 800bc7c:	2973      	cmp	r1, #115	; 0x73
 800bc7e:	f000 809d 	beq.w	800bdbc <_printf_i+0x1a4>
 800bc82:	d808      	bhi.n	800bc96 <_printf_i+0x7e>
 800bc84:	296f      	cmp	r1, #111	; 0x6f
 800bc86:	d020      	beq.n	800bcca <_printf_i+0xb2>
 800bc88:	2970      	cmp	r1, #112	; 0x70
 800bc8a:	d1dd      	bne.n	800bc48 <_printf_i+0x30>
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	f043 0320 	orr.w	r3, r3, #32
 800bc92:	6023      	str	r3, [r4, #0]
 800bc94:	e003      	b.n	800bc9e <_printf_i+0x86>
 800bc96:	2975      	cmp	r1, #117	; 0x75
 800bc98:	d017      	beq.n	800bcca <_printf_i+0xb2>
 800bc9a:	2978      	cmp	r1, #120	; 0x78
 800bc9c:	d1d4      	bne.n	800bc48 <_printf_i+0x30>
 800bc9e:	2378      	movs	r3, #120	; 0x78
 800bca0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bca4:	4864      	ldr	r0, [pc, #400]	; (800be38 <_printf_i+0x220>)
 800bca6:	e055      	b.n	800bd54 <_printf_i+0x13c>
 800bca8:	6813      	ldr	r3, [r2, #0]
 800bcaa:	1d19      	adds	r1, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6011      	str	r1, [r2, #0]
 800bcb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e08c      	b.n	800bdd6 <_printf_i+0x1be>
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6011      	str	r1, [r2, #0]
 800bcc0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bcc4:	bf18      	it	ne
 800bcc6:	b21b      	sxthne	r3, r3
 800bcc8:	e7cf      	b.n	800bc6a <_printf_i+0x52>
 800bcca:	6813      	ldr	r3, [r2, #0]
 800bccc:	6825      	ldr	r5, [r4, #0]
 800bcce:	1d18      	adds	r0, r3, #4
 800bcd0:	6010      	str	r0, [r2, #0]
 800bcd2:	0628      	lsls	r0, r5, #24
 800bcd4:	d501      	bpl.n	800bcda <_printf_i+0xc2>
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	e002      	b.n	800bce0 <_printf_i+0xc8>
 800bcda:	0668      	lsls	r0, r5, #25
 800bcdc:	d5fb      	bpl.n	800bcd6 <_printf_i+0xbe>
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	4854      	ldr	r0, [pc, #336]	; (800be34 <_printf_i+0x21c>)
 800bce2:	296f      	cmp	r1, #111	; 0x6f
 800bce4:	bf14      	ite	ne
 800bce6:	220a      	movne	r2, #10
 800bce8:	2208      	moveq	r2, #8
 800bcea:	2100      	movs	r1, #0
 800bcec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcf0:	6865      	ldr	r5, [r4, #4]
 800bcf2:	60a5      	str	r5, [r4, #8]
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	f2c0 8095 	blt.w	800be24 <_printf_i+0x20c>
 800bcfa:	6821      	ldr	r1, [r4, #0]
 800bcfc:	f021 0104 	bic.w	r1, r1, #4
 800bd00:	6021      	str	r1, [r4, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d13d      	bne.n	800bd82 <_printf_i+0x16a>
 800bd06:	2d00      	cmp	r5, #0
 800bd08:	f040 808e 	bne.w	800be28 <_printf_i+0x210>
 800bd0c:	4665      	mov	r5, ip
 800bd0e:	2a08      	cmp	r2, #8
 800bd10:	d10b      	bne.n	800bd2a <_printf_i+0x112>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	07db      	lsls	r3, r3, #31
 800bd16:	d508      	bpl.n	800bd2a <_printf_i+0x112>
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	6862      	ldr	r2, [r4, #4]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	bfde      	ittt	le
 800bd20:	2330      	movle	r3, #48	; 0x30
 800bd22:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd26:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd2a:	ebac 0305 	sub.w	r3, ip, r5
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	f8cd 8000 	str.w	r8, [sp]
 800bd34:	463b      	mov	r3, r7
 800bd36:	aa03      	add	r2, sp, #12
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff fef6 	bl	800bb2c <_printf_common>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d14d      	bne.n	800bde0 <_printf_i+0x1c8>
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	b005      	add	sp, #20
 800bd4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd4e:	4839      	ldr	r0, [pc, #228]	; (800be34 <_printf_i+0x21c>)
 800bd50:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bd54:	6813      	ldr	r3, [r2, #0]
 800bd56:	6821      	ldr	r1, [r4, #0]
 800bd58:	1d1d      	adds	r5, r3, #4
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6015      	str	r5, [r2, #0]
 800bd5e:	060a      	lsls	r2, r1, #24
 800bd60:	d50b      	bpl.n	800bd7a <_printf_i+0x162>
 800bd62:	07ca      	lsls	r2, r1, #31
 800bd64:	bf44      	itt	mi
 800bd66:	f041 0120 	orrmi.w	r1, r1, #32
 800bd6a:	6021      	strmi	r1, [r4, #0]
 800bd6c:	b91b      	cbnz	r3, 800bd76 <_printf_i+0x15e>
 800bd6e:	6822      	ldr	r2, [r4, #0]
 800bd70:	f022 0220 	bic.w	r2, r2, #32
 800bd74:	6022      	str	r2, [r4, #0]
 800bd76:	2210      	movs	r2, #16
 800bd78:	e7b7      	b.n	800bcea <_printf_i+0xd2>
 800bd7a:	064d      	lsls	r5, r1, #25
 800bd7c:	bf48      	it	mi
 800bd7e:	b29b      	uxthmi	r3, r3
 800bd80:	e7ef      	b.n	800bd62 <_printf_i+0x14a>
 800bd82:	4665      	mov	r5, ip
 800bd84:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd88:	fb02 3311 	mls	r3, r2, r1, r3
 800bd8c:	5cc3      	ldrb	r3, [r0, r3]
 800bd8e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bd92:	460b      	mov	r3, r1
 800bd94:	2900      	cmp	r1, #0
 800bd96:	d1f5      	bne.n	800bd84 <_printf_i+0x16c>
 800bd98:	e7b9      	b.n	800bd0e <_printf_i+0xf6>
 800bd9a:	6813      	ldr	r3, [r2, #0]
 800bd9c:	6825      	ldr	r5, [r4, #0]
 800bd9e:	6961      	ldr	r1, [r4, #20]
 800bda0:	1d18      	adds	r0, r3, #4
 800bda2:	6010      	str	r0, [r2, #0]
 800bda4:	0628      	lsls	r0, r5, #24
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	d501      	bpl.n	800bdae <_printf_i+0x196>
 800bdaa:	6019      	str	r1, [r3, #0]
 800bdac:	e002      	b.n	800bdb4 <_printf_i+0x19c>
 800bdae:	066a      	lsls	r2, r5, #25
 800bdb0:	d5fb      	bpl.n	800bdaa <_printf_i+0x192>
 800bdb2:	8019      	strh	r1, [r3, #0]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	6123      	str	r3, [r4, #16]
 800bdb8:	4665      	mov	r5, ip
 800bdba:	e7b9      	b.n	800bd30 <_printf_i+0x118>
 800bdbc:	6813      	ldr	r3, [r2, #0]
 800bdbe:	1d19      	adds	r1, r3, #4
 800bdc0:	6011      	str	r1, [r2, #0]
 800bdc2:	681d      	ldr	r5, [r3, #0]
 800bdc4:	6862      	ldr	r2, [r4, #4]
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7f4 fa19 	bl	8000200 <memchr>
 800bdce:	b108      	cbz	r0, 800bdd4 <_printf_i+0x1bc>
 800bdd0:	1b40      	subs	r0, r0, r5
 800bdd2:	6060      	str	r0, [r4, #4]
 800bdd4:	6863      	ldr	r3, [r4, #4]
 800bdd6:	6123      	str	r3, [r4, #16]
 800bdd8:	2300      	movs	r3, #0
 800bdda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdde:	e7a7      	b.n	800bd30 <_printf_i+0x118>
 800bde0:	6923      	ldr	r3, [r4, #16]
 800bde2:	462a      	mov	r2, r5
 800bde4:	4639      	mov	r1, r7
 800bde6:	4630      	mov	r0, r6
 800bde8:	47c0      	blx	r8
 800bdea:	3001      	adds	r0, #1
 800bdec:	d0aa      	beq.n	800bd44 <_printf_i+0x12c>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	079b      	lsls	r3, r3, #30
 800bdf2:	d413      	bmi.n	800be1c <_printf_i+0x204>
 800bdf4:	68e0      	ldr	r0, [r4, #12]
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	4298      	cmp	r0, r3
 800bdfa:	bfb8      	it	lt
 800bdfc:	4618      	movlt	r0, r3
 800bdfe:	e7a3      	b.n	800bd48 <_printf_i+0x130>
 800be00:	2301      	movs	r3, #1
 800be02:	464a      	mov	r2, r9
 800be04:	4639      	mov	r1, r7
 800be06:	4630      	mov	r0, r6
 800be08:	47c0      	blx	r8
 800be0a:	3001      	adds	r0, #1
 800be0c:	d09a      	beq.n	800bd44 <_printf_i+0x12c>
 800be0e:	3501      	adds	r5, #1
 800be10:	68e3      	ldr	r3, [r4, #12]
 800be12:	9a03      	ldr	r2, [sp, #12]
 800be14:	1a9b      	subs	r3, r3, r2
 800be16:	42ab      	cmp	r3, r5
 800be18:	dcf2      	bgt.n	800be00 <_printf_i+0x1e8>
 800be1a:	e7eb      	b.n	800bdf4 <_printf_i+0x1dc>
 800be1c:	2500      	movs	r5, #0
 800be1e:	f104 0919 	add.w	r9, r4, #25
 800be22:	e7f5      	b.n	800be10 <_printf_i+0x1f8>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1ac      	bne.n	800bd82 <_printf_i+0x16a>
 800be28:	7803      	ldrb	r3, [r0, #0]
 800be2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be32:	e76c      	b.n	800bd0e <_printf_i+0xf6>
 800be34:	0800c1d1 	.word	0x0800c1d1
 800be38:	0800c1e2 	.word	0x0800c1e2

0800be3c <memmove>:
 800be3c:	4288      	cmp	r0, r1
 800be3e:	b510      	push	{r4, lr}
 800be40:	eb01 0302 	add.w	r3, r1, r2
 800be44:	d807      	bhi.n	800be56 <memmove+0x1a>
 800be46:	1e42      	subs	r2, r0, #1
 800be48:	4299      	cmp	r1, r3
 800be4a:	d00a      	beq.n	800be62 <memmove+0x26>
 800be4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be50:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be54:	e7f8      	b.n	800be48 <memmove+0xc>
 800be56:	4283      	cmp	r3, r0
 800be58:	d9f5      	bls.n	800be46 <memmove+0xa>
 800be5a:	1881      	adds	r1, r0, r2
 800be5c:	1ad2      	subs	r2, r2, r3
 800be5e:	42d3      	cmn	r3, r2
 800be60:	d100      	bne.n	800be64 <memmove+0x28>
 800be62:	bd10      	pop	{r4, pc}
 800be64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be6c:	e7f7      	b.n	800be5e <memmove+0x22>
	...

0800be70 <_free_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4605      	mov	r5, r0
 800be74:	2900      	cmp	r1, #0
 800be76:	d045      	beq.n	800bf04 <_free_r+0x94>
 800be78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be7c:	1f0c      	subs	r4, r1, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bfb8      	it	lt
 800be82:	18e4      	addlt	r4, r4, r3
 800be84:	f000 f8d2 	bl	800c02c <__malloc_lock>
 800be88:	4a1f      	ldr	r2, [pc, #124]	; (800bf08 <_free_r+0x98>)
 800be8a:	6813      	ldr	r3, [r2, #0]
 800be8c:	4610      	mov	r0, r2
 800be8e:	b933      	cbnz	r3, 800be9e <_free_r+0x2e>
 800be90:	6063      	str	r3, [r4, #4]
 800be92:	6014      	str	r4, [r2, #0]
 800be94:	4628      	mov	r0, r5
 800be96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be9a:	f000 b8c8 	b.w	800c02e <__malloc_unlock>
 800be9e:	42a3      	cmp	r3, r4
 800bea0:	d90c      	bls.n	800bebc <_free_r+0x4c>
 800bea2:	6821      	ldr	r1, [r4, #0]
 800bea4:	1862      	adds	r2, r4, r1
 800bea6:	4293      	cmp	r3, r2
 800bea8:	bf04      	itt	eq
 800beaa:	681a      	ldreq	r2, [r3, #0]
 800beac:	685b      	ldreq	r3, [r3, #4]
 800beae:	6063      	str	r3, [r4, #4]
 800beb0:	bf04      	itt	eq
 800beb2:	1852      	addeq	r2, r2, r1
 800beb4:	6022      	streq	r2, [r4, #0]
 800beb6:	6004      	str	r4, [r0, #0]
 800beb8:	e7ec      	b.n	800be94 <_free_r+0x24>
 800beba:	4613      	mov	r3, r2
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	b10a      	cbz	r2, 800bec4 <_free_r+0x54>
 800bec0:	42a2      	cmp	r2, r4
 800bec2:	d9fa      	bls.n	800beba <_free_r+0x4a>
 800bec4:	6819      	ldr	r1, [r3, #0]
 800bec6:	1858      	adds	r0, r3, r1
 800bec8:	42a0      	cmp	r0, r4
 800beca:	d10b      	bne.n	800bee4 <_free_r+0x74>
 800becc:	6820      	ldr	r0, [r4, #0]
 800bece:	4401      	add	r1, r0
 800bed0:	1858      	adds	r0, r3, r1
 800bed2:	4282      	cmp	r2, r0
 800bed4:	6019      	str	r1, [r3, #0]
 800bed6:	d1dd      	bne.n	800be94 <_free_r+0x24>
 800bed8:	6810      	ldr	r0, [r2, #0]
 800beda:	6852      	ldr	r2, [r2, #4]
 800bedc:	605a      	str	r2, [r3, #4]
 800bede:	4401      	add	r1, r0
 800bee0:	6019      	str	r1, [r3, #0]
 800bee2:	e7d7      	b.n	800be94 <_free_r+0x24>
 800bee4:	d902      	bls.n	800beec <_free_r+0x7c>
 800bee6:	230c      	movs	r3, #12
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	e7d3      	b.n	800be94 <_free_r+0x24>
 800beec:	6820      	ldr	r0, [r4, #0]
 800beee:	1821      	adds	r1, r4, r0
 800bef0:	428a      	cmp	r2, r1
 800bef2:	bf04      	itt	eq
 800bef4:	6811      	ldreq	r1, [r2, #0]
 800bef6:	6852      	ldreq	r2, [r2, #4]
 800bef8:	6062      	str	r2, [r4, #4]
 800befa:	bf04      	itt	eq
 800befc:	1809      	addeq	r1, r1, r0
 800befe:	6021      	streq	r1, [r4, #0]
 800bf00:	605c      	str	r4, [r3, #4]
 800bf02:	e7c7      	b.n	800be94 <_free_r+0x24>
 800bf04:	bd38      	pop	{r3, r4, r5, pc}
 800bf06:	bf00      	nop
 800bf08:	20004098 	.word	0x20004098

0800bf0c <_malloc_r>:
 800bf0c:	b570      	push	{r4, r5, r6, lr}
 800bf0e:	1ccd      	adds	r5, r1, #3
 800bf10:	f025 0503 	bic.w	r5, r5, #3
 800bf14:	3508      	adds	r5, #8
 800bf16:	2d0c      	cmp	r5, #12
 800bf18:	bf38      	it	cc
 800bf1a:	250c      	movcc	r5, #12
 800bf1c:	2d00      	cmp	r5, #0
 800bf1e:	4606      	mov	r6, r0
 800bf20:	db01      	blt.n	800bf26 <_malloc_r+0x1a>
 800bf22:	42a9      	cmp	r1, r5
 800bf24:	d903      	bls.n	800bf2e <_malloc_r+0x22>
 800bf26:	230c      	movs	r3, #12
 800bf28:	6033      	str	r3, [r6, #0]
 800bf2a:	2000      	movs	r0, #0
 800bf2c:	bd70      	pop	{r4, r5, r6, pc}
 800bf2e:	f000 f87d 	bl	800c02c <__malloc_lock>
 800bf32:	4a21      	ldr	r2, [pc, #132]	; (800bfb8 <_malloc_r+0xac>)
 800bf34:	6814      	ldr	r4, [r2, #0]
 800bf36:	4621      	mov	r1, r4
 800bf38:	b991      	cbnz	r1, 800bf60 <_malloc_r+0x54>
 800bf3a:	4c20      	ldr	r4, [pc, #128]	; (800bfbc <_malloc_r+0xb0>)
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	b91b      	cbnz	r3, 800bf48 <_malloc_r+0x3c>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f000 f863 	bl	800c00c <_sbrk_r>
 800bf46:	6020      	str	r0, [r4, #0]
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f000 f85e 	bl	800c00c <_sbrk_r>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d124      	bne.n	800bf9e <_malloc_r+0x92>
 800bf54:	230c      	movs	r3, #12
 800bf56:	6033      	str	r3, [r6, #0]
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f000 f868 	bl	800c02e <__malloc_unlock>
 800bf5e:	e7e4      	b.n	800bf2a <_malloc_r+0x1e>
 800bf60:	680b      	ldr	r3, [r1, #0]
 800bf62:	1b5b      	subs	r3, r3, r5
 800bf64:	d418      	bmi.n	800bf98 <_malloc_r+0x8c>
 800bf66:	2b0b      	cmp	r3, #11
 800bf68:	d90f      	bls.n	800bf8a <_malloc_r+0x7e>
 800bf6a:	600b      	str	r3, [r1, #0]
 800bf6c:	50cd      	str	r5, [r1, r3]
 800bf6e:	18cc      	adds	r4, r1, r3
 800bf70:	4630      	mov	r0, r6
 800bf72:	f000 f85c 	bl	800c02e <__malloc_unlock>
 800bf76:	f104 000b 	add.w	r0, r4, #11
 800bf7a:	1d23      	adds	r3, r4, #4
 800bf7c:	f020 0007 	bic.w	r0, r0, #7
 800bf80:	1ac3      	subs	r3, r0, r3
 800bf82:	d0d3      	beq.n	800bf2c <_malloc_r+0x20>
 800bf84:	425a      	negs	r2, r3
 800bf86:	50e2      	str	r2, [r4, r3]
 800bf88:	e7d0      	b.n	800bf2c <_malloc_r+0x20>
 800bf8a:	428c      	cmp	r4, r1
 800bf8c:	684b      	ldr	r3, [r1, #4]
 800bf8e:	bf16      	itet	ne
 800bf90:	6063      	strne	r3, [r4, #4]
 800bf92:	6013      	streq	r3, [r2, #0]
 800bf94:	460c      	movne	r4, r1
 800bf96:	e7eb      	b.n	800bf70 <_malloc_r+0x64>
 800bf98:	460c      	mov	r4, r1
 800bf9a:	6849      	ldr	r1, [r1, #4]
 800bf9c:	e7cc      	b.n	800bf38 <_malloc_r+0x2c>
 800bf9e:	1cc4      	adds	r4, r0, #3
 800bfa0:	f024 0403 	bic.w	r4, r4, #3
 800bfa4:	42a0      	cmp	r0, r4
 800bfa6:	d005      	beq.n	800bfb4 <_malloc_r+0xa8>
 800bfa8:	1a21      	subs	r1, r4, r0
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f000 f82e 	bl	800c00c <_sbrk_r>
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d0cf      	beq.n	800bf54 <_malloc_r+0x48>
 800bfb4:	6025      	str	r5, [r4, #0]
 800bfb6:	e7db      	b.n	800bf70 <_malloc_r+0x64>
 800bfb8:	20004098 	.word	0x20004098
 800bfbc:	2000409c 	.word	0x2000409c

0800bfc0 <_realloc_r>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	4607      	mov	r7, r0
 800bfc4:	4614      	mov	r4, r2
 800bfc6:	460e      	mov	r6, r1
 800bfc8:	b921      	cbnz	r1, 800bfd4 <_realloc_r+0x14>
 800bfca:	4611      	mov	r1, r2
 800bfcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfd0:	f7ff bf9c 	b.w	800bf0c <_malloc_r>
 800bfd4:	b922      	cbnz	r2, 800bfe0 <_realloc_r+0x20>
 800bfd6:	f7ff ff4b 	bl	800be70 <_free_r>
 800bfda:	4625      	mov	r5, r4
 800bfdc:	4628      	mov	r0, r5
 800bfde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfe0:	f000 f826 	bl	800c030 <_malloc_usable_size_r>
 800bfe4:	42a0      	cmp	r0, r4
 800bfe6:	d20f      	bcs.n	800c008 <_realloc_r+0x48>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4638      	mov	r0, r7
 800bfec:	f7ff ff8e 	bl	800bf0c <_malloc_r>
 800bff0:	4605      	mov	r5, r0
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0f2      	beq.n	800bfdc <_realloc_r+0x1c>
 800bff6:	4631      	mov	r1, r6
 800bff8:	4622      	mov	r2, r4
 800bffa:	f7ff fc11 	bl	800b820 <memcpy>
 800bffe:	4631      	mov	r1, r6
 800c000:	4638      	mov	r0, r7
 800c002:	f7ff ff35 	bl	800be70 <_free_r>
 800c006:	e7e9      	b.n	800bfdc <_realloc_r+0x1c>
 800c008:	4635      	mov	r5, r6
 800c00a:	e7e7      	b.n	800bfdc <_realloc_r+0x1c>

0800c00c <_sbrk_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4c06      	ldr	r4, [pc, #24]	; (800c028 <_sbrk_r+0x1c>)
 800c010:	2300      	movs	r3, #0
 800c012:	4605      	mov	r5, r0
 800c014:	4608      	mov	r0, r1
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	f7f6 fbb6 	bl	8002788 <_sbrk>
 800c01c:	1c43      	adds	r3, r0, #1
 800c01e:	d102      	bne.n	800c026 <_sbrk_r+0x1a>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	b103      	cbz	r3, 800c026 <_sbrk_r+0x1a>
 800c024:	602b      	str	r3, [r5, #0]
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	2000436c 	.word	0x2000436c

0800c02c <__malloc_lock>:
 800c02c:	4770      	bx	lr

0800c02e <__malloc_unlock>:
 800c02e:	4770      	bx	lr

0800c030 <_malloc_usable_size_r>:
 800c030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c034:	1f18      	subs	r0, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfbc      	itt	lt
 800c03a:	580b      	ldrlt	r3, [r1, r0]
 800c03c:	18c0      	addlt	r0, r0, r3
 800c03e:	4770      	bx	lr

0800c040 <_init>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	bf00      	nop
 800c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c046:	bc08      	pop	{r3}
 800c048:	469e      	mov	lr, r3
 800c04a:	4770      	bx	lr

0800c04c <_fini>:
 800c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04e:	bf00      	nop
 800c050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c052:	bc08      	pop	{r3}
 800c054:	469e      	mov	lr, r3
 800c056:	4770      	bx	lr
